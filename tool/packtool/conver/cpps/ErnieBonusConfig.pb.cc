// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ErnieBonusConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ErnieBonusConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* ErnieBonusConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErnieBonusConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ErnieBonusConfig_2eproto() {
  protobuf_AddDesc_ErnieBonusConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ErnieBonusConfig.proto");
  GOOGLE_CHECK(file != NULL);
  ErnieBonusConfig_descriptor_ = file->message_type(0);
  static const int ErnieBonusConfig_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErnieBonusConfig, first_add_drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErnieBonusConfig, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErnieBonusConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErnieBonusConfig, puzzle_drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErnieBonusConfig, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErnieBonusConfig, replace_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErnieBonusConfig, drop_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErnieBonusConfig, add_drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErnieBonusConfig, replace_drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErnieBonusConfig, first_drop_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErnieBonusConfig, ernie_display_),
  };
  ErnieBonusConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ErnieBonusConfig_descriptor_,
      ErnieBonusConfig::default_instance_,
      ErnieBonusConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErnieBonusConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErnieBonusConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ErnieBonusConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ErnieBonusConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ErnieBonusConfig_descriptor_, &ErnieBonusConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ErnieBonusConfig_2eproto() {
  delete ErnieBonusConfig::default_instance_;
  delete ErnieBonusConfig_reflection_;
}

void protobuf_AddDesc_ErnieBonusConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ErnieBonusConfig.proto\022\022DianShiTech.Co"
    "nfig\032\025ConfigTypeGroup.proto\"\351\001\n\020ErnieBon"
    "usConfig\022\026\n\016first_add_drop\030\004 \003(\005\022\014\n\004cost"
    "\030\007 \001(\005\022\n\n\002id\030\001 \001(\005\022\023\n\013puzzle_drop\030\006 \003(\005\022"
    "\014\n\004desc\030\t \001(\t\022\025\n\rreplace_count\030\n \001(\005\022\021\n\t"
    "drop_data\030\003 \003(\005\022\020\n\010add_drop\030\005 \003(\005\022\024\n\014rep"
    "lace_drop\030\013 \001(\005\022\027\n\017first_drop_data\030\002 \003(\005"
    "\022\025\n\rernie_display\030\010 \003(\005", 303);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ErnieBonusConfig.proto", &protobuf_RegisterTypes);
  ErnieBonusConfig::default_instance_ = new ErnieBonusConfig();
  ErnieBonusConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ErnieBonusConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ErnieBonusConfig_2eproto {
  StaticDescriptorInitializer_ErnieBonusConfig_2eproto() {
    protobuf_AddDesc_ErnieBonusConfig_2eproto();
  }
} static_descriptor_initializer_ErnieBonusConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ErnieBonusConfig::kFirstAddDropFieldNumber;
const int ErnieBonusConfig::kCostFieldNumber;
const int ErnieBonusConfig::kIdFieldNumber;
const int ErnieBonusConfig::kPuzzleDropFieldNumber;
const int ErnieBonusConfig::kDescFieldNumber;
const int ErnieBonusConfig::kReplaceCountFieldNumber;
const int ErnieBonusConfig::kDropDataFieldNumber;
const int ErnieBonusConfig::kAddDropFieldNumber;
const int ErnieBonusConfig::kReplaceDropFieldNumber;
const int ErnieBonusConfig::kFirstDropDataFieldNumber;
const int ErnieBonusConfig::kErnieDisplayFieldNumber;
#endif  // !_MSC_VER

ErnieBonusConfig::ErnieBonusConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ErnieBonusConfig::InitAsDefaultInstance() {
}

ErnieBonusConfig::ErnieBonusConfig(const ErnieBonusConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ErnieBonusConfig::SharedCtor() {
  _cached_size_ = 0;
  cost_ = 0;
  id_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  replace_count_ = 0;
  replace_drop_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ErnieBonusConfig::~ErnieBonusConfig() {
  SharedDtor();
}

void ErnieBonusConfig::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void ErnieBonusConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErnieBonusConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErnieBonusConfig_descriptor_;
}

const ErnieBonusConfig& ErnieBonusConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ErnieBonusConfig_2eproto();
  return *default_instance_;
}

ErnieBonusConfig* ErnieBonusConfig::default_instance_ = NULL;

ErnieBonusConfig* ErnieBonusConfig::New() const {
  return new ErnieBonusConfig;
}

void ErnieBonusConfig::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    cost_ = 0;
    id_ = 0;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    replace_count_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    replace_drop_ = 0;
  }
  first_add_drop_.Clear();
  puzzle_drop_.Clear();
  drop_data_.Clear();
  add_drop_.Clear();
  first_drop_data_.Clear();
  ernie_display_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ErnieBonusConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_first_drop_data;
        break;
      }

      // repeated int32 first_drop_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_drop_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_first_drop_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_first_drop_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_first_drop_data;
        if (input->ExpectTag(24)) goto parse_drop_data;
        break;
      }

      // repeated int32 drop_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_drop_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_drop_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_drop_data;
        if (input->ExpectTag(32)) goto parse_first_add_drop;
        break;
      }

      // repeated int32 first_add_drop = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_add_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_first_add_drop())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_first_add_drop())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_first_add_drop;
        if (input->ExpectTag(40)) goto parse_add_drop;
        break;
      }

      // repeated int32 add_drop = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_add_drop())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_add_drop())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_add_drop;
        if (input->ExpectTag(48)) goto parse_puzzle_drop;
        break;
      }

      // repeated int32 puzzle_drop = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_puzzle_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_puzzle_drop())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_puzzle_drop())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_puzzle_drop;
        if (input->ExpectTag(56)) goto parse_cost;
        break;
      }

      // optional int32 cost = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ernie_display;
        break;
      }

      // repeated int32 ernie_display = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ernie_display:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_ernie_display())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ernie_display())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ernie_display;
        if (input->ExpectTag(74)) goto parse_desc;
        break;
      }

      // optional string desc = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_replace_count;
        break;
      }

      // optional int32 replace_count = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replace_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replace_count_)));
          set_has_replace_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_replace_drop;
        break;
      }

      // optional int32 replace_drop = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replace_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replace_drop_)));
          set_has_replace_drop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ErnieBonusConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated int32 first_drop_data = 2;
  for (int i = 0; i < this->first_drop_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->first_drop_data(i), output);
  }

  // repeated int32 drop_data = 3;
  for (int i = 0; i < this->drop_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->drop_data(i), output);
  }

  // repeated int32 first_add_drop = 4;
  for (int i = 0; i < this->first_add_drop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->first_add_drop(i), output);
  }

  // repeated int32 add_drop = 5;
  for (int i = 0; i < this->add_drop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->add_drop(i), output);
  }

  // repeated int32 puzzle_drop = 6;
  for (int i = 0; i < this->puzzle_drop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->puzzle_drop(i), output);
  }

  // optional int32 cost = 7;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cost(), output);
  }

  // repeated int32 ernie_display = 8;
  for (int i = 0; i < this->ernie_display_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->ernie_display(i), output);
  }

  // optional string desc = 9;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->desc(), output);
  }

  // optional int32 replace_count = 10;
  if (has_replace_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->replace_count(), output);
  }

  // optional int32 replace_drop = 11;
  if (has_replace_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->replace_drop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ErnieBonusConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated int32 first_drop_data = 2;
  for (int i = 0; i < this->first_drop_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->first_drop_data(i), target);
  }

  // repeated int32 drop_data = 3;
  for (int i = 0; i < this->drop_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->drop_data(i), target);
  }

  // repeated int32 first_add_drop = 4;
  for (int i = 0; i < this->first_add_drop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->first_add_drop(i), target);
  }

  // repeated int32 add_drop = 5;
  for (int i = 0; i < this->add_drop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->add_drop(i), target);
  }

  // repeated int32 puzzle_drop = 6;
  for (int i = 0; i < this->puzzle_drop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->puzzle_drop(i), target);
  }

  // optional int32 cost = 7;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cost(), target);
  }

  // repeated int32 ernie_display = 8;
  for (int i = 0; i < this->ernie_display_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->ernie_display(i), target);
  }

  // optional string desc = 9;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->desc(), target);
  }

  // optional int32 replace_count = 10;
  if (has_replace_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->replace_count(), target);
  }

  // optional int32 replace_drop = 11;
  if (has_replace_drop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->replace_drop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ErnieBonusConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 cost = 7;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string desc = 9;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional int32 replace_count = 10;
    if (has_replace_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replace_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 replace_drop = 11;
    if (has_replace_drop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replace_drop());
    }

  }
  // repeated int32 first_add_drop = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->first_add_drop_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->first_add_drop(i));
    }
    total_size += 1 * this->first_add_drop_size() + data_size;
  }

  // repeated int32 puzzle_drop = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->puzzle_drop_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->puzzle_drop(i));
    }
    total_size += 1 * this->puzzle_drop_size() + data_size;
  }

  // repeated int32 drop_data = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->drop_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->drop_data(i));
    }
    total_size += 1 * this->drop_data_size() + data_size;
  }

  // repeated int32 add_drop = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->add_drop_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->add_drop(i));
    }
    total_size += 1 * this->add_drop_size() + data_size;
  }

  // repeated int32 first_drop_data = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->first_drop_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->first_drop_data(i));
    }
    total_size += 1 * this->first_drop_data_size() + data_size;
  }

  // repeated int32 ernie_display = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->ernie_display_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ernie_display(i));
    }
    total_size += 1 * this->ernie_display_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErnieBonusConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ErnieBonusConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ErnieBonusConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ErnieBonusConfig::MergeFrom(const ErnieBonusConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  first_add_drop_.MergeFrom(from.first_add_drop_);
  puzzle_drop_.MergeFrom(from.puzzle_drop_);
  drop_data_.MergeFrom(from.drop_data_);
  add_drop_.MergeFrom(from.add_drop_);
  first_drop_data_.MergeFrom(from.first_drop_data_);
  ernie_display_.MergeFrom(from.ernie_display_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_replace_count()) {
      set_replace_count(from.replace_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_replace_drop()) {
      set_replace_drop(from.replace_drop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ErnieBonusConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErnieBonusConfig::CopyFrom(const ErnieBonusConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErnieBonusConfig::IsInitialized() const {

  return true;
}

void ErnieBonusConfig::Swap(ErnieBonusConfig* other) {
  if (other != this) {
    first_add_drop_.Swap(&other->first_add_drop_);
    std::swap(cost_, other->cost_);
    std::swap(id_, other->id_);
    puzzle_drop_.Swap(&other->puzzle_drop_);
    std::swap(desc_, other->desc_);
    std::swap(replace_count_, other->replace_count_);
    drop_data_.Swap(&other->drop_data_);
    add_drop_.Swap(&other->add_drop_);
    std::swap(replace_drop_, other->replace_drop_);
    first_drop_data_.Swap(&other->first_drop_data_);
    ernie_display_.Swap(&other->ernie_display_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ErnieBonusConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErnieBonusConfig_descriptor_;
  metadata.reflection = ErnieBonusConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

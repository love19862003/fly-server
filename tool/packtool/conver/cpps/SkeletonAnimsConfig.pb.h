// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SkeletonAnimsConfig.proto

#ifndef PROTOBUF_SkeletonAnimsConfig_2eproto__INCLUDED
#define PROTOBUF_SkeletonAnimsConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SkeletonAnimsConfig_2eproto();
void protobuf_AssignDesc_SkeletonAnimsConfig_2eproto();
void protobuf_ShutdownFile_SkeletonAnimsConfig_2eproto();

class SkeletonAnimsConfig;

// ===================================================================

class SkeletonAnimsConfig : public ::google::protobuf::Message {
 public:
  SkeletonAnimsConfig();
  virtual ~SkeletonAnimsConfig();

  SkeletonAnimsConfig(const SkeletonAnimsConfig& from);

  inline SkeletonAnimsConfig& operator=(const SkeletonAnimsConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkeletonAnimsConfig& default_instance();

  void Swap(SkeletonAnimsConfig* other);

  // implements Message ----------------------------------------------

  SkeletonAnimsConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkeletonAnimsConfig& from);
  void MergeFrom(const SkeletonAnimsConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string animate = 5;
  inline bool has_animate() const;
  inline void clear_animate();
  static const int kAnimateFieldNumber = 5;
  inline const ::std::string& animate() const;
  inline void set_animate(const ::std::string& value);
  inline void set_animate(const char* value);
  inline void set_animate(const char* value, size_t size);
  inline ::std::string* mutable_animate();
  inline ::std::string* release_animate();
  inline void set_allocated_animate(::std::string* animate);

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 duration = 8;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 8;
  inline ::google::protobuf::int32 duration() const;
  inline void set_duration(::google::protobuf::int32 value);

  // optional string folder = 2;
  inline bool has_folder() const;
  inline void clear_folder();
  static const int kFolderFieldNumber = 2;
  inline const ::std::string& folder() const;
  inline void set_folder(const ::std::string& value);
  inline void set_folder(const char* value);
  inline void set_folder(const char* value, size_t size);
  inline ::std::string* mutable_folder();
  inline ::std::string* release_folder();
  inline void set_allocated_folder(::std::string* folder);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string armature = 4;
  inline bool has_armature() const;
  inline void clear_armature();
  static const int kArmatureFieldNumber = 4;
  inline const ::std::string& armature() const;
  inline void set_armature(const ::std::string& value);
  inline void set_armature(const char* value);
  inline void set_armature(const char* value, size_t size);
  inline ::std::string* mutable_armature();
  inline ::std::string* release_armature();
  inline void set_allocated_armature(::std::string* armature);

  // optional int32 offsetx = 6;
  inline bool has_offsetx() const;
  inline void clear_offsetx();
  static const int kOffsetxFieldNumber = 6;
  inline ::google::protobuf::int32 offsetx() const;
  inline void set_offsetx(::google::protobuf::int32 value);

  // optional int32 offsety = 7;
  inline bool has_offsety() const;
  inline void clear_offsety();
  static const int kOffsetyFieldNumber = 7;
  inline ::google::protobuf::int32 offsety() const;
  inline void set_offsety(::google::protobuf::int32 value);

  // optional int32 size = 9;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 9;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DianShiTech.Config.SkeletonAnimsConfig)
 private:
  inline void set_has_animate();
  inline void clear_has_animate();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_folder();
  inline void clear_has_folder();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_armature();
  inline void clear_has_armature();
  inline void set_has_offsetx();
  inline void clear_has_offsetx();
  inline void set_has_offsety();
  inline void clear_has_offsety();
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* animate_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 duration_;
  ::std::string* folder_;
  ::std::string* name_;
  ::std::string* armature_;
  ::google::protobuf::int32 offsetx_;
  ::google::protobuf::int32 offsety_;
  ::google::protobuf::int32 size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_SkeletonAnimsConfig_2eproto();
  friend void protobuf_AssignDesc_SkeletonAnimsConfig_2eproto();
  friend void protobuf_ShutdownFile_SkeletonAnimsConfig_2eproto();

  void InitAsDefaultInstance();
  static SkeletonAnimsConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// SkeletonAnimsConfig

// optional string animate = 5;
inline bool SkeletonAnimsConfig::has_animate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkeletonAnimsConfig::set_has_animate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkeletonAnimsConfig::clear_has_animate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkeletonAnimsConfig::clear_animate() {
  if (animate_ != &::google::protobuf::internal::kEmptyString) {
    animate_->clear();
  }
  clear_has_animate();
}
inline const ::std::string& SkeletonAnimsConfig::animate() const {
  return *animate_;
}
inline void SkeletonAnimsConfig::set_animate(const ::std::string& value) {
  set_has_animate();
  if (animate_ == &::google::protobuf::internal::kEmptyString) {
    animate_ = new ::std::string;
  }
  animate_->assign(value);
}
inline void SkeletonAnimsConfig::set_animate(const char* value) {
  set_has_animate();
  if (animate_ == &::google::protobuf::internal::kEmptyString) {
    animate_ = new ::std::string;
  }
  animate_->assign(value);
}
inline void SkeletonAnimsConfig::set_animate(const char* value, size_t size) {
  set_has_animate();
  if (animate_ == &::google::protobuf::internal::kEmptyString) {
    animate_ = new ::std::string;
  }
  animate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SkeletonAnimsConfig::mutable_animate() {
  set_has_animate();
  if (animate_ == &::google::protobuf::internal::kEmptyString) {
    animate_ = new ::std::string;
  }
  return animate_;
}
inline ::std::string* SkeletonAnimsConfig::release_animate() {
  clear_has_animate();
  if (animate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = animate_;
    animate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SkeletonAnimsConfig::set_allocated_animate(::std::string* animate) {
  if (animate_ != &::google::protobuf::internal::kEmptyString) {
    delete animate_;
  }
  if (animate) {
    set_has_animate();
    animate_ = animate;
  } else {
    clear_has_animate();
    animate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 id = 1;
inline bool SkeletonAnimsConfig::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkeletonAnimsConfig::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkeletonAnimsConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkeletonAnimsConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SkeletonAnimsConfig::id() const {
  return id_;
}
inline void SkeletonAnimsConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 duration = 8;
inline bool SkeletonAnimsConfig::has_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkeletonAnimsConfig::set_has_duration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkeletonAnimsConfig::clear_has_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkeletonAnimsConfig::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 SkeletonAnimsConfig::duration() const {
  return duration_;
}
inline void SkeletonAnimsConfig::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
}

// optional string folder = 2;
inline bool SkeletonAnimsConfig::has_folder() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SkeletonAnimsConfig::set_has_folder() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SkeletonAnimsConfig::clear_has_folder() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SkeletonAnimsConfig::clear_folder() {
  if (folder_ != &::google::protobuf::internal::kEmptyString) {
    folder_->clear();
  }
  clear_has_folder();
}
inline const ::std::string& SkeletonAnimsConfig::folder() const {
  return *folder_;
}
inline void SkeletonAnimsConfig::set_folder(const ::std::string& value) {
  set_has_folder();
  if (folder_ == &::google::protobuf::internal::kEmptyString) {
    folder_ = new ::std::string;
  }
  folder_->assign(value);
}
inline void SkeletonAnimsConfig::set_folder(const char* value) {
  set_has_folder();
  if (folder_ == &::google::protobuf::internal::kEmptyString) {
    folder_ = new ::std::string;
  }
  folder_->assign(value);
}
inline void SkeletonAnimsConfig::set_folder(const char* value, size_t size) {
  set_has_folder();
  if (folder_ == &::google::protobuf::internal::kEmptyString) {
    folder_ = new ::std::string;
  }
  folder_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SkeletonAnimsConfig::mutable_folder() {
  set_has_folder();
  if (folder_ == &::google::protobuf::internal::kEmptyString) {
    folder_ = new ::std::string;
  }
  return folder_;
}
inline ::std::string* SkeletonAnimsConfig::release_folder() {
  clear_has_folder();
  if (folder_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = folder_;
    folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SkeletonAnimsConfig::set_allocated_folder(::std::string* folder) {
  if (folder_ != &::google::protobuf::internal::kEmptyString) {
    delete folder_;
  }
  if (folder) {
    set_has_folder();
    folder_ = folder;
  } else {
    clear_has_folder();
    folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 3;
inline bool SkeletonAnimsConfig::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SkeletonAnimsConfig::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SkeletonAnimsConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SkeletonAnimsConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SkeletonAnimsConfig::name() const {
  return *name_;
}
inline void SkeletonAnimsConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SkeletonAnimsConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SkeletonAnimsConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SkeletonAnimsConfig::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SkeletonAnimsConfig::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SkeletonAnimsConfig::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string armature = 4;
inline bool SkeletonAnimsConfig::has_armature() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SkeletonAnimsConfig::set_has_armature() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SkeletonAnimsConfig::clear_has_armature() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SkeletonAnimsConfig::clear_armature() {
  if (armature_ != &::google::protobuf::internal::kEmptyString) {
    armature_->clear();
  }
  clear_has_armature();
}
inline const ::std::string& SkeletonAnimsConfig::armature() const {
  return *armature_;
}
inline void SkeletonAnimsConfig::set_armature(const ::std::string& value) {
  set_has_armature();
  if (armature_ == &::google::protobuf::internal::kEmptyString) {
    armature_ = new ::std::string;
  }
  armature_->assign(value);
}
inline void SkeletonAnimsConfig::set_armature(const char* value) {
  set_has_armature();
  if (armature_ == &::google::protobuf::internal::kEmptyString) {
    armature_ = new ::std::string;
  }
  armature_->assign(value);
}
inline void SkeletonAnimsConfig::set_armature(const char* value, size_t size) {
  set_has_armature();
  if (armature_ == &::google::protobuf::internal::kEmptyString) {
    armature_ = new ::std::string;
  }
  armature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SkeletonAnimsConfig::mutable_armature() {
  set_has_armature();
  if (armature_ == &::google::protobuf::internal::kEmptyString) {
    armature_ = new ::std::string;
  }
  return armature_;
}
inline ::std::string* SkeletonAnimsConfig::release_armature() {
  clear_has_armature();
  if (armature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = armature_;
    armature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SkeletonAnimsConfig::set_allocated_armature(::std::string* armature) {
  if (armature_ != &::google::protobuf::internal::kEmptyString) {
    delete armature_;
  }
  if (armature) {
    set_has_armature();
    armature_ = armature;
  } else {
    clear_has_armature();
    armature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 offsetx = 6;
inline bool SkeletonAnimsConfig::has_offsetx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SkeletonAnimsConfig::set_has_offsetx() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SkeletonAnimsConfig::clear_has_offsetx() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SkeletonAnimsConfig::clear_offsetx() {
  offsetx_ = 0;
  clear_has_offsetx();
}
inline ::google::protobuf::int32 SkeletonAnimsConfig::offsetx() const {
  return offsetx_;
}
inline void SkeletonAnimsConfig::set_offsetx(::google::protobuf::int32 value) {
  set_has_offsetx();
  offsetx_ = value;
}

// optional int32 offsety = 7;
inline bool SkeletonAnimsConfig::has_offsety() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SkeletonAnimsConfig::set_has_offsety() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SkeletonAnimsConfig::clear_has_offsety() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SkeletonAnimsConfig::clear_offsety() {
  offsety_ = 0;
  clear_has_offsety();
}
inline ::google::protobuf::int32 SkeletonAnimsConfig::offsety() const {
  return offsety_;
}
inline void SkeletonAnimsConfig::set_offsety(::google::protobuf::int32 value) {
  set_has_offsety();
  offsety_ = value;
}

// optional int32 size = 9;
inline bool SkeletonAnimsConfig::has_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SkeletonAnimsConfig::set_has_size() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SkeletonAnimsConfig::clear_has_size() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SkeletonAnimsConfig::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 SkeletonAnimsConfig::size() const {
  return size_;
}
inline void SkeletonAnimsConfig::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SkeletonAnimsConfig_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ItemConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ItemConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* ItemConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ItemConfig_2eproto() {
  protobuf_AddDesc_ItemConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ItemConfig.proto");
  GOOGLE_CHECK(file != NULL);
  ItemConfig_descriptor_ = file->message_type(0);
  static const int ItemConfig_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, item_seqence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, upgrade_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, skill_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, item_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, require_bag_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, tips_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, currency_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, item_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, item_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, upgrade_currency_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, require_card_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, card_drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, item_resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, upgrade_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, sell_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, notice_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, rare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, drop_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, require_equip_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, required_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, item_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, stack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, sell_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, item_unit_id_),
  };
  ItemConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemConfig_descriptor_,
      ItemConfig::default_instance_,
      ItemConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ItemConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemConfig_descriptor_, &ItemConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ItemConfig_2eproto() {
  delete ItemConfig::default_instance_;
  delete ItemConfig_reflection_;
}

void protobuf_AddDesc_ItemConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020ItemConfig.proto\022\022DianShiTech.Config\032\025"
    "ConfigTypeGroup.proto\"\352\004\n\nItemConfig\022\024\n\014"
    "item_seqence\030\003 \001(\005\022\014\n\004cost\030\017 \001(\005\022\023\n\013upgr"
    "ade_exp\030\031 \001(\005\022\022\n\nskill_cost\030\030 \001(\005\022\021\n\tite"
    "m_desc\030\t \001(\t\022\030\n\020require_bag_slot\030\020 \001(\005\022\021"
    "\n\ttips_desc\030\013 \001(\t\022\025\n\rcurrency_type\030\026 \001(\005"
    "\022\021\n\titem_type\030\002 \001(\005\022\020\n\010item_use\030\016 \001(\005\022\035\n"
    "\025upgrade_currency_type\030\032 \001(\005\022\017\n\007quality\030"
    "\005 \001(\005\022\031\n\021require_card_slot\030\021 \001(\005\0226\n\tcard"
    "_drop\030\035 \003(\0132#.DianShiTech.Config.ConfigT"
    "ypeGroup\022\025\n\ritem_resource\030\010 \001(\005\022\024\n\014upgra"
    "de_cost\030\033 \001(\005\022\n\n\002id\030\001 \001(\005\022\022\n\nsell_price\030"
    "\027 \001(\005\022\023\n\013notice_type\030\004 \001(\005\022\014\n\004rare\030\r \001(\005"
    "\022\r\n\005bonus\030\024 \003(\005\022\021\n\tdrop_data\030\023 \003(\005\022\032\n\022re"
    "quire_equip_slot\030\022 \001(\005\022\026\n\016required_level"
    "\030\034 \001(\005\022\021\n\titem_name\030\006 \001(\t\022\r\n\005stack\030\025 \001(\005"
    "\022\022\n\nsell_state\030\007 \001(\005\022\024\n\014item_unit_id\030\n \001"
    "(\005", 682);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ItemConfig.proto", &protobuf_RegisterTypes);
  ItemConfig::default_instance_ = new ItemConfig();
  ItemConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ItemConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ItemConfig_2eproto {
  StaticDescriptorInitializer_ItemConfig_2eproto() {
    protobuf_AddDesc_ItemConfig_2eproto();
  }
} static_descriptor_initializer_ItemConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ItemConfig::kItemSeqenceFieldNumber;
const int ItemConfig::kCostFieldNumber;
const int ItemConfig::kUpgradeExpFieldNumber;
const int ItemConfig::kSkillCostFieldNumber;
const int ItemConfig::kItemDescFieldNumber;
const int ItemConfig::kRequireBagSlotFieldNumber;
const int ItemConfig::kTipsDescFieldNumber;
const int ItemConfig::kCurrencyTypeFieldNumber;
const int ItemConfig::kItemTypeFieldNumber;
const int ItemConfig::kItemUseFieldNumber;
const int ItemConfig::kUpgradeCurrencyTypeFieldNumber;
const int ItemConfig::kQualityFieldNumber;
const int ItemConfig::kRequireCardSlotFieldNumber;
const int ItemConfig::kCardDropFieldNumber;
const int ItemConfig::kItemResourceFieldNumber;
const int ItemConfig::kUpgradeCostFieldNumber;
const int ItemConfig::kIdFieldNumber;
const int ItemConfig::kSellPriceFieldNumber;
const int ItemConfig::kNoticeTypeFieldNumber;
const int ItemConfig::kRareFieldNumber;
const int ItemConfig::kBonusFieldNumber;
const int ItemConfig::kDropDataFieldNumber;
const int ItemConfig::kRequireEquipSlotFieldNumber;
const int ItemConfig::kRequiredLevelFieldNumber;
const int ItemConfig::kItemNameFieldNumber;
const int ItemConfig::kStackFieldNumber;
const int ItemConfig::kSellStateFieldNumber;
const int ItemConfig::kItemUnitIdFieldNumber;
#endif  // !_MSC_VER

ItemConfig::ItemConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemConfig::InitAsDefaultInstance() {
}

ItemConfig::ItemConfig(const ItemConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemConfig::SharedCtor() {
  _cached_size_ = 0;
  item_seqence_ = 0;
  cost_ = 0;
  upgrade_exp_ = 0;
  skill_cost_ = 0;
  item_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  require_bag_slot_ = 0;
  tips_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  currency_type_ = 0;
  item_type_ = 0;
  item_use_ = 0;
  upgrade_currency_type_ = 0;
  quality_ = 0;
  require_card_slot_ = 0;
  item_resource_ = 0;
  upgrade_cost_ = 0;
  id_ = 0;
  sell_price_ = 0;
  notice_type_ = 0;
  rare_ = 0;
  require_equip_slot_ = 0;
  required_level_ = 0;
  item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stack_ = 0;
  sell_state_ = 0;
  item_unit_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemConfig::~ItemConfig() {
  SharedDtor();
}

void ItemConfig::SharedDtor() {
  if (item_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete item_desc_;
  }
  if (tips_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete tips_desc_;
  }
  if (item_name_ != &::google::protobuf::internal::kEmptyString) {
    delete item_name_;
  }
  if (this != default_instance_) {
  }
}

void ItemConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemConfig_descriptor_;
}

const ItemConfig& ItemConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemConfig_2eproto();
  return *default_instance_;
}

ItemConfig* ItemConfig::default_instance_ = NULL;

ItemConfig* ItemConfig::New() const {
  return new ItemConfig;
}

void ItemConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_seqence_ = 0;
    cost_ = 0;
    upgrade_exp_ = 0;
    skill_cost_ = 0;
    if (has_item_desc()) {
      if (item_desc_ != &::google::protobuf::internal::kEmptyString) {
        item_desc_->clear();
      }
    }
    require_bag_slot_ = 0;
    if (has_tips_desc()) {
      if (tips_desc_ != &::google::protobuf::internal::kEmptyString) {
        tips_desc_->clear();
      }
    }
    currency_type_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    item_type_ = 0;
    item_use_ = 0;
    upgrade_currency_type_ = 0;
    quality_ = 0;
    require_card_slot_ = 0;
    item_resource_ = 0;
    upgrade_cost_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    id_ = 0;
    sell_price_ = 0;
    notice_type_ = 0;
    rare_ = 0;
    require_equip_slot_ = 0;
    required_level_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_item_name()) {
      if (item_name_ != &::google::protobuf::internal::kEmptyString) {
        item_name_->clear();
      }
    }
    stack_ = 0;
    sell_state_ = 0;
    item_unit_id_ = 0;
  }
  card_drop_.Clear();
  bonus_.Clear();
  drop_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_type;
        break;
      }

      // optional int32 item_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_type_)));
          set_has_item_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_seqence;
        break;
      }

      // optional int32 item_seqence = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_seqence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_seqence_)));
          set_has_item_seqence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_notice_type;
        break;
      }

      // optional int32 notice_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notice_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notice_type_)));
          set_has_notice_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_quality;
        break;
      }

      // optional int32 quality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_item_name;
        break;
      }

      // optional string item_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->item_name().data(), this->item_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sell_state;
        break;
      }

      // optional int32 sell_state = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sell_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sell_state_)));
          set_has_sell_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_item_resource;
        break;
      }

      // optional int32 item_resource = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_resource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_resource_)));
          set_has_item_resource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_item_desc;
        break;
      }

      // optional string item_desc = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->item_desc().data(), this->item_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_item_unit_id;
        break;
      }

      // optional int32 item_unit_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_unit_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_unit_id_)));
          set_has_item_unit_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_tips_desc;
        break;
      }

      // optional string tips_desc = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tips_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tips_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tips_desc().data(), this->tips_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_rare;
        break;
      }

      // optional int32 rare = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rare:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rare_)));
          set_has_rare();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_item_use;
        break;
      }

      // optional int32 item_use = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_use:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_use_)));
          set_has_item_use();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_cost;
        break;
      }

      // optional int32 cost = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_require_bag_slot;
        break;
      }

      // optional int32 require_bag_slot = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_require_bag_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &require_bag_slot_)));
          set_has_require_bag_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_require_card_slot;
        break;
      }

      // optional int32 require_card_slot = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_require_card_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &require_card_slot_)));
          set_has_require_card_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_require_equip_slot;
        break;
      }

      // optional int32 require_equip_slot = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_require_equip_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &require_equip_slot_)));
          set_has_require_equip_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_drop_data;
        break;
      }

      // repeated int32 drop_data = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_drop_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_drop_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_drop_data;
        if (input->ExpectTag(160)) goto parse_bonus;
        break;
      }

      // repeated int32 bonus = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 160, input, this->mutable_bonus())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bonus())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_bonus;
        if (input->ExpectTag(168)) goto parse_stack;
        break;
      }

      // optional int32 stack = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stack_)));
          set_has_stack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_currency_type;
        break;
      }

      // optional int32 currency_type = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currency_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_type_)));
          set_has_currency_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_sell_price;
        break;
      }

      // optional int32 sell_price = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sell_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sell_price_)));
          set_has_sell_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_skill_cost;
        break;
      }

      // optional int32 skill_cost = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_cost_)));
          set_has_skill_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_upgrade_exp;
        break;
      }

      // optional int32 upgrade_exp = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_exp_)));
          set_has_upgrade_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_upgrade_currency_type;
        break;
      }

      // optional int32 upgrade_currency_type = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_currency_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_currency_type_)));
          set_has_upgrade_currency_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_upgrade_cost;
        break;
      }

      // optional int32 upgrade_cost = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_cost_)));
          set_has_upgrade_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_required_level;
        break;
      }

      // optional int32 required_level = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_required_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &required_level_)));
          set_has_required_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_card_drop;
        break;
      }

      // repeated .DianShiTech.Config.ConfigTypeGroup card_drop = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_drop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_drop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_card_drop;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 item_type = 2;
  if (has_item_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_type(), output);
  }

  // optional int32 item_seqence = 3;
  if (has_item_seqence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_seqence(), output);
  }

  // optional int32 notice_type = 4;
  if (has_notice_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->notice_type(), output);
  }

  // optional int32 quality = 5;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->quality(), output);
  }

  // optional string item_name = 6;
  if (has_item_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item_name().data(), this->item_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->item_name(), output);
  }

  // optional int32 sell_state = 7;
  if (has_sell_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sell_state(), output);
  }

  // optional int32 item_resource = 8;
  if (has_item_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->item_resource(), output);
  }

  // optional string item_desc = 9;
  if (has_item_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item_desc().data(), this->item_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->item_desc(), output);
  }

  // optional int32 item_unit_id = 10;
  if (has_item_unit_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->item_unit_id(), output);
  }

  // optional string tips_desc = 11;
  if (has_tips_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tips_desc().data(), this->tips_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->tips_desc(), output);
  }

  // optional int32 rare = 13;
  if (has_rare()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->rare(), output);
  }

  // optional int32 item_use = 14;
  if (has_item_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->item_use(), output);
  }

  // optional int32 cost = 15;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->cost(), output);
  }

  // optional int32 require_bag_slot = 16;
  if (has_require_bag_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->require_bag_slot(), output);
  }

  // optional int32 require_card_slot = 17;
  if (has_require_card_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->require_card_slot(), output);
  }

  // optional int32 require_equip_slot = 18;
  if (has_require_equip_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->require_equip_slot(), output);
  }

  // repeated int32 drop_data = 19;
  for (int i = 0; i < this->drop_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->drop_data(i), output);
  }

  // repeated int32 bonus = 20;
  for (int i = 0; i < this->bonus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      20, this->bonus(i), output);
  }

  // optional int32 stack = 21;
  if (has_stack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->stack(), output);
  }

  // optional int32 currency_type = 22;
  if (has_currency_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->currency_type(), output);
  }

  // optional int32 sell_price = 23;
  if (has_sell_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->sell_price(), output);
  }

  // optional int32 skill_cost = 24;
  if (has_skill_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->skill_cost(), output);
  }

  // optional int32 upgrade_exp = 25;
  if (has_upgrade_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->upgrade_exp(), output);
  }

  // optional int32 upgrade_currency_type = 26;
  if (has_upgrade_currency_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->upgrade_currency_type(), output);
  }

  // optional int32 upgrade_cost = 27;
  if (has_upgrade_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->upgrade_cost(), output);
  }

  // optional int32 required_level = 28;
  if (has_required_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->required_level(), output);
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup card_drop = 29;
  for (int i = 0; i < this->card_drop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->card_drop(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 item_type = 2;
  if (has_item_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_type(), target);
  }

  // optional int32 item_seqence = 3;
  if (has_item_seqence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_seqence(), target);
  }

  // optional int32 notice_type = 4;
  if (has_notice_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->notice_type(), target);
  }

  // optional int32 quality = 5;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->quality(), target);
  }

  // optional string item_name = 6;
  if (has_item_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item_name().data(), this->item_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->item_name(), target);
  }

  // optional int32 sell_state = 7;
  if (has_sell_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sell_state(), target);
  }

  // optional int32 item_resource = 8;
  if (has_item_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->item_resource(), target);
  }

  // optional string item_desc = 9;
  if (has_item_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item_desc().data(), this->item_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->item_desc(), target);
  }

  // optional int32 item_unit_id = 10;
  if (has_item_unit_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->item_unit_id(), target);
  }

  // optional string tips_desc = 11;
  if (has_tips_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tips_desc().data(), this->tips_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->tips_desc(), target);
  }

  // optional int32 rare = 13;
  if (has_rare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->rare(), target);
  }

  // optional int32 item_use = 14;
  if (has_item_use()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->item_use(), target);
  }

  // optional int32 cost = 15;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->cost(), target);
  }

  // optional int32 require_bag_slot = 16;
  if (has_require_bag_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->require_bag_slot(), target);
  }

  // optional int32 require_card_slot = 17;
  if (has_require_card_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->require_card_slot(), target);
  }

  // optional int32 require_equip_slot = 18;
  if (has_require_equip_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->require_equip_slot(), target);
  }

  // repeated int32 drop_data = 19;
  for (int i = 0; i < this->drop_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->drop_data(i), target);
  }

  // repeated int32 bonus = 20;
  for (int i = 0; i < this->bonus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(20, this->bonus(i), target);
  }

  // optional int32 stack = 21;
  if (has_stack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->stack(), target);
  }

  // optional int32 currency_type = 22;
  if (has_currency_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->currency_type(), target);
  }

  // optional int32 sell_price = 23;
  if (has_sell_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->sell_price(), target);
  }

  // optional int32 skill_cost = 24;
  if (has_skill_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->skill_cost(), target);
  }

  // optional int32 upgrade_exp = 25;
  if (has_upgrade_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->upgrade_exp(), target);
  }

  // optional int32 upgrade_currency_type = 26;
  if (has_upgrade_currency_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->upgrade_currency_type(), target);
  }

  // optional int32 upgrade_cost = 27;
  if (has_upgrade_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->upgrade_cost(), target);
  }

  // optional int32 required_level = 28;
  if (has_required_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->required_level(), target);
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup card_drop = 29;
  for (int i = 0; i < this->card_drop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->card_drop(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_seqence = 3;
    if (has_item_seqence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_seqence());
    }

    // optional int32 cost = 15;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost());
    }

    // optional int32 upgrade_exp = 25;
    if (has_upgrade_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_exp());
    }

    // optional int32 skill_cost = 24;
    if (has_skill_cost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_cost());
    }

    // optional string item_desc = 9;
    if (has_item_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_desc());
    }

    // optional int32 require_bag_slot = 16;
    if (has_require_bag_slot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->require_bag_slot());
    }

    // optional string tips_desc = 11;
    if (has_tips_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tips_desc());
    }

    // optional int32 currency_type = 22;
    if (has_currency_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 item_type = 2;
    if (has_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_type());
    }

    // optional int32 item_use = 14;
    if (has_item_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_use());
    }

    // optional int32 upgrade_currency_type = 26;
    if (has_upgrade_currency_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_currency_type());
    }

    // optional int32 quality = 5;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 require_card_slot = 17;
    if (has_require_card_slot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->require_card_slot());
    }

    // optional int32 item_resource = 8;
    if (has_item_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_resource());
    }

    // optional int32 upgrade_cost = 27;
    if (has_upgrade_cost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_cost());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 sell_price = 23;
    if (has_sell_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sell_price());
    }

    // optional int32 notice_type = 4;
    if (has_notice_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->notice_type());
    }

    // optional int32 rare = 13;
    if (has_rare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rare());
    }

    // optional int32 require_equip_slot = 18;
    if (has_require_equip_slot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->require_equip_slot());
    }

    // optional int32 required_level = 28;
    if (has_required_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->required_level());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string item_name = 6;
    if (has_item_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_name());
    }

    // optional int32 stack = 21;
    if (has_stack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stack());
    }

    // optional int32 sell_state = 7;
    if (has_sell_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sell_state());
    }

    // optional int32 item_unit_id = 10;
    if (has_item_unit_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_unit_id());
    }

  }
  // repeated .DianShiTech.Config.ConfigTypeGroup card_drop = 29;
  total_size += 2 * this->card_drop_size();
  for (int i = 0; i < this->card_drop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_drop(i));
  }

  // repeated int32 bonus = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->bonus_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bonus(i));
    }
    total_size += 2 * this->bonus_size() + data_size;
  }

  // repeated int32 drop_data = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->drop_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->drop_data(i));
    }
    total_size += 2 * this->drop_data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemConfig::MergeFrom(const ItemConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_drop_.MergeFrom(from.card_drop_);
  bonus_.MergeFrom(from.bonus_);
  drop_data_.MergeFrom(from.drop_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_seqence()) {
      set_item_seqence(from.item_seqence());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_upgrade_exp()) {
      set_upgrade_exp(from.upgrade_exp());
    }
    if (from.has_skill_cost()) {
      set_skill_cost(from.skill_cost());
    }
    if (from.has_item_desc()) {
      set_item_desc(from.item_desc());
    }
    if (from.has_require_bag_slot()) {
      set_require_bag_slot(from.require_bag_slot());
    }
    if (from.has_tips_desc()) {
      set_tips_desc(from.tips_desc());
    }
    if (from.has_currency_type()) {
      set_currency_type(from.currency_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_item_type()) {
      set_item_type(from.item_type());
    }
    if (from.has_item_use()) {
      set_item_use(from.item_use());
    }
    if (from.has_upgrade_currency_type()) {
      set_upgrade_currency_type(from.upgrade_currency_type());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_require_card_slot()) {
      set_require_card_slot(from.require_card_slot());
    }
    if (from.has_item_resource()) {
      set_item_resource(from.item_resource());
    }
    if (from.has_upgrade_cost()) {
      set_upgrade_cost(from.upgrade_cost());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sell_price()) {
      set_sell_price(from.sell_price());
    }
    if (from.has_notice_type()) {
      set_notice_type(from.notice_type());
    }
    if (from.has_rare()) {
      set_rare(from.rare());
    }
    if (from.has_require_equip_slot()) {
      set_require_equip_slot(from.require_equip_slot());
    }
    if (from.has_required_level()) {
      set_required_level(from.required_level());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_item_name()) {
      set_item_name(from.item_name());
    }
    if (from.has_stack()) {
      set_stack(from.stack());
    }
    if (from.has_sell_state()) {
      set_sell_state(from.sell_state());
    }
    if (from.has_item_unit_id()) {
      set_item_unit_id(from.item_unit_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemConfig::CopyFrom(const ItemConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemConfig::IsInitialized() const {

  return true;
}

void ItemConfig::Swap(ItemConfig* other) {
  if (other != this) {
    std::swap(item_seqence_, other->item_seqence_);
    std::swap(cost_, other->cost_);
    std::swap(upgrade_exp_, other->upgrade_exp_);
    std::swap(skill_cost_, other->skill_cost_);
    std::swap(item_desc_, other->item_desc_);
    std::swap(require_bag_slot_, other->require_bag_slot_);
    std::swap(tips_desc_, other->tips_desc_);
    std::swap(currency_type_, other->currency_type_);
    std::swap(item_type_, other->item_type_);
    std::swap(item_use_, other->item_use_);
    std::swap(upgrade_currency_type_, other->upgrade_currency_type_);
    std::swap(quality_, other->quality_);
    std::swap(require_card_slot_, other->require_card_slot_);
    card_drop_.Swap(&other->card_drop_);
    std::swap(item_resource_, other->item_resource_);
    std::swap(upgrade_cost_, other->upgrade_cost_);
    std::swap(id_, other->id_);
    std::swap(sell_price_, other->sell_price_);
    std::swap(notice_type_, other->notice_type_);
    std::swap(rare_, other->rare_);
    bonus_.Swap(&other->bonus_);
    drop_data_.Swap(&other->drop_data_);
    std::swap(require_equip_slot_, other->require_equip_slot_);
    std::swap(required_level_, other->required_level_);
    std::swap(item_name_, other->item_name_);
    std::swap(stack_, other->stack_);
    std::swap(sell_state_, other->sell_state_);
    std::swap(item_unit_id_, other->item_unit_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemConfig_descriptor_;
  metadata.reflection = ItemConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

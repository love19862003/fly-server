// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BossInitDataConfig.proto

#ifndef PROTOBUF_BossInitDataConfig_2eproto__INCLUDED
#define PROTOBUF_BossInitDataConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BossInitDataConfig_2eproto();
void protobuf_AssignDesc_BossInitDataConfig_2eproto();
void protobuf_ShutdownFile_BossInitDataConfig_2eproto();

class BossInitDataConfig;

// ===================================================================

class BossInitDataConfig : public ::google::protobuf::Message {
 public:
  BossInitDataConfig();
  virtual ~BossInitDataConfig();

  BossInitDataConfig(const BossInitDataConfig& from);

  inline BossInitDataConfig& operator=(const BossInitDataConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BossInitDataConfig& default_instance();

  void Swap(BossInitDataConfig* other);

  // implements Message ----------------------------------------------

  BossInitDataConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossInitDataConfig& from);
  void MergeFrom(const BossInitDataConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 skill = 4;
  inline bool has_skill() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 4;
  inline ::google::protobuf::int32 skill() const;
  inline void set_skill(::google::protobuf::int32 value);

  // optional int32 open_date = 13;
  inline bool has_open_date() const;
  inline void clear_open_date();
  static const int kOpenDateFieldNumber = 13;
  inline ::google::protobuf::int32 open_date() const;
  inline void set_open_date(::google::protobuf::int32 value);

  // optional int32 close_time = 17;
  inline bool has_close_time() const;
  inline void clear_close_time();
  static const int kCloseTimeFieldNumber = 17;
  inline ::google::protobuf::int32 close_time() const;
  inline void set_close_time(::google::protobuf::int32 value);

  // optional int32 max_player = 7;
  inline bool has_max_player() const;
  inline void clear_max_player();
  static const int kMaxPlayerFieldNumber = 7;
  inline ::google::protobuf::int32 max_player() const;
  inline void set_max_player(::google::protobuf::int32 value);

  // optional int32 common_skill = 3;
  inline bool has_common_skill() const;
  inline void clear_common_skill();
  static const int kCommonSkillFieldNumber = 3;
  inline ::google::protobuf::int32 common_skill() const;
  inline void set_common_skill(::google::protobuf::int32 value);

  // repeated int32 week_date = 15;
  inline int week_date_size() const;
  inline void clear_week_date();
  static const int kWeekDateFieldNumber = 15;
  inline ::google::protobuf::int32 week_date(int index) const;
  inline void set_week_date(int index, ::google::protobuf::int32 value);
  inline void add_week_date(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      week_date() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_week_date();

  // optional int32 revive_time = 5;
  inline bool has_revive_time() const;
  inline void clear_revive_time();
  static const int kReviveTimeFieldNumber = 5;
  inline ::google::protobuf::int32 revive_time() const;
  inline void set_revive_time(::google::protobuf::int32 value);

  // optional int32 open_time = 16;
  inline bool has_open_time() const;
  inline void clear_open_time();
  static const int kOpenTimeFieldNumber = 16;
  inline ::google::protobuf::int32 open_time() const;
  inline void set_open_time(::google::protobuf::int32 value);

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 level = 18;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 18;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 boss_name = 12;
  inline bool has_boss_name() const;
  inline void clear_boss_name();
  static const int kBossNameFieldNumber = 12;
  inline ::google::protobuf::int32 boss_name() const;
  inline void set_boss_name(::google::protobuf::int32 value);

  // optional int32 close_date = 14;
  inline bool has_close_date() const;
  inline void clear_close_date();
  static const int kCloseDateFieldNumber = 14;
  inline ::google::protobuf::int32 close_date() const;
  inline void set_close_date(::google::protobuf::int32 value);

  // optional int32 head_pic = 10;
  inline bool has_head_pic() const;
  inline void clear_head_pic();
  static const int kHeadPicFieldNumber = 10;
  inline ::google::protobuf::int32 head_pic() const;
  inline void set_head_pic(::google::protobuf::int32 value);

  // optional string event_name = 9;
  inline bool has_event_name() const;
  inline void clear_event_name();
  static const int kEventNameFieldNumber = 9;
  inline const ::std::string& event_name() const;
  inline void set_event_name(const ::std::string& value);
  inline void set_event_name(const char* value);
  inline void set_event_name(const char* value, size_t size);
  inline ::std::string* mutable_event_name();
  inline ::std::string* release_event_name();
  inline void set_allocated_event_name(::std::string* event_name);

  // optional int32 atk_time = 6;
  inline bool has_atk_time() const;
  inline void clear_atk_time();
  static const int kAtkTimeFieldNumber = 6;
  inline ::google::protobuf::int32 atk_time() const;
  inline void set_atk_time(::google::protobuf::int32 value);

  // optional int32 unit_pic = 11;
  inline bool has_unit_pic() const;
  inline void clear_unit_pic();
  static const int kUnitPicFieldNumber = 11;
  inline ::google::protobuf::int32 unit_pic() const;
  inline void set_unit_pic(::google::protobuf::int32 value);

  // optional int32 stage = 2;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 2;
  inline ::google::protobuf::int32 stage() const;
  inline void set_stage(::google::protobuf::int32 value);

  // optional int32 min_player = 8;
  inline bool has_min_player() const;
  inline void clear_min_player();
  static const int kMinPlayerFieldNumber = 8;
  inline ::google::protobuf::int32 min_player() const;
  inline void set_min_player(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DianShiTech.Config.BossInitDataConfig)
 private:
  inline void set_has_skill();
  inline void clear_has_skill();
  inline void set_has_open_date();
  inline void clear_has_open_date();
  inline void set_has_close_time();
  inline void clear_has_close_time();
  inline void set_has_max_player();
  inline void clear_has_max_player();
  inline void set_has_common_skill();
  inline void clear_has_common_skill();
  inline void set_has_revive_time();
  inline void clear_has_revive_time();
  inline void set_has_open_time();
  inline void clear_has_open_time();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_boss_name();
  inline void clear_has_boss_name();
  inline void set_has_close_date();
  inline void clear_has_close_date();
  inline void set_has_head_pic();
  inline void clear_has_head_pic();
  inline void set_has_event_name();
  inline void clear_has_event_name();
  inline void set_has_atk_time();
  inline void clear_has_atk_time();
  inline void set_has_unit_pic();
  inline void clear_has_unit_pic();
  inline void set_has_stage();
  inline void clear_has_stage();
  inline void set_has_min_player();
  inline void clear_has_min_player();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 skill_;
  ::google::protobuf::int32 open_date_;
  ::google::protobuf::int32 close_time_;
  ::google::protobuf::int32 max_player_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > week_date_;
  ::google::protobuf::int32 common_skill_;
  ::google::protobuf::int32 revive_time_;
  ::google::protobuf::int32 open_time_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 boss_name_;
  ::google::protobuf::int32 close_date_;
  ::google::protobuf::int32 head_pic_;
  ::std::string* event_name_;
  ::google::protobuf::int32 atk_time_;
  ::google::protobuf::int32 unit_pic_;
  ::google::protobuf::int32 stage_;
  ::google::protobuf::int32 min_player_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_BossInitDataConfig_2eproto();
  friend void protobuf_AssignDesc_BossInitDataConfig_2eproto();
  friend void protobuf_ShutdownFile_BossInitDataConfig_2eproto();

  void InitAsDefaultInstance();
  static BossInitDataConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// BossInitDataConfig

// optional int32 skill = 4;
inline bool BossInitDataConfig::has_skill() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossInitDataConfig::set_has_skill() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BossInitDataConfig::clear_has_skill() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BossInitDataConfig::clear_skill() {
  skill_ = 0;
  clear_has_skill();
}
inline ::google::protobuf::int32 BossInitDataConfig::skill() const {
  return skill_;
}
inline void BossInitDataConfig::set_skill(::google::protobuf::int32 value) {
  set_has_skill();
  skill_ = value;
}

// optional int32 open_date = 13;
inline bool BossInitDataConfig::has_open_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BossInitDataConfig::set_has_open_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BossInitDataConfig::clear_has_open_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BossInitDataConfig::clear_open_date() {
  open_date_ = 0;
  clear_has_open_date();
}
inline ::google::protobuf::int32 BossInitDataConfig::open_date() const {
  return open_date_;
}
inline void BossInitDataConfig::set_open_date(::google::protobuf::int32 value) {
  set_has_open_date();
  open_date_ = value;
}

// optional int32 close_time = 17;
inline bool BossInitDataConfig::has_close_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BossInitDataConfig::set_has_close_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BossInitDataConfig::clear_has_close_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BossInitDataConfig::clear_close_time() {
  close_time_ = 0;
  clear_has_close_time();
}
inline ::google::protobuf::int32 BossInitDataConfig::close_time() const {
  return close_time_;
}
inline void BossInitDataConfig::set_close_time(::google::protobuf::int32 value) {
  set_has_close_time();
  close_time_ = value;
}

// optional int32 max_player = 7;
inline bool BossInitDataConfig::has_max_player() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BossInitDataConfig::set_has_max_player() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BossInitDataConfig::clear_has_max_player() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BossInitDataConfig::clear_max_player() {
  max_player_ = 0;
  clear_has_max_player();
}
inline ::google::protobuf::int32 BossInitDataConfig::max_player() const {
  return max_player_;
}
inline void BossInitDataConfig::set_max_player(::google::protobuf::int32 value) {
  set_has_max_player();
  max_player_ = value;
}

// optional int32 common_skill = 3;
inline bool BossInitDataConfig::has_common_skill() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BossInitDataConfig::set_has_common_skill() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BossInitDataConfig::clear_has_common_skill() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BossInitDataConfig::clear_common_skill() {
  common_skill_ = 0;
  clear_has_common_skill();
}
inline ::google::protobuf::int32 BossInitDataConfig::common_skill() const {
  return common_skill_;
}
inline void BossInitDataConfig::set_common_skill(::google::protobuf::int32 value) {
  set_has_common_skill();
  common_skill_ = value;
}

// repeated int32 week_date = 15;
inline int BossInitDataConfig::week_date_size() const {
  return week_date_.size();
}
inline void BossInitDataConfig::clear_week_date() {
  week_date_.Clear();
}
inline ::google::protobuf::int32 BossInitDataConfig::week_date(int index) const {
  return week_date_.Get(index);
}
inline void BossInitDataConfig::set_week_date(int index, ::google::protobuf::int32 value) {
  week_date_.Set(index, value);
}
inline void BossInitDataConfig::add_week_date(::google::protobuf::int32 value) {
  week_date_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BossInitDataConfig::week_date() const {
  return week_date_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BossInitDataConfig::mutable_week_date() {
  return &week_date_;
}

// optional int32 revive_time = 5;
inline bool BossInitDataConfig::has_revive_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BossInitDataConfig::set_has_revive_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BossInitDataConfig::clear_has_revive_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BossInitDataConfig::clear_revive_time() {
  revive_time_ = 0;
  clear_has_revive_time();
}
inline ::google::protobuf::int32 BossInitDataConfig::revive_time() const {
  return revive_time_;
}
inline void BossInitDataConfig::set_revive_time(::google::protobuf::int32 value) {
  set_has_revive_time();
  revive_time_ = value;
}

// optional int32 open_time = 16;
inline bool BossInitDataConfig::has_open_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BossInitDataConfig::set_has_open_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BossInitDataConfig::clear_has_open_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BossInitDataConfig::clear_open_time() {
  open_time_ = 0;
  clear_has_open_time();
}
inline ::google::protobuf::int32 BossInitDataConfig::open_time() const {
  return open_time_;
}
inline void BossInitDataConfig::set_open_time(::google::protobuf::int32 value) {
  set_has_open_time();
  open_time_ = value;
}

// optional int32 id = 1;
inline bool BossInitDataConfig::has_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BossInitDataConfig::set_has_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BossInitDataConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BossInitDataConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 BossInitDataConfig::id() const {
  return id_;
}
inline void BossInitDataConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 level = 18;
inline bool BossInitDataConfig::has_level() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BossInitDataConfig::set_has_level() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BossInitDataConfig::clear_has_level() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BossInitDataConfig::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 BossInitDataConfig::level() const {
  return level_;
}
inline void BossInitDataConfig::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 boss_name = 12;
inline bool BossInitDataConfig::has_boss_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BossInitDataConfig::set_has_boss_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BossInitDataConfig::clear_has_boss_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BossInitDataConfig::clear_boss_name() {
  boss_name_ = 0;
  clear_has_boss_name();
}
inline ::google::protobuf::int32 BossInitDataConfig::boss_name() const {
  return boss_name_;
}
inline void BossInitDataConfig::set_boss_name(::google::protobuf::int32 value) {
  set_has_boss_name();
  boss_name_ = value;
}

// optional int32 close_date = 14;
inline bool BossInitDataConfig::has_close_date() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BossInitDataConfig::set_has_close_date() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BossInitDataConfig::clear_has_close_date() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BossInitDataConfig::clear_close_date() {
  close_date_ = 0;
  clear_has_close_date();
}
inline ::google::protobuf::int32 BossInitDataConfig::close_date() const {
  return close_date_;
}
inline void BossInitDataConfig::set_close_date(::google::protobuf::int32 value) {
  set_has_close_date();
  close_date_ = value;
}

// optional int32 head_pic = 10;
inline bool BossInitDataConfig::has_head_pic() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BossInitDataConfig::set_has_head_pic() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BossInitDataConfig::clear_has_head_pic() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BossInitDataConfig::clear_head_pic() {
  head_pic_ = 0;
  clear_has_head_pic();
}
inline ::google::protobuf::int32 BossInitDataConfig::head_pic() const {
  return head_pic_;
}
inline void BossInitDataConfig::set_head_pic(::google::protobuf::int32 value) {
  set_has_head_pic();
  head_pic_ = value;
}

// optional string event_name = 9;
inline bool BossInitDataConfig::has_event_name() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BossInitDataConfig::set_has_event_name() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BossInitDataConfig::clear_has_event_name() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BossInitDataConfig::clear_event_name() {
  if (event_name_ != &::google::protobuf::internal::kEmptyString) {
    event_name_->clear();
  }
  clear_has_event_name();
}
inline const ::std::string& BossInitDataConfig::event_name() const {
  return *event_name_;
}
inline void BossInitDataConfig::set_event_name(const ::std::string& value) {
  set_has_event_name();
  if (event_name_ == &::google::protobuf::internal::kEmptyString) {
    event_name_ = new ::std::string;
  }
  event_name_->assign(value);
}
inline void BossInitDataConfig::set_event_name(const char* value) {
  set_has_event_name();
  if (event_name_ == &::google::protobuf::internal::kEmptyString) {
    event_name_ = new ::std::string;
  }
  event_name_->assign(value);
}
inline void BossInitDataConfig::set_event_name(const char* value, size_t size) {
  set_has_event_name();
  if (event_name_ == &::google::protobuf::internal::kEmptyString) {
    event_name_ = new ::std::string;
  }
  event_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BossInitDataConfig::mutable_event_name() {
  set_has_event_name();
  if (event_name_ == &::google::protobuf::internal::kEmptyString) {
    event_name_ = new ::std::string;
  }
  return event_name_;
}
inline ::std::string* BossInitDataConfig::release_event_name() {
  clear_has_event_name();
  if (event_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_name_;
    event_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BossInitDataConfig::set_allocated_event_name(::std::string* event_name) {
  if (event_name_ != &::google::protobuf::internal::kEmptyString) {
    delete event_name_;
  }
  if (event_name) {
    set_has_event_name();
    event_name_ = event_name;
  } else {
    clear_has_event_name();
    event_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 atk_time = 6;
inline bool BossInitDataConfig::has_atk_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BossInitDataConfig::set_has_atk_time() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BossInitDataConfig::clear_has_atk_time() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BossInitDataConfig::clear_atk_time() {
  atk_time_ = 0;
  clear_has_atk_time();
}
inline ::google::protobuf::int32 BossInitDataConfig::atk_time() const {
  return atk_time_;
}
inline void BossInitDataConfig::set_atk_time(::google::protobuf::int32 value) {
  set_has_atk_time();
  atk_time_ = value;
}

// optional int32 unit_pic = 11;
inline bool BossInitDataConfig::has_unit_pic() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BossInitDataConfig::set_has_unit_pic() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BossInitDataConfig::clear_has_unit_pic() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BossInitDataConfig::clear_unit_pic() {
  unit_pic_ = 0;
  clear_has_unit_pic();
}
inline ::google::protobuf::int32 BossInitDataConfig::unit_pic() const {
  return unit_pic_;
}
inline void BossInitDataConfig::set_unit_pic(::google::protobuf::int32 value) {
  set_has_unit_pic();
  unit_pic_ = value;
}

// optional int32 stage = 2;
inline bool BossInitDataConfig::has_stage() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BossInitDataConfig::set_has_stage() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BossInitDataConfig::clear_has_stage() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BossInitDataConfig::clear_stage() {
  stage_ = 0;
  clear_has_stage();
}
inline ::google::protobuf::int32 BossInitDataConfig::stage() const {
  return stage_;
}
inline void BossInitDataConfig::set_stage(::google::protobuf::int32 value) {
  set_has_stage();
  stage_ = value;
}

// optional int32 min_player = 8;
inline bool BossInitDataConfig::has_min_player() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BossInitDataConfig::set_has_min_player() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BossInitDataConfig::clear_has_min_player() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BossInitDataConfig::clear_min_player() {
  min_player_ = 0;
  clear_has_min_player();
}
inline ::google::protobuf::int32 BossInitDataConfig::min_player() const {
  return min_player_;
}
inline void BossInitDataConfig::set_min_player(::google::protobuf::int32 value) {
  set_has_min_player();
  min_player_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BossInitDataConfig_2eproto__INCLUDED

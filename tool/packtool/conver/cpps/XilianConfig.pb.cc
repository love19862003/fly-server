// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: XilianConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "XilianConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* XilianConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XilianConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_XilianConfig_2eproto() {
  protobuf_AddDesc_XilianConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "XilianConfig.proto");
  GOOGLE_CHECK(file != NULL);
  XilianConfig_descriptor_ = file->message_type(0);
  static const int XilianConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XilianConfig, equip_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XilianConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XilianConfig, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XilianConfig, lock_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XilianConfig, quality_),
  };
  XilianConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      XilianConfig_descriptor_,
      XilianConfig::default_instance_,
      XilianConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XilianConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XilianConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(XilianConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_XilianConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    XilianConfig_descriptor_, &XilianConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_XilianConfig_2eproto() {
  delete XilianConfig::default_instance_;
  delete XilianConfig_reflection_;
}

void protobuf_AddDesc_XilianConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022XilianConfig.proto\022\022DianShiTech.Config"
    "\032\025ConfigTypeGroup.proto\"\211\001\n\014XilianConfig"
    "\022\022\n\nequip_rank\030\002 \001(\005\022\n\n\002id\030\001 \001(\005\0224\n\007cons"
    "ume\030\005 \003(\0132#.DianShiTech.Config.ConfigTyp"
    "eGroup\022\022\n\nlock_count\030\004 \001(\005\022\017\n\007quality\030\003 "
    "\001(\005", 203);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "XilianConfig.proto", &protobuf_RegisterTypes);
  XilianConfig::default_instance_ = new XilianConfig();
  XilianConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_XilianConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_XilianConfig_2eproto {
  StaticDescriptorInitializer_XilianConfig_2eproto() {
    protobuf_AddDesc_XilianConfig_2eproto();
  }
} static_descriptor_initializer_XilianConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int XilianConfig::kEquipRankFieldNumber;
const int XilianConfig::kIdFieldNumber;
const int XilianConfig::kConsumeFieldNumber;
const int XilianConfig::kLockCountFieldNumber;
const int XilianConfig::kQualityFieldNumber;
#endif  // !_MSC_VER

XilianConfig::XilianConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void XilianConfig::InitAsDefaultInstance() {
}

XilianConfig::XilianConfig(const XilianConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void XilianConfig::SharedCtor() {
  _cached_size_ = 0;
  equip_rank_ = 0;
  id_ = 0;
  lock_count_ = 0;
  quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XilianConfig::~XilianConfig() {
  SharedDtor();
}

void XilianConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void XilianConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XilianConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XilianConfig_descriptor_;
}

const XilianConfig& XilianConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XilianConfig_2eproto();
  return *default_instance_;
}

XilianConfig* XilianConfig::default_instance_ = NULL;

XilianConfig* XilianConfig::New() const {
  return new XilianConfig;
}

void XilianConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_rank_ = 0;
    id_ = 0;
    lock_count_ = 0;
    quality_ = 0;
  }
  consume_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool XilianConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_rank;
        break;
      }

      // optional int32 equip_rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_rank_)));
          set_has_equip_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // optional int32 quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lock_count;
        break;
      }

      // optional int32 lock_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lock_count_)));
          set_has_lock_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_consume;
        break;
      }

      // repeated .DianShiTech.Config.ConfigTypeGroup consume = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consume()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_consume;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void XilianConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 equip_rank = 2;
  if (has_equip_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equip_rank(), output);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quality(), output);
  }

  // optional int32 lock_count = 4;
  if (has_lock_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lock_count(), output);
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup consume = 5;
  for (int i = 0; i < this->consume_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->consume(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* XilianConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 equip_rank = 2;
  if (has_equip_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equip_rank(), target);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quality(), target);
  }

  // optional int32 lock_count = 4;
  if (has_lock_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lock_count(), target);
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup consume = 5;
  for (int i = 0; i < this->consume_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->consume(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int XilianConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 equip_rank = 2;
    if (has_equip_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_rank());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 lock_count = 4;
    if (has_lock_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lock_count());
    }

    // optional int32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

  }
  // repeated .DianShiTech.Config.ConfigTypeGroup consume = 5;
  total_size += 1 * this->consume_size();
  for (int i = 0; i < this->consume_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consume(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XilianConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const XilianConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const XilianConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void XilianConfig::MergeFrom(const XilianConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  consume_.MergeFrom(from.consume_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_rank()) {
      set_equip_rank(from.equip_rank());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lock_count()) {
      set_lock_count(from.lock_count());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void XilianConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XilianConfig::CopyFrom(const XilianConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XilianConfig::IsInitialized() const {

  return true;
}

void XilianConfig::Swap(XilianConfig* other) {
  if (other != this) {
    std::swap(equip_rank_, other->equip_rank_);
    std::swap(id_, other->id_);
    consume_.Swap(&other->consume_);
    std::swap(lock_count_, other->lock_count_);
    std::swap(quality_, other->quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata XilianConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XilianConfig_descriptor_;
  metadata.reflection = XilianConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RobotDataConfig.proto

#ifndef PROTOBUF_RobotDataConfig_2eproto__INCLUDED
#define PROTOBUF_RobotDataConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RobotDataConfig_2eproto();
void protobuf_AssignDesc_RobotDataConfig_2eproto();
void protobuf_ShutdownFile_RobotDataConfig_2eproto();

class RobotDataConfig;

// ===================================================================

class RobotDataConfig : public ::google::protobuf::Message {
 public:
  RobotDataConfig();
  virtual ~RobotDataConfig();

  RobotDataConfig(const RobotDataConfig& from);

  inline RobotDataConfig& operator=(const RobotDataConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotDataConfig& default_instance();

  void Swap(RobotDataConfig* other);

  // implements Message ----------------------------------------------

  RobotDataConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobotDataConfig& from);
  void MergeFrom(const RobotDataConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 coin = 9;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 9;
  inline ::google::protobuf::int32 coin() const;
  inline void set_coin(::google::protobuf::int32 value);

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated int32 card2 = 4;
  inline int card2_size() const;
  inline void clear_card2();
  static const int kCard2FieldNumber = 4;
  inline ::google::protobuf::int32 card2(int index) const;
  inline void set_card2(int index, ::google::protobuf::int32 value);
  inline void add_card2(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      card2() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_card2();

  // optional int32 drop = 11;
  inline bool has_drop() const;
  inline void clear_drop();
  static const int kDropFieldNumber = 11;
  inline ::google::protobuf::int32 drop() const;
  inline void set_drop(::google::protobuf::int32 value);

  // repeated int32 card4 = 6;
  inline int card4_size() const;
  inline void clear_card4();
  static const int kCard4FieldNumber = 6;
  inline ::google::protobuf::int32 card4(int index) const;
  inline void set_card4(int index, ::google::protobuf::int32 value);
  inline void add_card4(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      card4() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_card4();

  // optional int32 mine_coin = 10;
  inline bool has_mine_coin() const;
  inline void clear_mine_coin();
  static const int kMineCoinFieldNumber = 10;
  inline ::google::protobuf::int32 mine_coin() const;
  inline void set_mine_coin(::google::protobuf::int32 value);

  // optional int32 rank_point = 8;
  inline bool has_rank_point() const;
  inline void clear_rank_point();
  static const int kRankPointFieldNumber = 8;
  inline ::google::protobuf::int32 rank_point() const;
  inline void set_rank_point(::google::protobuf::int32 value);

  // repeated int32 card5 = 7;
  inline int card5_size() const;
  inline void clear_card5();
  static const int kCard5FieldNumber = 7;
  inline ::google::protobuf::int32 card5(int index) const;
  inline void set_card5(int index, ::google::protobuf::int32 value);
  inline void add_card5(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      card5() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_card5();

  // optional int32 card_count = 2;
  inline bool has_card_count() const;
  inline void clear_card_count();
  static const int kCardCountFieldNumber = 2;
  inline ::google::protobuf::int32 card_count() const;
  inline void set_card_count(::google::protobuf::int32 value);

  // repeated int32 card1 = 3;
  inline int card1_size() const;
  inline void clear_card1();
  static const int kCard1FieldNumber = 3;
  inline ::google::protobuf::int32 card1(int index) const;
  inline void set_card1(int index, ::google::protobuf::int32 value);
  inline void add_card1(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      card1() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_card1();

  // repeated int32 card3 = 5;
  inline int card3_size() const;
  inline void clear_card3();
  static const int kCard3FieldNumber = 5;
  inline ::google::protobuf::int32 card3(int index) const;
  inline void set_card3(int index, ::google::protobuf::int32 value);
  inline void add_card3(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      card3() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_card3();

  // @@protoc_insertion_point(class_scope:DianShiTech.Config.RobotDataConfig)
 private:
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_drop();
  inline void clear_has_drop();
  inline void set_has_mine_coin();
  inline void clear_has_mine_coin();
  inline void set_has_rank_point();
  inline void clear_has_rank_point();
  inline void set_has_card_count();
  inline void clear_has_card_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 coin_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > card2_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > card4_;
  ::google::protobuf::int32 drop_;
  ::google::protobuf::int32 mine_coin_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > card5_;
  ::google::protobuf::int32 rank_point_;
  ::google::protobuf::int32 card_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > card1_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > card3_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_RobotDataConfig_2eproto();
  friend void protobuf_AssignDesc_RobotDataConfig_2eproto();
  friend void protobuf_ShutdownFile_RobotDataConfig_2eproto();

  void InitAsDefaultInstance();
  static RobotDataConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// RobotDataConfig

// optional int32 coin = 9;
inline bool RobotDataConfig::has_coin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotDataConfig::set_has_coin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotDataConfig::clear_has_coin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotDataConfig::clear_coin() {
  coin_ = 0;
  clear_has_coin();
}
inline ::google::protobuf::int32 RobotDataConfig::coin() const {
  return coin_;
}
inline void RobotDataConfig::set_coin(::google::protobuf::int32 value) {
  set_has_coin();
  coin_ = value;
}

// optional int32 id = 1;
inline bool RobotDataConfig::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotDataConfig::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotDataConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobotDataConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RobotDataConfig::id() const {
  return id_;
}
inline void RobotDataConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated int32 card2 = 4;
inline int RobotDataConfig::card2_size() const {
  return card2_.size();
}
inline void RobotDataConfig::clear_card2() {
  card2_.Clear();
}
inline ::google::protobuf::int32 RobotDataConfig::card2(int index) const {
  return card2_.Get(index);
}
inline void RobotDataConfig::set_card2(int index, ::google::protobuf::int32 value) {
  card2_.Set(index, value);
}
inline void RobotDataConfig::add_card2(::google::protobuf::int32 value) {
  card2_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RobotDataConfig::card2() const {
  return card2_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RobotDataConfig::mutable_card2() {
  return &card2_;
}

// optional int32 drop = 11;
inline bool RobotDataConfig::has_drop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RobotDataConfig::set_has_drop() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RobotDataConfig::clear_has_drop() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RobotDataConfig::clear_drop() {
  drop_ = 0;
  clear_has_drop();
}
inline ::google::protobuf::int32 RobotDataConfig::drop() const {
  return drop_;
}
inline void RobotDataConfig::set_drop(::google::protobuf::int32 value) {
  set_has_drop();
  drop_ = value;
}

// repeated int32 card4 = 6;
inline int RobotDataConfig::card4_size() const {
  return card4_.size();
}
inline void RobotDataConfig::clear_card4() {
  card4_.Clear();
}
inline ::google::protobuf::int32 RobotDataConfig::card4(int index) const {
  return card4_.Get(index);
}
inline void RobotDataConfig::set_card4(int index, ::google::protobuf::int32 value) {
  card4_.Set(index, value);
}
inline void RobotDataConfig::add_card4(::google::protobuf::int32 value) {
  card4_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RobotDataConfig::card4() const {
  return card4_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RobotDataConfig::mutable_card4() {
  return &card4_;
}

// optional int32 mine_coin = 10;
inline bool RobotDataConfig::has_mine_coin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RobotDataConfig::set_has_mine_coin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RobotDataConfig::clear_has_mine_coin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RobotDataConfig::clear_mine_coin() {
  mine_coin_ = 0;
  clear_has_mine_coin();
}
inline ::google::protobuf::int32 RobotDataConfig::mine_coin() const {
  return mine_coin_;
}
inline void RobotDataConfig::set_mine_coin(::google::protobuf::int32 value) {
  set_has_mine_coin();
  mine_coin_ = value;
}

// optional int32 rank_point = 8;
inline bool RobotDataConfig::has_rank_point() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RobotDataConfig::set_has_rank_point() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RobotDataConfig::clear_has_rank_point() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RobotDataConfig::clear_rank_point() {
  rank_point_ = 0;
  clear_has_rank_point();
}
inline ::google::protobuf::int32 RobotDataConfig::rank_point() const {
  return rank_point_;
}
inline void RobotDataConfig::set_rank_point(::google::protobuf::int32 value) {
  set_has_rank_point();
  rank_point_ = value;
}

// repeated int32 card5 = 7;
inline int RobotDataConfig::card5_size() const {
  return card5_.size();
}
inline void RobotDataConfig::clear_card5() {
  card5_.Clear();
}
inline ::google::protobuf::int32 RobotDataConfig::card5(int index) const {
  return card5_.Get(index);
}
inline void RobotDataConfig::set_card5(int index, ::google::protobuf::int32 value) {
  card5_.Set(index, value);
}
inline void RobotDataConfig::add_card5(::google::protobuf::int32 value) {
  card5_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RobotDataConfig::card5() const {
  return card5_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RobotDataConfig::mutable_card5() {
  return &card5_;
}

// optional int32 card_count = 2;
inline bool RobotDataConfig::has_card_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RobotDataConfig::set_has_card_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RobotDataConfig::clear_has_card_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RobotDataConfig::clear_card_count() {
  card_count_ = 0;
  clear_has_card_count();
}
inline ::google::protobuf::int32 RobotDataConfig::card_count() const {
  return card_count_;
}
inline void RobotDataConfig::set_card_count(::google::protobuf::int32 value) {
  set_has_card_count();
  card_count_ = value;
}

// repeated int32 card1 = 3;
inline int RobotDataConfig::card1_size() const {
  return card1_.size();
}
inline void RobotDataConfig::clear_card1() {
  card1_.Clear();
}
inline ::google::protobuf::int32 RobotDataConfig::card1(int index) const {
  return card1_.Get(index);
}
inline void RobotDataConfig::set_card1(int index, ::google::protobuf::int32 value) {
  card1_.Set(index, value);
}
inline void RobotDataConfig::add_card1(::google::protobuf::int32 value) {
  card1_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RobotDataConfig::card1() const {
  return card1_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RobotDataConfig::mutable_card1() {
  return &card1_;
}

// repeated int32 card3 = 5;
inline int RobotDataConfig::card3_size() const {
  return card3_.size();
}
inline void RobotDataConfig::clear_card3() {
  card3_.Clear();
}
inline ::google::protobuf::int32 RobotDataConfig::card3(int index) const {
  return card3_.Get(index);
}
inline void RobotDataConfig::set_card3(int index, ::google::protobuf::int32 value) {
  card3_.Set(index, value);
}
inline void RobotDataConfig::add_card3(::google::protobuf::int32 value) {
  card3_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RobotDataConfig::card3() const {
  return card3_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RobotDataConfig::mutable_card3() {
  return &card3_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RobotDataConfig_2eproto__INCLUDED

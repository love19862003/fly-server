// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BattleConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* BattleConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BattleConfig_2eproto() {
  protobuf_AddDesc_BattleConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BattleConfig.proto");
  GOOGLE_CHECK(file != NULL);
  BattleConfig_descriptor_ = file->message_type(0);
  static const int BattleConfig_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, boss_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, charcterlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, boss_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, card_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, killbonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, tough_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, evade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, basedamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, boss_dom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, boss_atk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, cri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, max_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, damage_reduce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, boss_int_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, damage_increase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, hit_),
  };
  BattleConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleConfig_descriptor_,
      BattleConfig::default_instance_,
      BattleConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BattleConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleConfig_descriptor_, &BattleConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BattleConfig_2eproto() {
  delete BattleConfig::default_instance_;
  delete BattleConfig_reflection_;
}

void protobuf_AddDesc_BattleConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022BattleConfig.proto\022\022DianShiTech.Config"
    "\032\025ConfigTypeGroup.proto\"\242\003\n\014BattleConfig"
    "\022\017\n\007boss_hp\030\003 \001(\005\022\021\n\tmax_count\030\027 \001(\005\022\025\n\r"
    "charcterlevel\030\002 \001(\005\022\020\n\010boss_str\030\005 \001(\005\022\022\n"
    "\ncard_level\030\020 \001(\005\022\021\n\tkillbonus\030\024 \003(\005\022\r\n\005"
    "block\030\016 \001(\005\022\r\n\005tough\030\r \001(\005\022\r\n\005evade\030\014 \001("
    "\005\022\022\n\nbasedamage\030\021 \001(\005\022\020\n\010boss_dom\030\007 \001(\005\022"
    "\n\n\002id\030\001 \001(\005\022\016\n\006damage\030\026 \001(\005\022\020\n\010boss_atk\030"
    "\004 \001(\005\022\013\n\003cri\030\t \001(\005\022\r\n\005bonus\030\023 \003(\005\022\020\n\010max"
    "_coin\030\022 \001(\005\022\025\n\rdamage_reduce\030\017 \001(\005\022\020\n\010bo"
    "ss_int\030\006 \001(\005\022\027\n\017damage_increase\030\013 \001(\005\022\021\n"
    "\tprecision\030\n \001(\005\022\r\n\005delay\030\025 \001(\005\022\013\n\003hit\030\010"
    " \001(\005", 484);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BattleConfig.proto", &protobuf_RegisterTypes);
  BattleConfig::default_instance_ = new BattleConfig();
  BattleConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BattleConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BattleConfig_2eproto {
  StaticDescriptorInitializer_BattleConfig_2eproto() {
    protobuf_AddDesc_BattleConfig_2eproto();
  }
} static_descriptor_initializer_BattleConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BattleConfig::kBossHpFieldNumber;
const int BattleConfig::kMaxCountFieldNumber;
const int BattleConfig::kCharcterlevelFieldNumber;
const int BattleConfig::kBossStrFieldNumber;
const int BattleConfig::kCardLevelFieldNumber;
const int BattleConfig::kKillbonusFieldNumber;
const int BattleConfig::kBlockFieldNumber;
const int BattleConfig::kToughFieldNumber;
const int BattleConfig::kEvadeFieldNumber;
const int BattleConfig::kBasedamageFieldNumber;
const int BattleConfig::kBossDomFieldNumber;
const int BattleConfig::kIdFieldNumber;
const int BattleConfig::kDamageFieldNumber;
const int BattleConfig::kBossAtkFieldNumber;
const int BattleConfig::kCriFieldNumber;
const int BattleConfig::kBonusFieldNumber;
const int BattleConfig::kMaxCoinFieldNumber;
const int BattleConfig::kDamageReduceFieldNumber;
const int BattleConfig::kBossIntFieldNumber;
const int BattleConfig::kDamageIncreaseFieldNumber;
const int BattleConfig::kPrecisionFieldNumber;
const int BattleConfig::kDelayFieldNumber;
const int BattleConfig::kHitFieldNumber;
#endif  // !_MSC_VER

BattleConfig::BattleConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleConfig::InitAsDefaultInstance() {
}

BattleConfig::BattleConfig(const BattleConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleConfig::SharedCtor() {
  _cached_size_ = 0;
  boss_hp_ = 0;
  max_count_ = 0;
  charcterlevel_ = 0;
  boss_str_ = 0;
  card_level_ = 0;
  block_ = 0;
  tough_ = 0;
  evade_ = 0;
  basedamage_ = 0;
  boss_dom_ = 0;
  id_ = 0;
  damage_ = 0;
  boss_atk_ = 0;
  cri_ = 0;
  max_coin_ = 0;
  damage_reduce_ = 0;
  boss_int_ = 0;
  damage_increase_ = 0;
  precision_ = 0;
  delay_ = 0;
  hit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleConfig::~BattleConfig() {
  SharedDtor();
}

void BattleConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleConfig_descriptor_;
}

const BattleConfig& BattleConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleConfig_2eproto();
  return *default_instance_;
}

BattleConfig* BattleConfig::default_instance_ = NULL;

BattleConfig* BattleConfig::New() const {
  return new BattleConfig;
}

void BattleConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    boss_hp_ = 0;
    max_count_ = 0;
    charcterlevel_ = 0;
    boss_str_ = 0;
    card_level_ = 0;
    block_ = 0;
    tough_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    evade_ = 0;
    basedamage_ = 0;
    boss_dom_ = 0;
    id_ = 0;
    damage_ = 0;
    boss_atk_ = 0;
    cri_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    max_coin_ = 0;
    damage_reduce_ = 0;
    boss_int_ = 0;
    damage_increase_ = 0;
    precision_ = 0;
    delay_ = 0;
    hit_ = 0;
  }
  killbonus_.Clear();
  bonus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charcterlevel;
        break;
      }

      // optional int32 charcterlevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charcterlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charcterlevel_)));
          set_has_charcterlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_boss_hp;
        break;
      }

      // optional int32 boss_hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_hp_)));
          set_has_boss_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_boss_atk;
        break;
      }

      // optional int32 boss_atk = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_atk_)));
          set_has_boss_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_boss_str;
        break;
      }

      // optional int32 boss_str = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_str:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_str_)));
          set_has_boss_str();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_boss_int;
        break;
      }

      // optional int32 boss_int = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_int_)));
          set_has_boss_int();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_boss_dom;
        break;
      }

      // optional int32 boss_dom = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_dom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_dom_)));
          set_has_boss_dom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hit;
        break;
      }

      // optional int32 hit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hit_)));
          set_has_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cri;
        break;
      }

      // optional int32 cri = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cri_)));
          set_has_cri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_precision;
        break;
      }

      // optional int32 precision = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precision_)));
          set_has_precision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_damage_increase;
        break;
      }

      // optional int32 damage_increase = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_increase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_increase_)));
          set_has_damage_increase();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_evade;
        break;
      }

      // optional int32 evade = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_evade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &evade_)));
          set_has_evade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tough;
        break;
      }

      // optional int32 tough = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tough:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tough_)));
          set_has_tough();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_block;
        break;
      }

      // optional int32 block = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_)));
          set_has_block();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_damage_reduce;
        break;
      }

      // optional int32 damage_reduce = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_reduce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_reduce_)));
          set_has_damage_reduce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_card_level;
        break;
      }

      // optional int32 card_level = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_level_)));
          set_has_card_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_basedamage;
        break;
      }

      // optional int32 basedamage = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basedamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basedamage_)));
          set_has_basedamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_max_coin;
        break;
      }

      // optional int32 max_coin = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_coin_)));
          set_has_max_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_bonus;
        break;
      }

      // repeated int32 bonus = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_bonus())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bonus())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_bonus;
        if (input->ExpectTag(160)) goto parse_killbonus;
        break;
      }

      // repeated int32 killbonus = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killbonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 160, input, this->mutable_killbonus())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_killbonus())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_killbonus;
        if (input->ExpectTag(168)) goto parse_delay;
        break;
      }

      // optional int32 delay = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_damage;
        break;
      }

      // optional int32 damage = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_max_count;
        break;
      }

      // optional int32 max_count = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_count_)));
          set_has_max_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 charcterlevel = 2;
  if (has_charcterlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->charcterlevel(), output);
  }

  // optional int32 boss_hp = 3;
  if (has_boss_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->boss_hp(), output);
  }

  // optional int32 boss_atk = 4;
  if (has_boss_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->boss_atk(), output);
  }

  // optional int32 boss_str = 5;
  if (has_boss_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->boss_str(), output);
  }

  // optional int32 boss_int = 6;
  if (has_boss_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->boss_int(), output);
  }

  // optional int32 boss_dom = 7;
  if (has_boss_dom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->boss_dom(), output);
  }

  // optional int32 hit = 8;
  if (has_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->hit(), output);
  }

  // optional int32 cri = 9;
  if (has_cri()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cri(), output);
  }

  // optional int32 precision = 10;
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->precision(), output);
  }

  // optional int32 damage_increase = 11;
  if (has_damage_increase()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->damage_increase(), output);
  }

  // optional int32 evade = 12;
  if (has_evade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->evade(), output);
  }

  // optional int32 tough = 13;
  if (has_tough()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->tough(), output);
  }

  // optional int32 block = 14;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->block(), output);
  }

  // optional int32 damage_reduce = 15;
  if (has_damage_reduce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->damage_reduce(), output);
  }

  // optional int32 card_level = 16;
  if (has_card_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->card_level(), output);
  }

  // optional int32 basedamage = 17;
  if (has_basedamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->basedamage(), output);
  }

  // optional int32 max_coin = 18;
  if (has_max_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->max_coin(), output);
  }

  // repeated int32 bonus = 19;
  for (int i = 0; i < this->bonus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->bonus(i), output);
  }

  // repeated int32 killbonus = 20;
  for (int i = 0; i < this->killbonus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      20, this->killbonus(i), output);
  }

  // optional int32 delay = 21;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->delay(), output);
  }

  // optional int32 damage = 22;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->damage(), output);
  }

  // optional int32 max_count = 23;
  if (has_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->max_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 charcterlevel = 2;
  if (has_charcterlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->charcterlevel(), target);
  }

  // optional int32 boss_hp = 3;
  if (has_boss_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->boss_hp(), target);
  }

  // optional int32 boss_atk = 4;
  if (has_boss_atk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->boss_atk(), target);
  }

  // optional int32 boss_str = 5;
  if (has_boss_str()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->boss_str(), target);
  }

  // optional int32 boss_int = 6;
  if (has_boss_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->boss_int(), target);
  }

  // optional int32 boss_dom = 7;
  if (has_boss_dom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->boss_dom(), target);
  }

  // optional int32 hit = 8;
  if (has_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->hit(), target);
  }

  // optional int32 cri = 9;
  if (has_cri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cri(), target);
  }

  // optional int32 precision = 10;
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->precision(), target);
  }

  // optional int32 damage_increase = 11;
  if (has_damage_increase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->damage_increase(), target);
  }

  // optional int32 evade = 12;
  if (has_evade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->evade(), target);
  }

  // optional int32 tough = 13;
  if (has_tough()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->tough(), target);
  }

  // optional int32 block = 14;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->block(), target);
  }

  // optional int32 damage_reduce = 15;
  if (has_damage_reduce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->damage_reduce(), target);
  }

  // optional int32 card_level = 16;
  if (has_card_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->card_level(), target);
  }

  // optional int32 basedamage = 17;
  if (has_basedamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->basedamage(), target);
  }

  // optional int32 max_coin = 18;
  if (has_max_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->max_coin(), target);
  }

  // repeated int32 bonus = 19;
  for (int i = 0; i < this->bonus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->bonus(i), target);
  }

  // repeated int32 killbonus = 20;
  for (int i = 0; i < this->killbonus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(20, this->killbonus(i), target);
  }

  // optional int32 delay = 21;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->delay(), target);
  }

  // optional int32 damage = 22;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->damage(), target);
  }

  // optional int32 max_count = 23;
  if (has_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->max_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 boss_hp = 3;
    if (has_boss_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_hp());
    }

    // optional int32 max_count = 23;
    if (has_max_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_count());
    }

    // optional int32 charcterlevel = 2;
    if (has_charcterlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charcterlevel());
    }

    // optional int32 boss_str = 5;
    if (has_boss_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_str());
    }

    // optional int32 card_level = 16;
    if (has_card_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_level());
    }

    // optional int32 block = 14;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->block());
    }

    // optional int32 tough = 13;
    if (has_tough()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tough());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 evade = 12;
    if (has_evade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->evade());
    }

    // optional int32 basedamage = 17;
    if (has_basedamage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basedamage());
    }

    // optional int32 boss_dom = 7;
    if (has_boss_dom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_dom());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 damage = 22;
    if (has_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

    // optional int32 boss_atk = 4;
    if (has_boss_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_atk());
    }

    // optional int32 cri = 9;
    if (has_cri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cri());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 max_coin = 18;
    if (has_max_coin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_coin());
    }

    // optional int32 damage_reduce = 15;
    if (has_damage_reduce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_reduce());
    }

    // optional int32 boss_int = 6;
    if (has_boss_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_int());
    }

    // optional int32 damage_increase = 11;
    if (has_damage_increase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_increase());
    }

    // optional int32 precision = 10;
    if (has_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->precision());
    }

    // optional int32 delay = 21;
    if (has_delay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delay());
    }

    // optional int32 hit = 8;
    if (has_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hit());
    }

  }
  // repeated int32 killbonus = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->killbonus_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->killbonus(i));
    }
    total_size += 2 * this->killbonus_size() + data_size;
  }

  // repeated int32 bonus = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->bonus_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bonus(i));
    }
    total_size += 2 * this->bonus_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleConfig::MergeFrom(const BattleConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  killbonus_.MergeFrom(from.killbonus_);
  bonus_.MergeFrom(from.bonus_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boss_hp()) {
      set_boss_hp(from.boss_hp());
    }
    if (from.has_max_count()) {
      set_max_count(from.max_count());
    }
    if (from.has_charcterlevel()) {
      set_charcterlevel(from.charcterlevel());
    }
    if (from.has_boss_str()) {
      set_boss_str(from.boss_str());
    }
    if (from.has_card_level()) {
      set_card_level(from.card_level());
    }
    if (from.has_block()) {
      set_block(from.block());
    }
    if (from.has_tough()) {
      set_tough(from.tough());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_evade()) {
      set_evade(from.evade());
    }
    if (from.has_basedamage()) {
      set_basedamage(from.basedamage());
    }
    if (from.has_boss_dom()) {
      set_boss_dom(from.boss_dom());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_boss_atk()) {
      set_boss_atk(from.boss_atk());
    }
    if (from.has_cri()) {
      set_cri(from.cri());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_max_coin()) {
      set_max_coin(from.max_coin());
    }
    if (from.has_damage_reduce()) {
      set_damage_reduce(from.damage_reduce());
    }
    if (from.has_boss_int()) {
      set_boss_int(from.boss_int());
    }
    if (from.has_damage_increase()) {
      set_damage_increase(from.damage_increase());
    }
    if (from.has_precision()) {
      set_precision(from.precision());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_hit()) {
      set_hit(from.hit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleConfig::CopyFrom(const BattleConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleConfig::IsInitialized() const {

  return true;
}

void BattleConfig::Swap(BattleConfig* other) {
  if (other != this) {
    std::swap(boss_hp_, other->boss_hp_);
    std::swap(max_count_, other->max_count_);
    std::swap(charcterlevel_, other->charcterlevel_);
    std::swap(boss_str_, other->boss_str_);
    std::swap(card_level_, other->card_level_);
    killbonus_.Swap(&other->killbonus_);
    std::swap(block_, other->block_);
    std::swap(tough_, other->tough_);
    std::swap(evade_, other->evade_);
    std::swap(basedamage_, other->basedamage_);
    std::swap(boss_dom_, other->boss_dom_);
    std::swap(id_, other->id_);
    std::swap(damage_, other->damage_);
    std::swap(boss_atk_, other->boss_atk_);
    std::swap(cri_, other->cri_);
    bonus_.Swap(&other->bonus_);
    std::swap(max_coin_, other->max_coin_);
    std::swap(damage_reduce_, other->damage_reduce_);
    std::swap(boss_int_, other->boss_int_);
    std::swap(damage_increase_, other->damage_increase_);
    std::swap(precision_, other->precision_);
    std::swap(delay_, other->delay_);
    std::swap(hit_, other->hit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleConfig_descriptor_;
  metadata.reflection = BattleConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

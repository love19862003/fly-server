// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TalentSkillConfig.proto

#ifndef PROTOBUF_TalentSkillConfig_2eproto__INCLUDED
#define PROTOBUF_TalentSkillConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TalentSkillConfig_2eproto();
void protobuf_AssignDesc_TalentSkillConfig_2eproto();
void protobuf_ShutdownFile_TalentSkillConfig_2eproto();

class TalentSkillConfig;

// ===================================================================

class TalentSkillConfig : public ::google::protobuf::Message {
 public:
  TalentSkillConfig();
  virtual ~TalentSkillConfig();

  TalentSkillConfig(const TalentSkillConfig& from);

  inline TalentSkillConfig& operator=(const TalentSkillConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TalentSkillConfig& default_instance();

  void Swap(TalentSkillConfig* other);

  // implements Message ----------------------------------------------

  TalentSkillConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TalentSkillConfig& from);
  void MergeFrom(const TalentSkillConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string skill_name = 2;
  inline bool has_skill_name() const;
  inline void clear_skill_name();
  static const int kSkillNameFieldNumber = 2;
  inline const ::std::string& skill_name() const;
  inline void set_skill_name(const ::std::string& value);
  inline void set_skill_name(const char* value);
  inline void set_skill_name(const char* value, size_t size);
  inline ::std::string* mutable_skill_name();
  inline ::std::string* release_skill_name();
  inline void set_allocated_skill_name(::std::string* skill_name);

  // optional string d3 = 6;
  inline bool has_d3() const;
  inline void clear_d3();
  static const int kD3FieldNumber = 6;
  inline const ::std::string& d3() const;
  inline void set_d3(const ::std::string& value);
  inline void set_d3(const char* value);
  inline void set_d3(const char* value, size_t size);
  inline ::std::string* mutable_d3();
  inline ::std::string* release_d3();
  inline void set_allocated_d3(::std::string* d3);

  // optional string skill_description = 3;
  inline bool has_skill_description() const;
  inline void clear_skill_description();
  static const int kSkillDescriptionFieldNumber = 3;
  inline const ::std::string& skill_description() const;
  inline void set_skill_description(const ::std::string& value);
  inline void set_skill_description(const char* value);
  inline void set_skill_description(const char* value, size_t size);
  inline ::std::string* mutable_skill_description();
  inline ::std::string* release_skill_description();
  inline void set_allocated_skill_description(::std::string* skill_description);

  // optional string d1 = 4;
  inline bool has_d1() const;
  inline void clear_d1();
  static const int kD1FieldNumber = 4;
  inline const ::std::string& d1() const;
  inline void set_d1(const ::std::string& value);
  inline void set_d1(const char* value);
  inline void set_d1(const char* value, size_t size);
  inline ::std::string* mutable_d1();
  inline ::std::string* release_d1();
  inline void set_allocated_d1(::std::string* d1);

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 talent_limit_add = 8;
  inline bool has_talent_limit_add() const;
  inline void clear_talent_limit_add();
  static const int kTalentLimitAddFieldNumber = 8;
  inline ::google::protobuf::int32 talent_limit_add() const;
  inline void set_talent_limit_add(::google::protobuf::int32 value);

  // optional int32 para = 7;
  inline bool has_para() const;
  inline void clear_para();
  static const int kParaFieldNumber = 7;
  inline ::google::protobuf::int32 para() const;
  inline void set_para(::google::protobuf::int32 value);

  // optional string d2 = 5;
  inline bool has_d2() const;
  inline void clear_d2();
  static const int kD2FieldNumber = 5;
  inline const ::std::string& d2() const;
  inline void set_d2(const ::std::string& value);
  inline void set_d2(const char* value);
  inline void set_d2(const char* value, size_t size);
  inline ::std::string* mutable_d2();
  inline ::std::string* release_d2();
  inline void set_allocated_d2(::std::string* d2);

  // @@protoc_insertion_point(class_scope:DianShiTech.Config.TalentSkillConfig)
 private:
  inline void set_has_skill_name();
  inline void clear_has_skill_name();
  inline void set_has_d3();
  inline void clear_has_d3();
  inline void set_has_skill_description();
  inline void clear_has_skill_description();
  inline void set_has_d1();
  inline void clear_has_d1();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_talent_limit_add();
  inline void clear_has_talent_limit_add();
  inline void set_has_para();
  inline void clear_has_para();
  inline void set_has_d2();
  inline void clear_has_d2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* skill_name_;
  ::std::string* d3_;
  ::std::string* skill_description_;
  ::std::string* d1_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 talent_limit_add_;
  ::std::string* d2_;
  ::google::protobuf::int32 para_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_TalentSkillConfig_2eproto();
  friend void protobuf_AssignDesc_TalentSkillConfig_2eproto();
  friend void protobuf_ShutdownFile_TalentSkillConfig_2eproto();

  void InitAsDefaultInstance();
  static TalentSkillConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// TalentSkillConfig

// optional string skill_name = 2;
inline bool TalentSkillConfig::has_skill_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TalentSkillConfig::set_has_skill_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TalentSkillConfig::clear_has_skill_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TalentSkillConfig::clear_skill_name() {
  if (skill_name_ != &::google::protobuf::internal::kEmptyString) {
    skill_name_->clear();
  }
  clear_has_skill_name();
}
inline const ::std::string& TalentSkillConfig::skill_name() const {
  return *skill_name_;
}
inline void TalentSkillConfig::set_skill_name(const ::std::string& value) {
  set_has_skill_name();
  if (skill_name_ == &::google::protobuf::internal::kEmptyString) {
    skill_name_ = new ::std::string;
  }
  skill_name_->assign(value);
}
inline void TalentSkillConfig::set_skill_name(const char* value) {
  set_has_skill_name();
  if (skill_name_ == &::google::protobuf::internal::kEmptyString) {
    skill_name_ = new ::std::string;
  }
  skill_name_->assign(value);
}
inline void TalentSkillConfig::set_skill_name(const char* value, size_t size) {
  set_has_skill_name();
  if (skill_name_ == &::google::protobuf::internal::kEmptyString) {
    skill_name_ = new ::std::string;
  }
  skill_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TalentSkillConfig::mutable_skill_name() {
  set_has_skill_name();
  if (skill_name_ == &::google::protobuf::internal::kEmptyString) {
    skill_name_ = new ::std::string;
  }
  return skill_name_;
}
inline ::std::string* TalentSkillConfig::release_skill_name() {
  clear_has_skill_name();
  if (skill_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = skill_name_;
    skill_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TalentSkillConfig::set_allocated_skill_name(::std::string* skill_name) {
  if (skill_name_ != &::google::protobuf::internal::kEmptyString) {
    delete skill_name_;
  }
  if (skill_name) {
    set_has_skill_name();
    skill_name_ = skill_name;
  } else {
    clear_has_skill_name();
    skill_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string d3 = 6;
inline bool TalentSkillConfig::has_d3() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TalentSkillConfig::set_has_d3() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TalentSkillConfig::clear_has_d3() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TalentSkillConfig::clear_d3() {
  if (d3_ != &::google::protobuf::internal::kEmptyString) {
    d3_->clear();
  }
  clear_has_d3();
}
inline const ::std::string& TalentSkillConfig::d3() const {
  return *d3_;
}
inline void TalentSkillConfig::set_d3(const ::std::string& value) {
  set_has_d3();
  if (d3_ == &::google::protobuf::internal::kEmptyString) {
    d3_ = new ::std::string;
  }
  d3_->assign(value);
}
inline void TalentSkillConfig::set_d3(const char* value) {
  set_has_d3();
  if (d3_ == &::google::protobuf::internal::kEmptyString) {
    d3_ = new ::std::string;
  }
  d3_->assign(value);
}
inline void TalentSkillConfig::set_d3(const char* value, size_t size) {
  set_has_d3();
  if (d3_ == &::google::protobuf::internal::kEmptyString) {
    d3_ = new ::std::string;
  }
  d3_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TalentSkillConfig::mutable_d3() {
  set_has_d3();
  if (d3_ == &::google::protobuf::internal::kEmptyString) {
    d3_ = new ::std::string;
  }
  return d3_;
}
inline ::std::string* TalentSkillConfig::release_d3() {
  clear_has_d3();
  if (d3_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = d3_;
    d3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TalentSkillConfig::set_allocated_d3(::std::string* d3) {
  if (d3_ != &::google::protobuf::internal::kEmptyString) {
    delete d3_;
  }
  if (d3) {
    set_has_d3();
    d3_ = d3;
  } else {
    clear_has_d3();
    d3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string skill_description = 3;
inline bool TalentSkillConfig::has_skill_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TalentSkillConfig::set_has_skill_description() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TalentSkillConfig::clear_has_skill_description() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TalentSkillConfig::clear_skill_description() {
  if (skill_description_ != &::google::protobuf::internal::kEmptyString) {
    skill_description_->clear();
  }
  clear_has_skill_description();
}
inline const ::std::string& TalentSkillConfig::skill_description() const {
  return *skill_description_;
}
inline void TalentSkillConfig::set_skill_description(const ::std::string& value) {
  set_has_skill_description();
  if (skill_description_ == &::google::protobuf::internal::kEmptyString) {
    skill_description_ = new ::std::string;
  }
  skill_description_->assign(value);
}
inline void TalentSkillConfig::set_skill_description(const char* value) {
  set_has_skill_description();
  if (skill_description_ == &::google::protobuf::internal::kEmptyString) {
    skill_description_ = new ::std::string;
  }
  skill_description_->assign(value);
}
inline void TalentSkillConfig::set_skill_description(const char* value, size_t size) {
  set_has_skill_description();
  if (skill_description_ == &::google::protobuf::internal::kEmptyString) {
    skill_description_ = new ::std::string;
  }
  skill_description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TalentSkillConfig::mutable_skill_description() {
  set_has_skill_description();
  if (skill_description_ == &::google::protobuf::internal::kEmptyString) {
    skill_description_ = new ::std::string;
  }
  return skill_description_;
}
inline ::std::string* TalentSkillConfig::release_skill_description() {
  clear_has_skill_description();
  if (skill_description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = skill_description_;
    skill_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TalentSkillConfig::set_allocated_skill_description(::std::string* skill_description) {
  if (skill_description_ != &::google::protobuf::internal::kEmptyString) {
    delete skill_description_;
  }
  if (skill_description) {
    set_has_skill_description();
    skill_description_ = skill_description;
  } else {
    clear_has_skill_description();
    skill_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string d1 = 4;
inline bool TalentSkillConfig::has_d1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TalentSkillConfig::set_has_d1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TalentSkillConfig::clear_has_d1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TalentSkillConfig::clear_d1() {
  if (d1_ != &::google::protobuf::internal::kEmptyString) {
    d1_->clear();
  }
  clear_has_d1();
}
inline const ::std::string& TalentSkillConfig::d1() const {
  return *d1_;
}
inline void TalentSkillConfig::set_d1(const ::std::string& value) {
  set_has_d1();
  if (d1_ == &::google::protobuf::internal::kEmptyString) {
    d1_ = new ::std::string;
  }
  d1_->assign(value);
}
inline void TalentSkillConfig::set_d1(const char* value) {
  set_has_d1();
  if (d1_ == &::google::protobuf::internal::kEmptyString) {
    d1_ = new ::std::string;
  }
  d1_->assign(value);
}
inline void TalentSkillConfig::set_d1(const char* value, size_t size) {
  set_has_d1();
  if (d1_ == &::google::protobuf::internal::kEmptyString) {
    d1_ = new ::std::string;
  }
  d1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TalentSkillConfig::mutable_d1() {
  set_has_d1();
  if (d1_ == &::google::protobuf::internal::kEmptyString) {
    d1_ = new ::std::string;
  }
  return d1_;
}
inline ::std::string* TalentSkillConfig::release_d1() {
  clear_has_d1();
  if (d1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = d1_;
    d1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TalentSkillConfig::set_allocated_d1(::std::string* d1) {
  if (d1_ != &::google::protobuf::internal::kEmptyString) {
    delete d1_;
  }
  if (d1) {
    set_has_d1();
    d1_ = d1;
  } else {
    clear_has_d1();
    d1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 id = 1;
inline bool TalentSkillConfig::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TalentSkillConfig::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TalentSkillConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TalentSkillConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TalentSkillConfig::id() const {
  return id_;
}
inline void TalentSkillConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 talent_limit_add = 8;
inline bool TalentSkillConfig::has_talent_limit_add() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TalentSkillConfig::set_has_talent_limit_add() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TalentSkillConfig::clear_has_talent_limit_add() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TalentSkillConfig::clear_talent_limit_add() {
  talent_limit_add_ = 0;
  clear_has_talent_limit_add();
}
inline ::google::protobuf::int32 TalentSkillConfig::talent_limit_add() const {
  return talent_limit_add_;
}
inline void TalentSkillConfig::set_talent_limit_add(::google::protobuf::int32 value) {
  set_has_talent_limit_add();
  talent_limit_add_ = value;
}

// optional int32 para = 7;
inline bool TalentSkillConfig::has_para() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TalentSkillConfig::set_has_para() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TalentSkillConfig::clear_has_para() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TalentSkillConfig::clear_para() {
  para_ = 0;
  clear_has_para();
}
inline ::google::protobuf::int32 TalentSkillConfig::para() const {
  return para_;
}
inline void TalentSkillConfig::set_para(::google::protobuf::int32 value) {
  set_has_para();
  para_ = value;
}

// optional string d2 = 5;
inline bool TalentSkillConfig::has_d2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TalentSkillConfig::set_has_d2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TalentSkillConfig::clear_has_d2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TalentSkillConfig::clear_d2() {
  if (d2_ != &::google::protobuf::internal::kEmptyString) {
    d2_->clear();
  }
  clear_has_d2();
}
inline const ::std::string& TalentSkillConfig::d2() const {
  return *d2_;
}
inline void TalentSkillConfig::set_d2(const ::std::string& value) {
  set_has_d2();
  if (d2_ == &::google::protobuf::internal::kEmptyString) {
    d2_ = new ::std::string;
  }
  d2_->assign(value);
}
inline void TalentSkillConfig::set_d2(const char* value) {
  set_has_d2();
  if (d2_ == &::google::protobuf::internal::kEmptyString) {
    d2_ = new ::std::string;
  }
  d2_->assign(value);
}
inline void TalentSkillConfig::set_d2(const char* value, size_t size) {
  set_has_d2();
  if (d2_ == &::google::protobuf::internal::kEmptyString) {
    d2_ = new ::std::string;
  }
  d2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TalentSkillConfig::mutable_d2() {
  set_has_d2();
  if (d2_ == &::google::protobuf::internal::kEmptyString) {
    d2_ = new ::std::string;
  }
  return d2_;
}
inline ::std::string* TalentSkillConfig::release_d2() {
  clear_has_d2();
  if (d2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = d2_;
    d2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TalentSkillConfig::set_allocated_d2(::std::string* d2) {
  if (d2_ != &::google::protobuf::internal::kEmptyString) {
    delete d2_;
  }
  if (d2) {
    set_has_d2();
    d2_ = d2;
  } else {
    clear_has_d2();
    d2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TalentSkillConfig_2eproto__INCLUDED

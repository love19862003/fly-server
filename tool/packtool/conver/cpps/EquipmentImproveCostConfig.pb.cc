// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EquipmentImproveCostConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EquipmentImproveCostConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* EquipmentImproveCostConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentImproveCostConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_EquipmentImproveCostConfig_2eproto() {
  protobuf_AddDesc_EquipmentImproveCostConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EquipmentImproveCostConfig.proto");
  GOOGLE_CHECK(file != NULL);
  EquipmentImproveCostConfig_descriptor_ = file->message_type(0);
  static const int EquipmentImproveCostConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentImproveCostConfig, bonus_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentImproveCostConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentImproveCostConfig, decoration_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentImproveCostConfig, armor_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentImproveCostConfig, weapon_cost_),
  };
  EquipmentImproveCostConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentImproveCostConfig_descriptor_,
      EquipmentImproveCostConfig::default_instance_,
      EquipmentImproveCostConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentImproveCostConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentImproveCostConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentImproveCostConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EquipmentImproveCostConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentImproveCostConfig_descriptor_, &EquipmentImproveCostConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EquipmentImproveCostConfig_2eproto() {
  delete EquipmentImproveCostConfig::default_instance_;
  delete EquipmentImproveCostConfig_reflection_;
}

void protobuf_AddDesc_EquipmentImproveCostConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n EquipmentImproveCostConfig.proto\022\022Dian"
    "ShiTech.Config\032\025ConfigTypeGroup.proto\"~\n"
    "\032EquipmentImproveCostConfig\022\022\n\nbonus_rat"
    "e\030\002 \001(\005\022\n\n\002id\030\001 \001(\005\022\027\n\017decoration_cost\030\005"
    " \001(\005\022\022\n\narmor_cost\030\004 \001(\005\022\023\n\013weapon_cost\030"
    "\003 \001(\005", 205);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EquipmentImproveCostConfig.proto", &protobuf_RegisterTypes);
  EquipmentImproveCostConfig::default_instance_ = new EquipmentImproveCostConfig();
  EquipmentImproveCostConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EquipmentImproveCostConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EquipmentImproveCostConfig_2eproto {
  StaticDescriptorInitializer_EquipmentImproveCostConfig_2eproto() {
    protobuf_AddDesc_EquipmentImproveCostConfig_2eproto();
  }
} static_descriptor_initializer_EquipmentImproveCostConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int EquipmentImproveCostConfig::kBonusRateFieldNumber;
const int EquipmentImproveCostConfig::kIdFieldNumber;
const int EquipmentImproveCostConfig::kDecorationCostFieldNumber;
const int EquipmentImproveCostConfig::kArmorCostFieldNumber;
const int EquipmentImproveCostConfig::kWeaponCostFieldNumber;
#endif  // !_MSC_VER

EquipmentImproveCostConfig::EquipmentImproveCostConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentImproveCostConfig::InitAsDefaultInstance() {
}

EquipmentImproveCostConfig::EquipmentImproveCostConfig(const EquipmentImproveCostConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentImproveCostConfig::SharedCtor() {
  _cached_size_ = 0;
  bonus_rate_ = 0;
  id_ = 0;
  decoration_cost_ = 0;
  armor_cost_ = 0;
  weapon_cost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentImproveCostConfig::~EquipmentImproveCostConfig() {
  SharedDtor();
}

void EquipmentImproveCostConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentImproveCostConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentImproveCostConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentImproveCostConfig_descriptor_;
}

const EquipmentImproveCostConfig& EquipmentImproveCostConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentImproveCostConfig_2eproto();
  return *default_instance_;
}

EquipmentImproveCostConfig* EquipmentImproveCostConfig::default_instance_ = NULL;

EquipmentImproveCostConfig* EquipmentImproveCostConfig::New() const {
  return new EquipmentImproveCostConfig;
}

void EquipmentImproveCostConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bonus_rate_ = 0;
    id_ = 0;
    decoration_cost_ = 0;
    armor_cost_ = 0;
    weapon_cost_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentImproveCostConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bonus_rate;
        break;
      }

      // optional int32 bonus_rate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bonus_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bonus_rate_)));
          set_has_bonus_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_weapon_cost;
        break;
      }

      // optional int32 weapon_cost = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_cost_)));
          set_has_weapon_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_armor_cost;
        break;
      }

      // optional int32 armor_cost = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_armor_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armor_cost_)));
          set_has_armor_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_decoration_cost;
        break;
      }

      // optional int32 decoration_cost = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_decoration_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decoration_cost_)));
          set_has_decoration_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentImproveCostConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 bonus_rate = 2;
  if (has_bonus_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bonus_rate(), output);
  }

  // optional int32 weapon_cost = 3;
  if (has_weapon_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->weapon_cost(), output);
  }

  // optional int32 armor_cost = 4;
  if (has_armor_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->armor_cost(), output);
  }

  // optional int32 decoration_cost = 5;
  if (has_decoration_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->decoration_cost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentImproveCostConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 bonus_rate = 2;
  if (has_bonus_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bonus_rate(), target);
  }

  // optional int32 weapon_cost = 3;
  if (has_weapon_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->weapon_cost(), target);
  }

  // optional int32 armor_cost = 4;
  if (has_armor_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->armor_cost(), target);
  }

  // optional int32 decoration_cost = 5;
  if (has_decoration_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->decoration_cost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentImproveCostConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bonus_rate = 2;
    if (has_bonus_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bonus_rate());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 decoration_cost = 5;
    if (has_decoration_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decoration_cost());
    }

    // optional int32 armor_cost = 4;
    if (has_armor_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armor_cost());
    }

    // optional int32 weapon_cost = 3;
    if (has_weapon_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weapon_cost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentImproveCostConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentImproveCostConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentImproveCostConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentImproveCostConfig::MergeFrom(const EquipmentImproveCostConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bonus_rate()) {
      set_bonus_rate(from.bonus_rate());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_decoration_cost()) {
      set_decoration_cost(from.decoration_cost());
    }
    if (from.has_armor_cost()) {
      set_armor_cost(from.armor_cost());
    }
    if (from.has_weapon_cost()) {
      set_weapon_cost(from.weapon_cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentImproveCostConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentImproveCostConfig::CopyFrom(const EquipmentImproveCostConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentImproveCostConfig::IsInitialized() const {

  return true;
}

void EquipmentImproveCostConfig::Swap(EquipmentImproveCostConfig* other) {
  if (other != this) {
    std::swap(bonus_rate_, other->bonus_rate_);
    std::swap(id_, other->id_);
    std::swap(decoration_cost_, other->decoration_cost_);
    std::swap(armor_cost_, other->armor_cost_);
    std::swap(weapon_cost_, other->weapon_cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentImproveCostConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentImproveCostConfig_descriptor_;
  metadata.reflection = EquipmentImproveCostConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

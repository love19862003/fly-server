// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rank_match_robotConfig.proto

#ifndef PROTOBUF_rank_5fmatch_5frobotConfig_2eproto__INCLUDED
#define PROTOBUF_rank_5fmatch_5frobotConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rank_5fmatch_5frobotConfig_2eproto();
void protobuf_AssignDesc_rank_5fmatch_5frobotConfig_2eproto();
void protobuf_ShutdownFile_rank_5fmatch_5frobotConfig_2eproto();

class rank_match_robotConfig;

// ===================================================================

class rank_match_robotConfig : public ::google::protobuf::Message {
 public:
  rank_match_robotConfig();
  virtual ~rank_match_robotConfig();

  rank_match_robotConfig(const rank_match_robotConfig& from);

  inline rank_match_robotConfig& operator=(const rank_match_robotConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rank_match_robotConfig& default_instance();

  void Swap(rank_match_robotConfig* other);

  // implements Message ----------------------------------------------

  rank_match_robotConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rank_match_robotConfig& from);
  void MergeFrom(const rank_match_robotConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 minrank = 2;
  inline bool has_minrank() const;
  inline void clear_minrank();
  static const int kMinrankFieldNumber = 2;
  inline ::google::protobuf::int32 minrank() const;
  inline void set_minrank(::google::protobuf::int32 value);

  // repeated .DianShiTech.Config.ConfigTypeGroup card = 5;
  inline int card_size() const;
  inline void clear_card();
  static const int kCardFieldNumber = 5;
  inline const ::DianShiTech::Config::ConfigTypeGroup& card(int index) const;
  inline ::DianShiTech::Config::ConfigTypeGroup* mutable_card(int index);
  inline ::DianShiTech::Config::ConfigTypeGroup* add_card();
  inline const ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >&
      card() const;
  inline ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >*
      mutable_card();

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 maxrank = 3;
  inline bool has_maxrank() const;
  inline void clear_maxrank();
  static const int kMaxrankFieldNumber = 3;
  inline ::google::protobuf::int32 maxrank() const;
  inline void set_maxrank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DianShiTech.Config.rank_match_robotConfig)
 private:
  inline void set_has_minrank();
  inline void clear_has_minrank();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_maxrank();
  inline void clear_has_maxrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup > card_;
  ::google::protobuf::int32 minrank_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 maxrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_rank_5fmatch_5frobotConfig_2eproto();
  friend void protobuf_AssignDesc_rank_5fmatch_5frobotConfig_2eproto();
  friend void protobuf_ShutdownFile_rank_5fmatch_5frobotConfig_2eproto();

  void InitAsDefaultInstance();
  static rank_match_robotConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// rank_match_robotConfig

// optional int32 minrank = 2;
inline bool rank_match_robotConfig::has_minrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rank_match_robotConfig::set_has_minrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rank_match_robotConfig::clear_has_minrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rank_match_robotConfig::clear_minrank() {
  minrank_ = 0;
  clear_has_minrank();
}
inline ::google::protobuf::int32 rank_match_robotConfig::minrank() const {
  return minrank_;
}
inline void rank_match_robotConfig::set_minrank(::google::protobuf::int32 value) {
  set_has_minrank();
  minrank_ = value;
}

// repeated .DianShiTech.Config.ConfigTypeGroup card = 5;
inline int rank_match_robotConfig::card_size() const {
  return card_.size();
}
inline void rank_match_robotConfig::clear_card() {
  card_.Clear();
}
inline const ::DianShiTech::Config::ConfigTypeGroup& rank_match_robotConfig::card(int index) const {
  return card_.Get(index);
}
inline ::DianShiTech::Config::ConfigTypeGroup* rank_match_robotConfig::mutable_card(int index) {
  return card_.Mutable(index);
}
inline ::DianShiTech::Config::ConfigTypeGroup* rank_match_robotConfig::add_card() {
  return card_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >&
rank_match_robotConfig::card() const {
  return card_;
}
inline ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >*
rank_match_robotConfig::mutable_card() {
  return &card_;
}

// optional int32 id = 1;
inline bool rank_match_robotConfig::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rank_match_robotConfig::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rank_match_robotConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rank_match_robotConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 rank_match_robotConfig::id() const {
  return id_;
}
inline void rank_match_robotConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 level = 4;
inline bool rank_match_robotConfig::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void rank_match_robotConfig::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void rank_match_robotConfig::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void rank_match_robotConfig::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 rank_match_robotConfig::level() const {
  return level_;
}
inline void rank_match_robotConfig::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 maxrank = 3;
inline bool rank_match_robotConfig::has_maxrank() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void rank_match_robotConfig::set_has_maxrank() {
  _has_bits_[0] |= 0x00000010u;
}
inline void rank_match_robotConfig::clear_has_maxrank() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void rank_match_robotConfig::clear_maxrank() {
  maxrank_ = 0;
  clear_has_maxrank();
}
inline ::google::protobuf::int32 rank_match_robotConfig::maxrank() const {
  return maxrank_;
}
inline void rank_match_robotConfig::set_maxrank(::google::protobuf::int32 value) {
  set_has_maxrank();
  maxrank_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rank_5fmatch_5frobotConfig_2eproto__INCLUDED

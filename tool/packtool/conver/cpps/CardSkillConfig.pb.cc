// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CardSkillConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CardSkillConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* CardSkillConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CardSkillConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CardSkillConfig_2eproto() {
  protobuf_AddDesc_CardSkillConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CardSkillConfig.proto");
  GOOGLE_CHECK(file != NULL);
  CardSkillConfig_descriptor_ = file->message_type(0);
  static const int CardSkillConfig_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, atk_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, skill_description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, skill_root_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, skill_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, target_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, priority_target_rule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, d2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, combine_effect_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, skill_effect_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, talent_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, card_value_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, next_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, atk_range_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, harm_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, d3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, atk_min_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, d1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, multitarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, skill_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, buffs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, skill_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, n1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, n2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, n3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, n5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, n4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, skill_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, can_effect_wall_),
  };
  CardSkillConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CardSkillConfig_descriptor_,
      CardSkillConfig::default_instance_,
      CardSkillConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSkillConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CardSkillConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CardSkillConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CardSkillConfig_descriptor_, &CardSkillConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CardSkillConfig_2eproto() {
  delete CardSkillConfig::default_instance_;
  delete CardSkillConfig_reflection_;
}

void protobuf_AddDesc_CardSkillConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025CardSkillConfig.proto\022\022DianShiTech.Con"
    "fig\032\025ConfigTypeGroup.proto\"\345\004\n\017CardSkill"
    "Config\022\024\n\014atk_distance\030\030 \001(\005\022\031\n\021skill_de"
    "scription\030\t \001(\t\022\022\n\nskill_root\030\005 \001(\005\022\022\n\ns"
    "kill_type\030\002 \001(\005\022\023\n\013skill_level\030\006 \001(\005\022\024\n\014"
    "target_count\030\026 \001(\005\022\034\n\024priority_target_ru"
    "le\030\023 \001(\005\022\n\n\002d2\030\020 \001(\t\022\031\n\021combine_effect_i"
    "d\030\034 \001(\005\022\027\n\017skill_effect_id\030\033 \001(\005\022\023\n\013tale"
    "nt_info\030  \003(\005\022\016\n\006target\030\024 \001(\005\022\027\n\017card_va"
    "lue_rank\030\007 \001(\005\022\022\n\nnext_skill\030\004 \001(\005\022\026\n\016at"
    "k_range_type\030\032 \001(\005\022\021\n\tharm_type\030\003 \001(\005\022\n\n"
    "\002d3\030\021 \001(\t\022\030\n\020atk_min_distance\030\027 \001(\005\022\n\n\002d"
    "1\030\017 \001(\t\022\n\n\002id\030\001 \001(\005\022\023\n\013multitarget\030\025 \003(\005"
    "\022\023\n\013skill_ratio\030\037 \001(\005\022\r\n\005buffs\030\022 \003(\005\022\023\n\013"
    "skill_range\030\036 \001(\005\022\n\n\002n1\030\n \001(\005\022\n\n\002n2\030\013 \001("
    "\005\022\n\n\002n3\030\014 \001(\005\022\n\n\002n5\030\016 \001(\005\022\n\n\002n4\030\r \001(\005\022\022\n"
    "\nskill_name\030\010 \001(\t\022\027\n\017can_effect_wall\030\031 \001"
    "(\005", 682);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CardSkillConfig.proto", &protobuf_RegisterTypes);
  CardSkillConfig::default_instance_ = new CardSkillConfig();
  CardSkillConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CardSkillConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CardSkillConfig_2eproto {
  StaticDescriptorInitializer_CardSkillConfig_2eproto() {
    protobuf_AddDesc_CardSkillConfig_2eproto();
  }
} static_descriptor_initializer_CardSkillConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CardSkillConfig::kAtkDistanceFieldNumber;
const int CardSkillConfig::kSkillDescriptionFieldNumber;
const int CardSkillConfig::kSkillRootFieldNumber;
const int CardSkillConfig::kSkillTypeFieldNumber;
const int CardSkillConfig::kSkillLevelFieldNumber;
const int CardSkillConfig::kTargetCountFieldNumber;
const int CardSkillConfig::kPriorityTargetRuleFieldNumber;
const int CardSkillConfig::kD2FieldNumber;
const int CardSkillConfig::kCombineEffectIdFieldNumber;
const int CardSkillConfig::kSkillEffectIdFieldNumber;
const int CardSkillConfig::kTalentInfoFieldNumber;
const int CardSkillConfig::kTargetFieldNumber;
const int CardSkillConfig::kCardValueRankFieldNumber;
const int CardSkillConfig::kNextSkillFieldNumber;
const int CardSkillConfig::kAtkRangeTypeFieldNumber;
const int CardSkillConfig::kHarmTypeFieldNumber;
const int CardSkillConfig::kD3FieldNumber;
const int CardSkillConfig::kAtkMinDistanceFieldNumber;
const int CardSkillConfig::kD1FieldNumber;
const int CardSkillConfig::kIdFieldNumber;
const int CardSkillConfig::kMultitargetFieldNumber;
const int CardSkillConfig::kSkillRatioFieldNumber;
const int CardSkillConfig::kBuffsFieldNumber;
const int CardSkillConfig::kSkillRangeFieldNumber;
const int CardSkillConfig::kN1FieldNumber;
const int CardSkillConfig::kN2FieldNumber;
const int CardSkillConfig::kN3FieldNumber;
const int CardSkillConfig::kN5FieldNumber;
const int CardSkillConfig::kN4FieldNumber;
const int CardSkillConfig::kSkillNameFieldNumber;
const int CardSkillConfig::kCanEffectWallFieldNumber;
#endif  // !_MSC_VER

CardSkillConfig::CardSkillConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CardSkillConfig::InitAsDefaultInstance() {
}

CardSkillConfig::CardSkillConfig(const CardSkillConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CardSkillConfig::SharedCtor() {
  _cached_size_ = 0;
  atk_distance_ = 0;
  skill_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  skill_root_ = 0;
  skill_type_ = 0;
  skill_level_ = 0;
  target_count_ = 0;
  priority_target_rule_ = 0;
  d2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  combine_effect_id_ = 0;
  skill_effect_id_ = 0;
  target_ = 0;
  card_value_rank_ = 0;
  next_skill_ = 0;
  atk_range_type_ = 0;
  harm_type_ = 0;
  d3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  atk_min_distance_ = 0;
  d1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  skill_ratio_ = 0;
  skill_range_ = 0;
  n1_ = 0;
  n2_ = 0;
  n3_ = 0;
  n5_ = 0;
  n4_ = 0;
  skill_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  can_effect_wall_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardSkillConfig::~CardSkillConfig() {
  SharedDtor();
}

void CardSkillConfig::SharedDtor() {
  if (skill_description_ != &::google::protobuf::internal::kEmptyString) {
    delete skill_description_;
  }
  if (d2_ != &::google::protobuf::internal::kEmptyString) {
    delete d2_;
  }
  if (d3_ != &::google::protobuf::internal::kEmptyString) {
    delete d3_;
  }
  if (d1_ != &::google::protobuf::internal::kEmptyString) {
    delete d1_;
  }
  if (skill_name_ != &::google::protobuf::internal::kEmptyString) {
    delete skill_name_;
  }
  if (this != default_instance_) {
  }
}

void CardSkillConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardSkillConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardSkillConfig_descriptor_;
}

const CardSkillConfig& CardSkillConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CardSkillConfig_2eproto();
  return *default_instance_;
}

CardSkillConfig* CardSkillConfig::default_instance_ = NULL;

CardSkillConfig* CardSkillConfig::New() const {
  return new CardSkillConfig;
}

void CardSkillConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    atk_distance_ = 0;
    if (has_skill_description()) {
      if (skill_description_ != &::google::protobuf::internal::kEmptyString) {
        skill_description_->clear();
      }
    }
    skill_root_ = 0;
    skill_type_ = 0;
    skill_level_ = 0;
    target_count_ = 0;
    priority_target_rule_ = 0;
    if (has_d2()) {
      if (d2_ != &::google::protobuf::internal::kEmptyString) {
        d2_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    combine_effect_id_ = 0;
    skill_effect_id_ = 0;
    target_ = 0;
    card_value_rank_ = 0;
    next_skill_ = 0;
    atk_range_type_ = 0;
    harm_type_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_d3()) {
      if (d3_ != &::google::protobuf::internal::kEmptyString) {
        d3_->clear();
      }
    }
    atk_min_distance_ = 0;
    if (has_d1()) {
      if (d1_ != &::google::protobuf::internal::kEmptyString) {
        d1_->clear();
      }
    }
    id_ = 0;
    skill_ratio_ = 0;
    skill_range_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    n1_ = 0;
    n2_ = 0;
    n3_ = 0;
    n5_ = 0;
    n4_ = 0;
    if (has_skill_name()) {
      if (skill_name_ != &::google::protobuf::internal::kEmptyString) {
        skill_name_->clear();
      }
    }
    can_effect_wall_ = 0;
  }
  talent_info_.Clear();
  multitarget_.Clear();
  buffs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CardSkillConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_type;
        break;
      }

      // optional int32 skill_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_type_)));
          set_has_skill_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_harm_type;
        break;
      }

      // optional int32 harm_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_harm_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &harm_type_)));
          set_has_harm_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_next_skill;
        break;
      }

      // optional int32 next_skill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_skill_)));
          set_has_next_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skill_root;
        break;
      }

      // optional int32 skill_root = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_root:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_root_)));
          set_has_skill_root();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_skill_level;
        break;
      }

      // optional int32 skill_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_card_value_rank;
        break;
      }

      // optional int32 card_value_rank = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_value_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_value_rank_)));
          set_has_card_value_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_skill_name;
        break;
      }

      // optional string skill_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skill_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->skill_name().data(), this->skill_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_skill_description;
        break;
      }

      // optional string skill_description = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skill_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->skill_description().data(), this->skill_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_n1;
        break;
      }

      // optional int32 n1 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_n1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &n1_)));
          set_has_n1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_n2;
        break;
      }

      // optional int32 n2 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_n2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &n2_)));
          set_has_n2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_n3;
        break;
      }

      // optional int32 n3 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_n3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &n3_)));
          set_has_n3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_n4;
        break;
      }

      // optional int32 n4 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_n4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &n4_)));
          set_has_n4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_n5;
        break;
      }

      // optional int32 n5 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_n5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &n5_)));
          set_has_n5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_d1;
        break;
      }

      // optional string d1 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_d1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_d1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->d1().data(), this->d1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_d2;
        break;
      }

      // optional string d2 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_d2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_d2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->d2().data(), this->d2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_d3;
        break;
      }

      // optional string d3 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_d3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_d3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->d3().data(), this->d3().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_buffs;
        break;
      }

      // repeated int32 buffs = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buffs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 144, input, this->mutable_buffs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_buffs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_buffs;
        if (input->ExpectTag(152)) goto parse_priority_target_rule;
        break;
      }

      // optional int32 priority_target_rule = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority_target_rule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_target_rule_)));
          set_has_priority_target_rule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_target;
        break;
      }

      // optional int32 target = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_multitarget;
        break;
      }

      // repeated int32 multitarget = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multitarget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 168, input, this->mutable_multitarget())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_multitarget())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_multitarget;
        if (input->ExpectTag(176)) goto parse_target_count;
        break;
      }

      // optional int32 target_count = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_count_)));
          set_has_target_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_atk_min_distance;
        break;
      }

      // optional int32 atk_min_distance = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atk_min_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atk_min_distance_)));
          set_has_atk_min_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_atk_distance;
        break;
      }

      // optional int32 atk_distance = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atk_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atk_distance_)));
          set_has_atk_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_can_effect_wall;
        break;
      }

      // optional int32 can_effect_wall = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_effect_wall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_effect_wall_)));
          set_has_can_effect_wall();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_atk_range_type;
        break;
      }

      // optional int32 atk_range_type = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atk_range_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atk_range_type_)));
          set_has_atk_range_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_skill_effect_id;
        break;
      }

      // optional int32 skill_effect_id = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_effect_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_effect_id_)));
          set_has_skill_effect_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_combine_effect_id;
        break;
      }

      // optional int32 combine_effect_id = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combine_effect_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combine_effect_id_)));
          set_has_combine_effect_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_skill_range;
        break;
      }

      // optional int32 skill_range = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_range_)));
          set_has_skill_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_skill_ratio;
        break;
      }

      // optional int32 skill_ratio = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_ratio_)));
          set_has_skill_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_talent_info;
        break;
      }

      // repeated int32 talent_info = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talent_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 256, input, this->mutable_talent_info())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_talent_info())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_talent_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CardSkillConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 skill_type = 2;
  if (has_skill_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_type(), output);
  }

  // optional int32 harm_type = 3;
  if (has_harm_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->harm_type(), output);
  }

  // optional int32 next_skill = 4;
  if (has_next_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->next_skill(), output);
  }

  // optional int32 skill_root = 5;
  if (has_skill_root()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->skill_root(), output);
  }

  // optional int32 skill_level = 6;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->skill_level(), output);
  }

  // optional int32 card_value_rank = 7;
  if (has_card_value_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->card_value_rank(), output);
  }

  // optional string skill_name = 8;
  if (has_skill_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skill_name().data(), this->skill_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->skill_name(), output);
  }

  // optional string skill_description = 9;
  if (has_skill_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skill_description().data(), this->skill_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->skill_description(), output);
  }

  // optional int32 n1 = 10;
  if (has_n1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->n1(), output);
  }

  // optional int32 n2 = 11;
  if (has_n2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->n2(), output);
  }

  // optional int32 n3 = 12;
  if (has_n3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->n3(), output);
  }

  // optional int32 n4 = 13;
  if (has_n4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->n4(), output);
  }

  // optional int32 n5 = 14;
  if (has_n5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->n5(), output);
  }

  // optional string d1 = 15;
  if (has_d1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->d1().data(), this->d1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->d1(), output);
  }

  // optional string d2 = 16;
  if (has_d2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->d2().data(), this->d2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->d2(), output);
  }

  // optional string d3 = 17;
  if (has_d3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->d3().data(), this->d3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->d3(), output);
  }

  // repeated int32 buffs = 18;
  for (int i = 0; i < this->buffs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      18, this->buffs(i), output);
  }

  // optional int32 priority_target_rule = 19;
  if (has_priority_target_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->priority_target_rule(), output);
  }

  // optional int32 target = 20;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->target(), output);
  }

  // repeated int32 multitarget = 21;
  for (int i = 0; i < this->multitarget_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      21, this->multitarget(i), output);
  }

  // optional int32 target_count = 22;
  if (has_target_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->target_count(), output);
  }

  // optional int32 atk_min_distance = 23;
  if (has_atk_min_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->atk_min_distance(), output);
  }

  // optional int32 atk_distance = 24;
  if (has_atk_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->atk_distance(), output);
  }

  // optional int32 can_effect_wall = 25;
  if (has_can_effect_wall()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->can_effect_wall(), output);
  }

  // optional int32 atk_range_type = 26;
  if (has_atk_range_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->atk_range_type(), output);
  }

  // optional int32 skill_effect_id = 27;
  if (has_skill_effect_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->skill_effect_id(), output);
  }

  // optional int32 combine_effect_id = 28;
  if (has_combine_effect_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->combine_effect_id(), output);
  }

  // optional int32 skill_range = 30;
  if (has_skill_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->skill_range(), output);
  }

  // optional int32 skill_ratio = 31;
  if (has_skill_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->skill_ratio(), output);
  }

  // repeated int32 talent_info = 32;
  for (int i = 0; i < this->talent_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      32, this->talent_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CardSkillConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 skill_type = 2;
  if (has_skill_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skill_type(), target);
  }

  // optional int32 harm_type = 3;
  if (has_harm_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->harm_type(), target);
  }

  // optional int32 next_skill = 4;
  if (has_next_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->next_skill(), target);
  }

  // optional int32 skill_root = 5;
  if (has_skill_root()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->skill_root(), target);
  }

  // optional int32 skill_level = 6;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->skill_level(), target);
  }

  // optional int32 card_value_rank = 7;
  if (has_card_value_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->card_value_rank(), target);
  }

  // optional string skill_name = 8;
  if (has_skill_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skill_name().data(), this->skill_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->skill_name(), target);
  }

  // optional string skill_description = 9;
  if (has_skill_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skill_description().data(), this->skill_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->skill_description(), target);
  }

  // optional int32 n1 = 10;
  if (has_n1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->n1(), target);
  }

  // optional int32 n2 = 11;
  if (has_n2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->n2(), target);
  }

  // optional int32 n3 = 12;
  if (has_n3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->n3(), target);
  }

  // optional int32 n4 = 13;
  if (has_n4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->n4(), target);
  }

  // optional int32 n5 = 14;
  if (has_n5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->n5(), target);
  }

  // optional string d1 = 15;
  if (has_d1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->d1().data(), this->d1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->d1(), target);
  }

  // optional string d2 = 16;
  if (has_d2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->d2().data(), this->d2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->d2(), target);
  }

  // optional string d3 = 17;
  if (has_d3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->d3().data(), this->d3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->d3(), target);
  }

  // repeated int32 buffs = 18;
  for (int i = 0; i < this->buffs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(18, this->buffs(i), target);
  }

  // optional int32 priority_target_rule = 19;
  if (has_priority_target_rule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->priority_target_rule(), target);
  }

  // optional int32 target = 20;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->target(), target);
  }

  // repeated int32 multitarget = 21;
  for (int i = 0; i < this->multitarget_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(21, this->multitarget(i), target);
  }

  // optional int32 target_count = 22;
  if (has_target_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->target_count(), target);
  }

  // optional int32 atk_min_distance = 23;
  if (has_atk_min_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->atk_min_distance(), target);
  }

  // optional int32 atk_distance = 24;
  if (has_atk_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->atk_distance(), target);
  }

  // optional int32 can_effect_wall = 25;
  if (has_can_effect_wall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->can_effect_wall(), target);
  }

  // optional int32 atk_range_type = 26;
  if (has_atk_range_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->atk_range_type(), target);
  }

  // optional int32 skill_effect_id = 27;
  if (has_skill_effect_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->skill_effect_id(), target);
  }

  // optional int32 combine_effect_id = 28;
  if (has_combine_effect_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->combine_effect_id(), target);
  }

  // optional int32 skill_range = 30;
  if (has_skill_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->skill_range(), target);
  }

  // optional int32 skill_ratio = 31;
  if (has_skill_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->skill_ratio(), target);
  }

  // repeated int32 talent_info = 32;
  for (int i = 0; i < this->talent_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(32, this->talent_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CardSkillConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 atk_distance = 24;
    if (has_atk_distance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atk_distance());
    }

    // optional string skill_description = 9;
    if (has_skill_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skill_description());
    }

    // optional int32 skill_root = 5;
    if (has_skill_root()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_root());
    }

    // optional int32 skill_type = 2;
    if (has_skill_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_type());
    }

    // optional int32 skill_level = 6;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_level());
    }

    // optional int32 target_count = 22;
    if (has_target_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_count());
    }

    // optional int32 priority_target_rule = 19;
    if (has_priority_target_rule()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority_target_rule());
    }

    // optional string d2 = 16;
    if (has_d2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->d2());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 combine_effect_id = 28;
    if (has_combine_effect_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combine_effect_id());
    }

    // optional int32 skill_effect_id = 27;
    if (has_skill_effect_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_effect_id());
    }

    // optional int32 target = 20;
    if (has_target()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target());
    }

    // optional int32 card_value_rank = 7;
    if (has_card_value_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_value_rank());
    }

    // optional int32 next_skill = 4;
    if (has_next_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_skill());
    }

    // optional int32 atk_range_type = 26;
    if (has_atk_range_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atk_range_type());
    }

    // optional int32 harm_type = 3;
    if (has_harm_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->harm_type());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string d3 = 17;
    if (has_d3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->d3());
    }

    // optional int32 atk_min_distance = 23;
    if (has_atk_min_distance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atk_min_distance());
    }

    // optional string d1 = 15;
    if (has_d1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->d1());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 skill_ratio = 31;
    if (has_skill_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_ratio());
    }

    // optional int32 skill_range = 30;
    if (has_skill_range()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_range());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 n1 = 10;
    if (has_n1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->n1());
    }

    // optional int32 n2 = 11;
    if (has_n2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->n2());
    }

    // optional int32 n3 = 12;
    if (has_n3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->n3());
    }

    // optional int32 n5 = 14;
    if (has_n5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->n5());
    }

    // optional int32 n4 = 13;
    if (has_n4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->n4());
    }

    // optional string skill_name = 8;
    if (has_skill_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skill_name());
    }

    // optional int32 can_effect_wall = 25;
    if (has_can_effect_wall()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_effect_wall());
    }

  }
  // repeated int32 talent_info = 32;
  {
    int data_size = 0;
    for (int i = 0; i < this->talent_info_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->talent_info(i));
    }
    total_size += 2 * this->talent_info_size() + data_size;
  }

  // repeated int32 multitarget = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->multitarget_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->multitarget(i));
    }
    total_size += 2 * this->multitarget_size() + data_size;
  }

  // repeated int32 buffs = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->buffs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->buffs(i));
    }
    total_size += 2 * this->buffs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardSkillConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CardSkillConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CardSkillConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CardSkillConfig::MergeFrom(const CardSkillConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  talent_info_.MergeFrom(from.talent_info_);
  multitarget_.MergeFrom(from.multitarget_);
  buffs_.MergeFrom(from.buffs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_atk_distance()) {
      set_atk_distance(from.atk_distance());
    }
    if (from.has_skill_description()) {
      set_skill_description(from.skill_description());
    }
    if (from.has_skill_root()) {
      set_skill_root(from.skill_root());
    }
    if (from.has_skill_type()) {
      set_skill_type(from.skill_type());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
    if (from.has_target_count()) {
      set_target_count(from.target_count());
    }
    if (from.has_priority_target_rule()) {
      set_priority_target_rule(from.priority_target_rule());
    }
    if (from.has_d2()) {
      set_d2(from.d2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_combine_effect_id()) {
      set_combine_effect_id(from.combine_effect_id());
    }
    if (from.has_skill_effect_id()) {
      set_skill_effect_id(from.skill_effect_id());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_card_value_rank()) {
      set_card_value_rank(from.card_value_rank());
    }
    if (from.has_next_skill()) {
      set_next_skill(from.next_skill());
    }
    if (from.has_atk_range_type()) {
      set_atk_range_type(from.atk_range_type());
    }
    if (from.has_harm_type()) {
      set_harm_type(from.harm_type());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_d3()) {
      set_d3(from.d3());
    }
    if (from.has_atk_min_distance()) {
      set_atk_min_distance(from.atk_min_distance());
    }
    if (from.has_d1()) {
      set_d1(from.d1());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_skill_ratio()) {
      set_skill_ratio(from.skill_ratio());
    }
    if (from.has_skill_range()) {
      set_skill_range(from.skill_range());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_n1()) {
      set_n1(from.n1());
    }
    if (from.has_n2()) {
      set_n2(from.n2());
    }
    if (from.has_n3()) {
      set_n3(from.n3());
    }
    if (from.has_n5()) {
      set_n5(from.n5());
    }
    if (from.has_n4()) {
      set_n4(from.n4());
    }
    if (from.has_skill_name()) {
      set_skill_name(from.skill_name());
    }
    if (from.has_can_effect_wall()) {
      set_can_effect_wall(from.can_effect_wall());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CardSkillConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardSkillConfig::CopyFrom(const CardSkillConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardSkillConfig::IsInitialized() const {

  return true;
}

void CardSkillConfig::Swap(CardSkillConfig* other) {
  if (other != this) {
    std::swap(atk_distance_, other->atk_distance_);
    std::swap(skill_description_, other->skill_description_);
    std::swap(skill_root_, other->skill_root_);
    std::swap(skill_type_, other->skill_type_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(target_count_, other->target_count_);
    std::swap(priority_target_rule_, other->priority_target_rule_);
    std::swap(d2_, other->d2_);
    std::swap(combine_effect_id_, other->combine_effect_id_);
    std::swap(skill_effect_id_, other->skill_effect_id_);
    talent_info_.Swap(&other->talent_info_);
    std::swap(target_, other->target_);
    std::swap(card_value_rank_, other->card_value_rank_);
    std::swap(next_skill_, other->next_skill_);
    std::swap(atk_range_type_, other->atk_range_type_);
    std::swap(harm_type_, other->harm_type_);
    std::swap(d3_, other->d3_);
    std::swap(atk_min_distance_, other->atk_min_distance_);
    std::swap(d1_, other->d1_);
    std::swap(id_, other->id_);
    multitarget_.Swap(&other->multitarget_);
    std::swap(skill_ratio_, other->skill_ratio_);
    buffs_.Swap(&other->buffs_);
    std::swap(skill_range_, other->skill_range_);
    std::swap(n1_, other->n1_);
    std::swap(n2_, other->n2_);
    std::swap(n3_, other->n3_);
    std::swap(n5_, other->n5_);
    std::swap(n4_, other->n4_);
    std::swap(skill_name_, other->skill_name_);
    std::swap(can_effect_wall_, other->can_effect_wall_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CardSkillConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CardSkillConfig_descriptor_;
  metadata.reflection = CardSkillConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CardSkillConfig.proto

#ifndef PROTOBUF_CardSkillConfig_2eproto__INCLUDED
#define PROTOBUF_CardSkillConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CardSkillConfig_2eproto();
void protobuf_AssignDesc_CardSkillConfig_2eproto();
void protobuf_ShutdownFile_CardSkillConfig_2eproto();

class CardSkillConfig;

// ===================================================================

class CardSkillConfig : public ::google::protobuf::Message {
 public:
  CardSkillConfig();
  virtual ~CardSkillConfig();

  CardSkillConfig(const CardSkillConfig& from);

  inline CardSkillConfig& operator=(const CardSkillConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CardSkillConfig& default_instance();

  void Swap(CardSkillConfig* other);

  // implements Message ----------------------------------------------

  CardSkillConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CardSkillConfig& from);
  void MergeFrom(const CardSkillConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 atk_distance = 24;
  inline bool has_atk_distance() const;
  inline void clear_atk_distance();
  static const int kAtkDistanceFieldNumber = 24;
  inline ::google::protobuf::int32 atk_distance() const;
  inline void set_atk_distance(::google::protobuf::int32 value);

  // optional string skill_description = 9;
  inline bool has_skill_description() const;
  inline void clear_skill_description();
  static const int kSkillDescriptionFieldNumber = 9;
  inline const ::std::string& skill_description() const;
  inline void set_skill_description(const ::std::string& value);
  inline void set_skill_description(const char* value);
  inline void set_skill_description(const char* value, size_t size);
  inline ::std::string* mutable_skill_description();
  inline ::std::string* release_skill_description();
  inline void set_allocated_skill_description(::std::string* skill_description);

  // optional int32 skill_root = 5;
  inline bool has_skill_root() const;
  inline void clear_skill_root();
  static const int kSkillRootFieldNumber = 5;
  inline ::google::protobuf::int32 skill_root() const;
  inline void set_skill_root(::google::protobuf::int32 value);

  // optional int32 skill_type = 2;
  inline bool has_skill_type() const;
  inline void clear_skill_type();
  static const int kSkillTypeFieldNumber = 2;
  inline ::google::protobuf::int32 skill_type() const;
  inline void set_skill_type(::google::protobuf::int32 value);

  // optional int32 skill_level = 6;
  inline bool has_skill_level() const;
  inline void clear_skill_level();
  static const int kSkillLevelFieldNumber = 6;
  inline ::google::protobuf::int32 skill_level() const;
  inline void set_skill_level(::google::protobuf::int32 value);

  // optional int32 target_count = 22;
  inline bool has_target_count() const;
  inline void clear_target_count();
  static const int kTargetCountFieldNumber = 22;
  inline ::google::protobuf::int32 target_count() const;
  inline void set_target_count(::google::protobuf::int32 value);

  // optional int32 priority_target_rule = 19;
  inline bool has_priority_target_rule() const;
  inline void clear_priority_target_rule();
  static const int kPriorityTargetRuleFieldNumber = 19;
  inline ::google::protobuf::int32 priority_target_rule() const;
  inline void set_priority_target_rule(::google::protobuf::int32 value);

  // optional string d2 = 16;
  inline bool has_d2() const;
  inline void clear_d2();
  static const int kD2FieldNumber = 16;
  inline const ::std::string& d2() const;
  inline void set_d2(const ::std::string& value);
  inline void set_d2(const char* value);
  inline void set_d2(const char* value, size_t size);
  inline ::std::string* mutable_d2();
  inline ::std::string* release_d2();
  inline void set_allocated_d2(::std::string* d2);

  // optional int32 combine_effect_id = 28;
  inline bool has_combine_effect_id() const;
  inline void clear_combine_effect_id();
  static const int kCombineEffectIdFieldNumber = 28;
  inline ::google::protobuf::int32 combine_effect_id() const;
  inline void set_combine_effect_id(::google::protobuf::int32 value);

  // optional int32 skill_effect_id = 27;
  inline bool has_skill_effect_id() const;
  inline void clear_skill_effect_id();
  static const int kSkillEffectIdFieldNumber = 27;
  inline ::google::protobuf::int32 skill_effect_id() const;
  inline void set_skill_effect_id(::google::protobuf::int32 value);

  // repeated int32 talent_info = 32;
  inline int talent_info_size() const;
  inline void clear_talent_info();
  static const int kTalentInfoFieldNumber = 32;
  inline ::google::protobuf::int32 talent_info(int index) const;
  inline void set_talent_info(int index, ::google::protobuf::int32 value);
  inline void add_talent_info(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      talent_info() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_talent_info();

  // optional int32 target = 20;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 20;
  inline ::google::protobuf::int32 target() const;
  inline void set_target(::google::protobuf::int32 value);

  // optional int32 card_value_rank = 7;
  inline bool has_card_value_rank() const;
  inline void clear_card_value_rank();
  static const int kCardValueRankFieldNumber = 7;
  inline ::google::protobuf::int32 card_value_rank() const;
  inline void set_card_value_rank(::google::protobuf::int32 value);

  // optional int32 next_skill = 4;
  inline bool has_next_skill() const;
  inline void clear_next_skill();
  static const int kNextSkillFieldNumber = 4;
  inline ::google::protobuf::int32 next_skill() const;
  inline void set_next_skill(::google::protobuf::int32 value);

  // optional int32 atk_range_type = 26;
  inline bool has_atk_range_type() const;
  inline void clear_atk_range_type();
  static const int kAtkRangeTypeFieldNumber = 26;
  inline ::google::protobuf::int32 atk_range_type() const;
  inline void set_atk_range_type(::google::protobuf::int32 value);

  // optional int32 harm_type = 3;
  inline bool has_harm_type() const;
  inline void clear_harm_type();
  static const int kHarmTypeFieldNumber = 3;
  inline ::google::protobuf::int32 harm_type() const;
  inline void set_harm_type(::google::protobuf::int32 value);

  // optional string d3 = 17;
  inline bool has_d3() const;
  inline void clear_d3();
  static const int kD3FieldNumber = 17;
  inline const ::std::string& d3() const;
  inline void set_d3(const ::std::string& value);
  inline void set_d3(const char* value);
  inline void set_d3(const char* value, size_t size);
  inline ::std::string* mutable_d3();
  inline ::std::string* release_d3();
  inline void set_allocated_d3(::std::string* d3);

  // optional int32 atk_min_distance = 23;
  inline bool has_atk_min_distance() const;
  inline void clear_atk_min_distance();
  static const int kAtkMinDistanceFieldNumber = 23;
  inline ::google::protobuf::int32 atk_min_distance() const;
  inline void set_atk_min_distance(::google::protobuf::int32 value);

  // optional string d1 = 15;
  inline bool has_d1() const;
  inline void clear_d1();
  static const int kD1FieldNumber = 15;
  inline const ::std::string& d1() const;
  inline void set_d1(const ::std::string& value);
  inline void set_d1(const char* value);
  inline void set_d1(const char* value, size_t size);
  inline ::std::string* mutable_d1();
  inline ::std::string* release_d1();
  inline void set_allocated_d1(::std::string* d1);

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated int32 multitarget = 21;
  inline int multitarget_size() const;
  inline void clear_multitarget();
  static const int kMultitargetFieldNumber = 21;
  inline ::google::protobuf::int32 multitarget(int index) const;
  inline void set_multitarget(int index, ::google::protobuf::int32 value);
  inline void add_multitarget(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      multitarget() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_multitarget();

  // optional int32 skill_ratio = 31;
  inline bool has_skill_ratio() const;
  inline void clear_skill_ratio();
  static const int kSkillRatioFieldNumber = 31;
  inline ::google::protobuf::int32 skill_ratio() const;
  inline void set_skill_ratio(::google::protobuf::int32 value);

  // repeated int32 buffs = 18;
  inline int buffs_size() const;
  inline void clear_buffs();
  static const int kBuffsFieldNumber = 18;
  inline ::google::protobuf::int32 buffs(int index) const;
  inline void set_buffs(int index, ::google::protobuf::int32 value);
  inline void add_buffs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      buffs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_buffs();

  // optional int32 skill_range = 30;
  inline bool has_skill_range() const;
  inline void clear_skill_range();
  static const int kSkillRangeFieldNumber = 30;
  inline ::google::protobuf::int32 skill_range() const;
  inline void set_skill_range(::google::protobuf::int32 value);

  // optional int32 n1 = 10;
  inline bool has_n1() const;
  inline void clear_n1();
  static const int kN1FieldNumber = 10;
  inline ::google::protobuf::int32 n1() const;
  inline void set_n1(::google::protobuf::int32 value);

  // optional int32 n2 = 11;
  inline bool has_n2() const;
  inline void clear_n2();
  static const int kN2FieldNumber = 11;
  inline ::google::protobuf::int32 n2() const;
  inline void set_n2(::google::protobuf::int32 value);

  // optional int32 n3 = 12;
  inline bool has_n3() const;
  inline void clear_n3();
  static const int kN3FieldNumber = 12;
  inline ::google::protobuf::int32 n3() const;
  inline void set_n3(::google::protobuf::int32 value);

  // optional int32 n5 = 14;
  inline bool has_n5() const;
  inline void clear_n5();
  static const int kN5FieldNumber = 14;
  inline ::google::protobuf::int32 n5() const;
  inline void set_n5(::google::protobuf::int32 value);

  // optional int32 n4 = 13;
  inline bool has_n4() const;
  inline void clear_n4();
  static const int kN4FieldNumber = 13;
  inline ::google::protobuf::int32 n4() const;
  inline void set_n4(::google::protobuf::int32 value);

  // optional string skill_name = 8;
  inline bool has_skill_name() const;
  inline void clear_skill_name();
  static const int kSkillNameFieldNumber = 8;
  inline const ::std::string& skill_name() const;
  inline void set_skill_name(const ::std::string& value);
  inline void set_skill_name(const char* value);
  inline void set_skill_name(const char* value, size_t size);
  inline ::std::string* mutable_skill_name();
  inline ::std::string* release_skill_name();
  inline void set_allocated_skill_name(::std::string* skill_name);

  // optional int32 can_effect_wall = 25;
  inline bool has_can_effect_wall() const;
  inline void clear_can_effect_wall();
  static const int kCanEffectWallFieldNumber = 25;
  inline ::google::protobuf::int32 can_effect_wall() const;
  inline void set_can_effect_wall(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DianShiTech.Config.CardSkillConfig)
 private:
  inline void set_has_atk_distance();
  inline void clear_has_atk_distance();
  inline void set_has_skill_description();
  inline void clear_has_skill_description();
  inline void set_has_skill_root();
  inline void clear_has_skill_root();
  inline void set_has_skill_type();
  inline void clear_has_skill_type();
  inline void set_has_skill_level();
  inline void clear_has_skill_level();
  inline void set_has_target_count();
  inline void clear_has_target_count();
  inline void set_has_priority_target_rule();
  inline void clear_has_priority_target_rule();
  inline void set_has_d2();
  inline void clear_has_d2();
  inline void set_has_combine_effect_id();
  inline void clear_has_combine_effect_id();
  inline void set_has_skill_effect_id();
  inline void clear_has_skill_effect_id();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_card_value_rank();
  inline void clear_has_card_value_rank();
  inline void set_has_next_skill();
  inline void clear_has_next_skill();
  inline void set_has_atk_range_type();
  inline void clear_has_atk_range_type();
  inline void set_has_harm_type();
  inline void clear_has_harm_type();
  inline void set_has_d3();
  inline void clear_has_d3();
  inline void set_has_atk_min_distance();
  inline void clear_has_atk_min_distance();
  inline void set_has_d1();
  inline void clear_has_d1();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_skill_ratio();
  inline void clear_has_skill_ratio();
  inline void set_has_skill_range();
  inline void clear_has_skill_range();
  inline void set_has_n1();
  inline void clear_has_n1();
  inline void set_has_n2();
  inline void clear_has_n2();
  inline void set_has_n3();
  inline void clear_has_n3();
  inline void set_has_n5();
  inline void clear_has_n5();
  inline void set_has_n4();
  inline void clear_has_n4();
  inline void set_has_skill_name();
  inline void clear_has_skill_name();
  inline void set_has_can_effect_wall();
  inline void clear_has_can_effect_wall();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* skill_description_;
  ::google::protobuf::int32 atk_distance_;
  ::google::protobuf::int32 skill_root_;
  ::google::protobuf::int32 skill_type_;
  ::google::protobuf::int32 skill_level_;
  ::google::protobuf::int32 target_count_;
  ::google::protobuf::int32 priority_target_rule_;
  ::std::string* d2_;
  ::google::protobuf::int32 combine_effect_id_;
  ::google::protobuf::int32 skill_effect_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > talent_info_;
  ::google::protobuf::int32 target_;
  ::google::protobuf::int32 card_value_rank_;
  ::google::protobuf::int32 next_skill_;
  ::google::protobuf::int32 atk_range_type_;
  ::std::string* d3_;
  ::google::protobuf::int32 harm_type_;
  ::google::protobuf::int32 atk_min_distance_;
  ::std::string* d1_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > multitarget_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 skill_ratio_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > buffs_;
  ::google::protobuf::int32 skill_range_;
  ::google::protobuf::int32 n1_;
  ::google::protobuf::int32 n2_;
  ::google::protobuf::int32 n3_;
  ::google::protobuf::int32 n5_;
  ::google::protobuf::int32 n4_;
  ::std::string* skill_name_;
  ::google::protobuf::int32 can_effect_wall_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(31 + 31) / 32];

  friend void  protobuf_AddDesc_CardSkillConfig_2eproto();
  friend void protobuf_AssignDesc_CardSkillConfig_2eproto();
  friend void protobuf_ShutdownFile_CardSkillConfig_2eproto();

  void InitAsDefaultInstance();
  static CardSkillConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// CardSkillConfig

// optional int32 atk_distance = 24;
inline bool CardSkillConfig::has_atk_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CardSkillConfig::set_has_atk_distance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CardSkillConfig::clear_has_atk_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CardSkillConfig::clear_atk_distance() {
  atk_distance_ = 0;
  clear_has_atk_distance();
}
inline ::google::protobuf::int32 CardSkillConfig::atk_distance() const {
  return atk_distance_;
}
inline void CardSkillConfig::set_atk_distance(::google::protobuf::int32 value) {
  set_has_atk_distance();
  atk_distance_ = value;
}

// optional string skill_description = 9;
inline bool CardSkillConfig::has_skill_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CardSkillConfig::set_has_skill_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CardSkillConfig::clear_has_skill_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CardSkillConfig::clear_skill_description() {
  if (skill_description_ != &::google::protobuf::internal::kEmptyString) {
    skill_description_->clear();
  }
  clear_has_skill_description();
}
inline const ::std::string& CardSkillConfig::skill_description() const {
  return *skill_description_;
}
inline void CardSkillConfig::set_skill_description(const ::std::string& value) {
  set_has_skill_description();
  if (skill_description_ == &::google::protobuf::internal::kEmptyString) {
    skill_description_ = new ::std::string;
  }
  skill_description_->assign(value);
}
inline void CardSkillConfig::set_skill_description(const char* value) {
  set_has_skill_description();
  if (skill_description_ == &::google::protobuf::internal::kEmptyString) {
    skill_description_ = new ::std::string;
  }
  skill_description_->assign(value);
}
inline void CardSkillConfig::set_skill_description(const char* value, size_t size) {
  set_has_skill_description();
  if (skill_description_ == &::google::protobuf::internal::kEmptyString) {
    skill_description_ = new ::std::string;
  }
  skill_description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CardSkillConfig::mutable_skill_description() {
  set_has_skill_description();
  if (skill_description_ == &::google::protobuf::internal::kEmptyString) {
    skill_description_ = new ::std::string;
  }
  return skill_description_;
}
inline ::std::string* CardSkillConfig::release_skill_description() {
  clear_has_skill_description();
  if (skill_description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = skill_description_;
    skill_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CardSkillConfig::set_allocated_skill_description(::std::string* skill_description) {
  if (skill_description_ != &::google::protobuf::internal::kEmptyString) {
    delete skill_description_;
  }
  if (skill_description) {
    set_has_skill_description();
    skill_description_ = skill_description;
  } else {
    clear_has_skill_description();
    skill_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 skill_root = 5;
inline bool CardSkillConfig::has_skill_root() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CardSkillConfig::set_has_skill_root() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CardSkillConfig::clear_has_skill_root() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CardSkillConfig::clear_skill_root() {
  skill_root_ = 0;
  clear_has_skill_root();
}
inline ::google::protobuf::int32 CardSkillConfig::skill_root() const {
  return skill_root_;
}
inline void CardSkillConfig::set_skill_root(::google::protobuf::int32 value) {
  set_has_skill_root();
  skill_root_ = value;
}

// optional int32 skill_type = 2;
inline bool CardSkillConfig::has_skill_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CardSkillConfig::set_has_skill_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CardSkillConfig::clear_has_skill_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CardSkillConfig::clear_skill_type() {
  skill_type_ = 0;
  clear_has_skill_type();
}
inline ::google::protobuf::int32 CardSkillConfig::skill_type() const {
  return skill_type_;
}
inline void CardSkillConfig::set_skill_type(::google::protobuf::int32 value) {
  set_has_skill_type();
  skill_type_ = value;
}

// optional int32 skill_level = 6;
inline bool CardSkillConfig::has_skill_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CardSkillConfig::set_has_skill_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CardSkillConfig::clear_has_skill_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CardSkillConfig::clear_skill_level() {
  skill_level_ = 0;
  clear_has_skill_level();
}
inline ::google::protobuf::int32 CardSkillConfig::skill_level() const {
  return skill_level_;
}
inline void CardSkillConfig::set_skill_level(::google::protobuf::int32 value) {
  set_has_skill_level();
  skill_level_ = value;
}

// optional int32 target_count = 22;
inline bool CardSkillConfig::has_target_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CardSkillConfig::set_has_target_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CardSkillConfig::clear_has_target_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CardSkillConfig::clear_target_count() {
  target_count_ = 0;
  clear_has_target_count();
}
inline ::google::protobuf::int32 CardSkillConfig::target_count() const {
  return target_count_;
}
inline void CardSkillConfig::set_target_count(::google::protobuf::int32 value) {
  set_has_target_count();
  target_count_ = value;
}

// optional int32 priority_target_rule = 19;
inline bool CardSkillConfig::has_priority_target_rule() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CardSkillConfig::set_has_priority_target_rule() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CardSkillConfig::clear_has_priority_target_rule() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CardSkillConfig::clear_priority_target_rule() {
  priority_target_rule_ = 0;
  clear_has_priority_target_rule();
}
inline ::google::protobuf::int32 CardSkillConfig::priority_target_rule() const {
  return priority_target_rule_;
}
inline void CardSkillConfig::set_priority_target_rule(::google::protobuf::int32 value) {
  set_has_priority_target_rule();
  priority_target_rule_ = value;
}

// optional string d2 = 16;
inline bool CardSkillConfig::has_d2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CardSkillConfig::set_has_d2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CardSkillConfig::clear_has_d2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CardSkillConfig::clear_d2() {
  if (d2_ != &::google::protobuf::internal::kEmptyString) {
    d2_->clear();
  }
  clear_has_d2();
}
inline const ::std::string& CardSkillConfig::d2() const {
  return *d2_;
}
inline void CardSkillConfig::set_d2(const ::std::string& value) {
  set_has_d2();
  if (d2_ == &::google::protobuf::internal::kEmptyString) {
    d2_ = new ::std::string;
  }
  d2_->assign(value);
}
inline void CardSkillConfig::set_d2(const char* value) {
  set_has_d2();
  if (d2_ == &::google::protobuf::internal::kEmptyString) {
    d2_ = new ::std::string;
  }
  d2_->assign(value);
}
inline void CardSkillConfig::set_d2(const char* value, size_t size) {
  set_has_d2();
  if (d2_ == &::google::protobuf::internal::kEmptyString) {
    d2_ = new ::std::string;
  }
  d2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CardSkillConfig::mutable_d2() {
  set_has_d2();
  if (d2_ == &::google::protobuf::internal::kEmptyString) {
    d2_ = new ::std::string;
  }
  return d2_;
}
inline ::std::string* CardSkillConfig::release_d2() {
  clear_has_d2();
  if (d2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = d2_;
    d2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CardSkillConfig::set_allocated_d2(::std::string* d2) {
  if (d2_ != &::google::protobuf::internal::kEmptyString) {
    delete d2_;
  }
  if (d2) {
    set_has_d2();
    d2_ = d2;
  } else {
    clear_has_d2();
    d2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 combine_effect_id = 28;
inline bool CardSkillConfig::has_combine_effect_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CardSkillConfig::set_has_combine_effect_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CardSkillConfig::clear_has_combine_effect_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CardSkillConfig::clear_combine_effect_id() {
  combine_effect_id_ = 0;
  clear_has_combine_effect_id();
}
inline ::google::protobuf::int32 CardSkillConfig::combine_effect_id() const {
  return combine_effect_id_;
}
inline void CardSkillConfig::set_combine_effect_id(::google::protobuf::int32 value) {
  set_has_combine_effect_id();
  combine_effect_id_ = value;
}

// optional int32 skill_effect_id = 27;
inline bool CardSkillConfig::has_skill_effect_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CardSkillConfig::set_has_skill_effect_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CardSkillConfig::clear_has_skill_effect_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CardSkillConfig::clear_skill_effect_id() {
  skill_effect_id_ = 0;
  clear_has_skill_effect_id();
}
inline ::google::protobuf::int32 CardSkillConfig::skill_effect_id() const {
  return skill_effect_id_;
}
inline void CardSkillConfig::set_skill_effect_id(::google::protobuf::int32 value) {
  set_has_skill_effect_id();
  skill_effect_id_ = value;
}

// repeated int32 talent_info = 32;
inline int CardSkillConfig::talent_info_size() const {
  return talent_info_.size();
}
inline void CardSkillConfig::clear_talent_info() {
  talent_info_.Clear();
}
inline ::google::protobuf::int32 CardSkillConfig::talent_info(int index) const {
  return talent_info_.Get(index);
}
inline void CardSkillConfig::set_talent_info(int index, ::google::protobuf::int32 value) {
  talent_info_.Set(index, value);
}
inline void CardSkillConfig::add_talent_info(::google::protobuf::int32 value) {
  talent_info_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CardSkillConfig::talent_info() const {
  return talent_info_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CardSkillConfig::mutable_talent_info() {
  return &talent_info_;
}

// optional int32 target = 20;
inline bool CardSkillConfig::has_target() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CardSkillConfig::set_has_target() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CardSkillConfig::clear_has_target() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CardSkillConfig::clear_target() {
  target_ = 0;
  clear_has_target();
}
inline ::google::protobuf::int32 CardSkillConfig::target() const {
  return target_;
}
inline void CardSkillConfig::set_target(::google::protobuf::int32 value) {
  set_has_target();
  target_ = value;
}

// optional int32 card_value_rank = 7;
inline bool CardSkillConfig::has_card_value_rank() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CardSkillConfig::set_has_card_value_rank() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CardSkillConfig::clear_has_card_value_rank() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CardSkillConfig::clear_card_value_rank() {
  card_value_rank_ = 0;
  clear_has_card_value_rank();
}
inline ::google::protobuf::int32 CardSkillConfig::card_value_rank() const {
  return card_value_rank_;
}
inline void CardSkillConfig::set_card_value_rank(::google::protobuf::int32 value) {
  set_has_card_value_rank();
  card_value_rank_ = value;
}

// optional int32 next_skill = 4;
inline bool CardSkillConfig::has_next_skill() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CardSkillConfig::set_has_next_skill() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CardSkillConfig::clear_has_next_skill() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CardSkillConfig::clear_next_skill() {
  next_skill_ = 0;
  clear_has_next_skill();
}
inline ::google::protobuf::int32 CardSkillConfig::next_skill() const {
  return next_skill_;
}
inline void CardSkillConfig::set_next_skill(::google::protobuf::int32 value) {
  set_has_next_skill();
  next_skill_ = value;
}

// optional int32 atk_range_type = 26;
inline bool CardSkillConfig::has_atk_range_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CardSkillConfig::set_has_atk_range_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CardSkillConfig::clear_has_atk_range_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CardSkillConfig::clear_atk_range_type() {
  atk_range_type_ = 0;
  clear_has_atk_range_type();
}
inline ::google::protobuf::int32 CardSkillConfig::atk_range_type() const {
  return atk_range_type_;
}
inline void CardSkillConfig::set_atk_range_type(::google::protobuf::int32 value) {
  set_has_atk_range_type();
  atk_range_type_ = value;
}

// optional int32 harm_type = 3;
inline bool CardSkillConfig::has_harm_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CardSkillConfig::set_has_harm_type() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CardSkillConfig::clear_has_harm_type() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CardSkillConfig::clear_harm_type() {
  harm_type_ = 0;
  clear_has_harm_type();
}
inline ::google::protobuf::int32 CardSkillConfig::harm_type() const {
  return harm_type_;
}
inline void CardSkillConfig::set_harm_type(::google::protobuf::int32 value) {
  set_has_harm_type();
  harm_type_ = value;
}

// optional string d3 = 17;
inline bool CardSkillConfig::has_d3() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CardSkillConfig::set_has_d3() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CardSkillConfig::clear_has_d3() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CardSkillConfig::clear_d3() {
  if (d3_ != &::google::protobuf::internal::kEmptyString) {
    d3_->clear();
  }
  clear_has_d3();
}
inline const ::std::string& CardSkillConfig::d3() const {
  return *d3_;
}
inline void CardSkillConfig::set_d3(const ::std::string& value) {
  set_has_d3();
  if (d3_ == &::google::protobuf::internal::kEmptyString) {
    d3_ = new ::std::string;
  }
  d3_->assign(value);
}
inline void CardSkillConfig::set_d3(const char* value) {
  set_has_d3();
  if (d3_ == &::google::protobuf::internal::kEmptyString) {
    d3_ = new ::std::string;
  }
  d3_->assign(value);
}
inline void CardSkillConfig::set_d3(const char* value, size_t size) {
  set_has_d3();
  if (d3_ == &::google::protobuf::internal::kEmptyString) {
    d3_ = new ::std::string;
  }
  d3_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CardSkillConfig::mutable_d3() {
  set_has_d3();
  if (d3_ == &::google::protobuf::internal::kEmptyString) {
    d3_ = new ::std::string;
  }
  return d3_;
}
inline ::std::string* CardSkillConfig::release_d3() {
  clear_has_d3();
  if (d3_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = d3_;
    d3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CardSkillConfig::set_allocated_d3(::std::string* d3) {
  if (d3_ != &::google::protobuf::internal::kEmptyString) {
    delete d3_;
  }
  if (d3) {
    set_has_d3();
    d3_ = d3;
  } else {
    clear_has_d3();
    d3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 atk_min_distance = 23;
inline bool CardSkillConfig::has_atk_min_distance() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CardSkillConfig::set_has_atk_min_distance() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CardSkillConfig::clear_has_atk_min_distance() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CardSkillConfig::clear_atk_min_distance() {
  atk_min_distance_ = 0;
  clear_has_atk_min_distance();
}
inline ::google::protobuf::int32 CardSkillConfig::atk_min_distance() const {
  return atk_min_distance_;
}
inline void CardSkillConfig::set_atk_min_distance(::google::protobuf::int32 value) {
  set_has_atk_min_distance();
  atk_min_distance_ = value;
}

// optional string d1 = 15;
inline bool CardSkillConfig::has_d1() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CardSkillConfig::set_has_d1() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CardSkillConfig::clear_has_d1() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CardSkillConfig::clear_d1() {
  if (d1_ != &::google::protobuf::internal::kEmptyString) {
    d1_->clear();
  }
  clear_has_d1();
}
inline const ::std::string& CardSkillConfig::d1() const {
  return *d1_;
}
inline void CardSkillConfig::set_d1(const ::std::string& value) {
  set_has_d1();
  if (d1_ == &::google::protobuf::internal::kEmptyString) {
    d1_ = new ::std::string;
  }
  d1_->assign(value);
}
inline void CardSkillConfig::set_d1(const char* value) {
  set_has_d1();
  if (d1_ == &::google::protobuf::internal::kEmptyString) {
    d1_ = new ::std::string;
  }
  d1_->assign(value);
}
inline void CardSkillConfig::set_d1(const char* value, size_t size) {
  set_has_d1();
  if (d1_ == &::google::protobuf::internal::kEmptyString) {
    d1_ = new ::std::string;
  }
  d1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CardSkillConfig::mutable_d1() {
  set_has_d1();
  if (d1_ == &::google::protobuf::internal::kEmptyString) {
    d1_ = new ::std::string;
  }
  return d1_;
}
inline ::std::string* CardSkillConfig::release_d1() {
  clear_has_d1();
  if (d1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = d1_;
    d1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CardSkillConfig::set_allocated_d1(::std::string* d1) {
  if (d1_ != &::google::protobuf::internal::kEmptyString) {
    delete d1_;
  }
  if (d1) {
    set_has_d1();
    d1_ = d1;
  } else {
    clear_has_d1();
    d1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 id = 1;
inline bool CardSkillConfig::has_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CardSkillConfig::set_has_id() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CardSkillConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CardSkillConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CardSkillConfig::id() const {
  return id_;
}
inline void CardSkillConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated int32 multitarget = 21;
inline int CardSkillConfig::multitarget_size() const {
  return multitarget_.size();
}
inline void CardSkillConfig::clear_multitarget() {
  multitarget_.Clear();
}
inline ::google::protobuf::int32 CardSkillConfig::multitarget(int index) const {
  return multitarget_.Get(index);
}
inline void CardSkillConfig::set_multitarget(int index, ::google::protobuf::int32 value) {
  multitarget_.Set(index, value);
}
inline void CardSkillConfig::add_multitarget(::google::protobuf::int32 value) {
  multitarget_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CardSkillConfig::multitarget() const {
  return multitarget_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CardSkillConfig::mutable_multitarget() {
  return &multitarget_;
}

// optional int32 skill_ratio = 31;
inline bool CardSkillConfig::has_skill_ratio() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CardSkillConfig::set_has_skill_ratio() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CardSkillConfig::clear_has_skill_ratio() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CardSkillConfig::clear_skill_ratio() {
  skill_ratio_ = 0;
  clear_has_skill_ratio();
}
inline ::google::protobuf::int32 CardSkillConfig::skill_ratio() const {
  return skill_ratio_;
}
inline void CardSkillConfig::set_skill_ratio(::google::protobuf::int32 value) {
  set_has_skill_ratio();
  skill_ratio_ = value;
}

// repeated int32 buffs = 18;
inline int CardSkillConfig::buffs_size() const {
  return buffs_.size();
}
inline void CardSkillConfig::clear_buffs() {
  buffs_.Clear();
}
inline ::google::protobuf::int32 CardSkillConfig::buffs(int index) const {
  return buffs_.Get(index);
}
inline void CardSkillConfig::set_buffs(int index, ::google::protobuf::int32 value) {
  buffs_.Set(index, value);
}
inline void CardSkillConfig::add_buffs(::google::protobuf::int32 value) {
  buffs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CardSkillConfig::buffs() const {
  return buffs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CardSkillConfig::mutable_buffs() {
  return &buffs_;
}

// optional int32 skill_range = 30;
inline bool CardSkillConfig::has_skill_range() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CardSkillConfig::set_has_skill_range() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CardSkillConfig::clear_has_skill_range() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CardSkillConfig::clear_skill_range() {
  skill_range_ = 0;
  clear_has_skill_range();
}
inline ::google::protobuf::int32 CardSkillConfig::skill_range() const {
  return skill_range_;
}
inline void CardSkillConfig::set_skill_range(::google::protobuf::int32 value) {
  set_has_skill_range();
  skill_range_ = value;
}

// optional int32 n1 = 10;
inline bool CardSkillConfig::has_n1() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CardSkillConfig::set_has_n1() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CardSkillConfig::clear_has_n1() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CardSkillConfig::clear_n1() {
  n1_ = 0;
  clear_has_n1();
}
inline ::google::protobuf::int32 CardSkillConfig::n1() const {
  return n1_;
}
inline void CardSkillConfig::set_n1(::google::protobuf::int32 value) {
  set_has_n1();
  n1_ = value;
}

// optional int32 n2 = 11;
inline bool CardSkillConfig::has_n2() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CardSkillConfig::set_has_n2() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CardSkillConfig::clear_has_n2() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CardSkillConfig::clear_n2() {
  n2_ = 0;
  clear_has_n2();
}
inline ::google::protobuf::int32 CardSkillConfig::n2() const {
  return n2_;
}
inline void CardSkillConfig::set_n2(::google::protobuf::int32 value) {
  set_has_n2();
  n2_ = value;
}

// optional int32 n3 = 12;
inline bool CardSkillConfig::has_n3() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CardSkillConfig::set_has_n3() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CardSkillConfig::clear_has_n3() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CardSkillConfig::clear_n3() {
  n3_ = 0;
  clear_has_n3();
}
inline ::google::protobuf::int32 CardSkillConfig::n3() const {
  return n3_;
}
inline void CardSkillConfig::set_n3(::google::protobuf::int32 value) {
  set_has_n3();
  n3_ = value;
}

// optional int32 n5 = 14;
inline bool CardSkillConfig::has_n5() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CardSkillConfig::set_has_n5() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CardSkillConfig::clear_has_n5() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CardSkillConfig::clear_n5() {
  n5_ = 0;
  clear_has_n5();
}
inline ::google::protobuf::int32 CardSkillConfig::n5() const {
  return n5_;
}
inline void CardSkillConfig::set_n5(::google::protobuf::int32 value) {
  set_has_n5();
  n5_ = value;
}

// optional int32 n4 = 13;
inline bool CardSkillConfig::has_n4() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CardSkillConfig::set_has_n4() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CardSkillConfig::clear_has_n4() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CardSkillConfig::clear_n4() {
  n4_ = 0;
  clear_has_n4();
}
inline ::google::protobuf::int32 CardSkillConfig::n4() const {
  return n4_;
}
inline void CardSkillConfig::set_n4(::google::protobuf::int32 value) {
  set_has_n4();
  n4_ = value;
}

// optional string skill_name = 8;
inline bool CardSkillConfig::has_skill_name() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CardSkillConfig::set_has_skill_name() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CardSkillConfig::clear_has_skill_name() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CardSkillConfig::clear_skill_name() {
  if (skill_name_ != &::google::protobuf::internal::kEmptyString) {
    skill_name_->clear();
  }
  clear_has_skill_name();
}
inline const ::std::string& CardSkillConfig::skill_name() const {
  return *skill_name_;
}
inline void CardSkillConfig::set_skill_name(const ::std::string& value) {
  set_has_skill_name();
  if (skill_name_ == &::google::protobuf::internal::kEmptyString) {
    skill_name_ = new ::std::string;
  }
  skill_name_->assign(value);
}
inline void CardSkillConfig::set_skill_name(const char* value) {
  set_has_skill_name();
  if (skill_name_ == &::google::protobuf::internal::kEmptyString) {
    skill_name_ = new ::std::string;
  }
  skill_name_->assign(value);
}
inline void CardSkillConfig::set_skill_name(const char* value, size_t size) {
  set_has_skill_name();
  if (skill_name_ == &::google::protobuf::internal::kEmptyString) {
    skill_name_ = new ::std::string;
  }
  skill_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CardSkillConfig::mutable_skill_name() {
  set_has_skill_name();
  if (skill_name_ == &::google::protobuf::internal::kEmptyString) {
    skill_name_ = new ::std::string;
  }
  return skill_name_;
}
inline ::std::string* CardSkillConfig::release_skill_name() {
  clear_has_skill_name();
  if (skill_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = skill_name_;
    skill_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CardSkillConfig::set_allocated_skill_name(::std::string* skill_name) {
  if (skill_name_ != &::google::protobuf::internal::kEmptyString) {
    delete skill_name_;
  }
  if (skill_name) {
    set_has_skill_name();
    skill_name_ = skill_name;
  } else {
    clear_has_skill_name();
    skill_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 can_effect_wall = 25;
inline bool CardSkillConfig::has_can_effect_wall() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CardSkillConfig::set_has_can_effect_wall() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CardSkillConfig::clear_has_can_effect_wall() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CardSkillConfig::clear_can_effect_wall() {
  can_effect_wall_ = 0;
  clear_has_can_effect_wall();
}
inline ::google::protobuf::int32 CardSkillConfig::can_effect_wall() const {
  return can_effect_wall_;
}
inline void CardSkillConfig::set_can_effect_wall(::google::protobuf::int32 value) {
  set_has_can_effect_wall();
  can_effect_wall_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CardSkillConfig_2eproto__INCLUDED

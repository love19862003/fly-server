// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rank_matchConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rank_matchConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* rank_matchConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rank_matchConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rank_5fmatchConfig_2eproto() {
  protobuf_AddDesc_rank_5fmatchConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rank_matchConfig.proto");
  GOOGLE_CHECK(file != NULL);
  rank_matchConfig_descriptor_ = file->message_type(0);
  static const int rank_matchConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_matchConfig, fight_cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_matchConfig, buy_count_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_matchConfig, clear_cd_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_matchConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_matchConfig, calculate_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_matchConfig, vip_daily_count_),
  };
  rank_matchConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rank_matchConfig_descriptor_,
      rank_matchConfig::default_instance_,
      rank_matchConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_matchConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_matchConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rank_matchConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rank_5fmatchConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rank_matchConfig_descriptor_, &rank_matchConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rank_5fmatchConfig_2eproto() {
  delete rank_matchConfig::default_instance_;
  delete rank_matchConfig_reflection_;
}

void protobuf_AddDesc_rank_5fmatchConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026rank_matchConfig.proto\022\022DianShiTech.Co"
    "nfig\032\025ConfigTypeGroup.proto\"\220\001\n\020rank_mat"
    "chConfig\022\020\n\010fight_cd\030\003 \001(\005\022\026\n\016buy_count_"
    "cost\030\005 \001(\005\022\025\n\rclear_cd_cost\030\006 \001(\005\022\n\n\002id\030"
    "\001 \001(\005\022\026\n\016calculate_time\030\004 \001(\005\022\027\n\017vip_dai"
    "ly_count\030\002 \001(\005", 214);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rank_matchConfig.proto", &protobuf_RegisterTypes);
  rank_matchConfig::default_instance_ = new rank_matchConfig();
  rank_matchConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rank_5fmatchConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rank_5fmatchConfig_2eproto {
  StaticDescriptorInitializer_rank_5fmatchConfig_2eproto() {
    protobuf_AddDesc_rank_5fmatchConfig_2eproto();
  }
} static_descriptor_initializer_rank_5fmatchConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int rank_matchConfig::kFightCdFieldNumber;
const int rank_matchConfig::kBuyCountCostFieldNumber;
const int rank_matchConfig::kClearCdCostFieldNumber;
const int rank_matchConfig::kIdFieldNumber;
const int rank_matchConfig::kCalculateTimeFieldNumber;
const int rank_matchConfig::kVipDailyCountFieldNumber;
#endif  // !_MSC_VER

rank_matchConfig::rank_matchConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rank_matchConfig::InitAsDefaultInstance() {
}

rank_matchConfig::rank_matchConfig(const rank_matchConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rank_matchConfig::SharedCtor() {
  _cached_size_ = 0;
  fight_cd_ = 0;
  buy_count_cost_ = 0;
  clear_cd_cost_ = 0;
  id_ = 0;
  calculate_time_ = 0;
  vip_daily_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rank_matchConfig::~rank_matchConfig() {
  SharedDtor();
}

void rank_matchConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rank_matchConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rank_matchConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rank_matchConfig_descriptor_;
}

const rank_matchConfig& rank_matchConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_5fmatchConfig_2eproto();
  return *default_instance_;
}

rank_matchConfig* rank_matchConfig::default_instance_ = NULL;

rank_matchConfig* rank_matchConfig::New() const {
  return new rank_matchConfig;
}

void rank_matchConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fight_cd_ = 0;
    buy_count_cost_ = 0;
    clear_cd_cost_ = 0;
    id_ = 0;
    calculate_time_ = 0;
    vip_daily_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rank_matchConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vip_daily_count;
        break;
      }

      // optional int32 vip_daily_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_daily_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_daily_count_)));
          set_has_vip_daily_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fight_cd;
        break;
      }

      // optional int32 fight_cd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_cd_)));
          set_has_fight_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_calculate_time;
        break;
      }

      // optional int32 calculate_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_calculate_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &calculate_time_)));
          set_has_calculate_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_buy_count_cost;
        break;
      }

      // optional int32 buy_count_cost = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_count_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_count_cost_)));
          set_has_buy_count_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_clear_cd_cost;
        break;
      }

      // optional int32 clear_cd_cost = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clear_cd_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clear_cd_cost_)));
          set_has_clear_cd_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rank_matchConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 vip_daily_count = 2;
  if (has_vip_daily_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vip_daily_count(), output);
  }

  // optional int32 fight_cd = 3;
  if (has_fight_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fight_cd(), output);
  }

  // optional int32 calculate_time = 4;
  if (has_calculate_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->calculate_time(), output);
  }

  // optional int32 buy_count_cost = 5;
  if (has_buy_count_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->buy_count_cost(), output);
  }

  // optional int32 clear_cd_cost = 6;
  if (has_clear_cd_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->clear_cd_cost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rank_matchConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 vip_daily_count = 2;
  if (has_vip_daily_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vip_daily_count(), target);
  }

  // optional int32 fight_cd = 3;
  if (has_fight_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fight_cd(), target);
  }

  // optional int32 calculate_time = 4;
  if (has_calculate_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->calculate_time(), target);
  }

  // optional int32 buy_count_cost = 5;
  if (has_buy_count_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->buy_count_cost(), target);
  }

  // optional int32 clear_cd_cost = 6;
  if (has_clear_cd_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->clear_cd_cost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rank_matchConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fight_cd = 3;
    if (has_fight_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_cd());
    }

    // optional int32 buy_count_cost = 5;
    if (has_buy_count_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_count_cost());
    }

    // optional int32 clear_cd_cost = 6;
    if (has_clear_cd_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clear_cd_cost());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 calculate_time = 4;
    if (has_calculate_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->calculate_time());
    }

    // optional int32 vip_daily_count = 2;
    if (has_vip_daily_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_daily_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rank_matchConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rank_matchConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rank_matchConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rank_matchConfig::MergeFrom(const rank_matchConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fight_cd()) {
      set_fight_cd(from.fight_cd());
    }
    if (from.has_buy_count_cost()) {
      set_buy_count_cost(from.buy_count_cost());
    }
    if (from.has_clear_cd_cost()) {
      set_clear_cd_cost(from.clear_cd_cost());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_calculate_time()) {
      set_calculate_time(from.calculate_time());
    }
    if (from.has_vip_daily_count()) {
      set_vip_daily_count(from.vip_daily_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rank_matchConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rank_matchConfig::CopyFrom(const rank_matchConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rank_matchConfig::IsInitialized() const {

  return true;
}

void rank_matchConfig::Swap(rank_matchConfig* other) {
  if (other != this) {
    std::swap(fight_cd_, other->fight_cd_);
    std::swap(buy_count_cost_, other->buy_count_cost_);
    std::swap(clear_cd_cost_, other->clear_cd_cost_);
    std::swap(id_, other->id_);
    std::swap(calculate_time_, other->calculate_time_);
    std::swap(vip_daily_count_, other->vip_daily_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rank_matchConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rank_matchConfig_descriptor_;
  metadata.reflection = rank_matchConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

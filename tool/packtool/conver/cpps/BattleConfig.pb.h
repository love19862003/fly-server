// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleConfig.proto

#ifndef PROTOBUF_BattleConfig_2eproto__INCLUDED
#define PROTOBUF_BattleConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BattleConfig_2eproto();
void protobuf_AssignDesc_BattleConfig_2eproto();
void protobuf_ShutdownFile_BattleConfig_2eproto();

class BattleConfig;

// ===================================================================

class BattleConfig : public ::google::protobuf::Message {
 public:
  BattleConfig();
  virtual ~BattleConfig();

  BattleConfig(const BattleConfig& from);

  inline BattleConfig& operator=(const BattleConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleConfig& default_instance();

  void Swap(BattleConfig* other);

  // implements Message ----------------------------------------------

  BattleConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleConfig& from);
  void MergeFrom(const BattleConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 boss_hp = 3;
  inline bool has_boss_hp() const;
  inline void clear_boss_hp();
  static const int kBossHpFieldNumber = 3;
  inline ::google::protobuf::int32 boss_hp() const;
  inline void set_boss_hp(::google::protobuf::int32 value);

  // optional int32 max_count = 23;
  inline bool has_max_count() const;
  inline void clear_max_count();
  static const int kMaxCountFieldNumber = 23;
  inline ::google::protobuf::int32 max_count() const;
  inline void set_max_count(::google::protobuf::int32 value);

  // optional int32 charcterlevel = 2;
  inline bool has_charcterlevel() const;
  inline void clear_charcterlevel();
  static const int kCharcterlevelFieldNumber = 2;
  inline ::google::protobuf::int32 charcterlevel() const;
  inline void set_charcterlevel(::google::protobuf::int32 value);

  // optional int32 boss_str = 5;
  inline bool has_boss_str() const;
  inline void clear_boss_str();
  static const int kBossStrFieldNumber = 5;
  inline ::google::protobuf::int32 boss_str() const;
  inline void set_boss_str(::google::protobuf::int32 value);

  // optional int32 card_level = 16;
  inline bool has_card_level() const;
  inline void clear_card_level();
  static const int kCardLevelFieldNumber = 16;
  inline ::google::protobuf::int32 card_level() const;
  inline void set_card_level(::google::protobuf::int32 value);

  // repeated int32 killbonus = 20;
  inline int killbonus_size() const;
  inline void clear_killbonus();
  static const int kKillbonusFieldNumber = 20;
  inline ::google::protobuf::int32 killbonus(int index) const;
  inline void set_killbonus(int index, ::google::protobuf::int32 value);
  inline void add_killbonus(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      killbonus() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_killbonus();

  // optional int32 block = 14;
  inline bool has_block() const;
  inline void clear_block();
  static const int kBlockFieldNumber = 14;
  inline ::google::protobuf::int32 block() const;
  inline void set_block(::google::protobuf::int32 value);

  // optional int32 tough = 13;
  inline bool has_tough() const;
  inline void clear_tough();
  static const int kToughFieldNumber = 13;
  inline ::google::protobuf::int32 tough() const;
  inline void set_tough(::google::protobuf::int32 value);

  // optional int32 evade = 12;
  inline bool has_evade() const;
  inline void clear_evade();
  static const int kEvadeFieldNumber = 12;
  inline ::google::protobuf::int32 evade() const;
  inline void set_evade(::google::protobuf::int32 value);

  // optional int32 basedamage = 17;
  inline bool has_basedamage() const;
  inline void clear_basedamage();
  static const int kBasedamageFieldNumber = 17;
  inline ::google::protobuf::int32 basedamage() const;
  inline void set_basedamage(::google::protobuf::int32 value);

  // optional int32 boss_dom = 7;
  inline bool has_boss_dom() const;
  inline void clear_boss_dom();
  static const int kBossDomFieldNumber = 7;
  inline ::google::protobuf::int32 boss_dom() const;
  inline void set_boss_dom(::google::protobuf::int32 value);

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 damage = 22;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 22;
  inline ::google::protobuf::int32 damage() const;
  inline void set_damage(::google::protobuf::int32 value);

  // optional int32 boss_atk = 4;
  inline bool has_boss_atk() const;
  inline void clear_boss_atk();
  static const int kBossAtkFieldNumber = 4;
  inline ::google::protobuf::int32 boss_atk() const;
  inline void set_boss_atk(::google::protobuf::int32 value);

  // optional int32 cri = 9;
  inline bool has_cri() const;
  inline void clear_cri();
  static const int kCriFieldNumber = 9;
  inline ::google::protobuf::int32 cri() const;
  inline void set_cri(::google::protobuf::int32 value);

  // repeated int32 bonus = 19;
  inline int bonus_size() const;
  inline void clear_bonus();
  static const int kBonusFieldNumber = 19;
  inline ::google::protobuf::int32 bonus(int index) const;
  inline void set_bonus(int index, ::google::protobuf::int32 value);
  inline void add_bonus(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bonus() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bonus();

  // optional int32 max_coin = 18;
  inline bool has_max_coin() const;
  inline void clear_max_coin();
  static const int kMaxCoinFieldNumber = 18;
  inline ::google::protobuf::int32 max_coin() const;
  inline void set_max_coin(::google::protobuf::int32 value);

  // optional int32 damage_reduce = 15;
  inline bool has_damage_reduce() const;
  inline void clear_damage_reduce();
  static const int kDamageReduceFieldNumber = 15;
  inline ::google::protobuf::int32 damage_reduce() const;
  inline void set_damage_reduce(::google::protobuf::int32 value);

  // optional int32 boss_int = 6;
  inline bool has_boss_int() const;
  inline void clear_boss_int();
  static const int kBossIntFieldNumber = 6;
  inline ::google::protobuf::int32 boss_int() const;
  inline void set_boss_int(::google::protobuf::int32 value);

  // optional int32 damage_increase = 11;
  inline bool has_damage_increase() const;
  inline void clear_damage_increase();
  static const int kDamageIncreaseFieldNumber = 11;
  inline ::google::protobuf::int32 damage_increase() const;
  inline void set_damage_increase(::google::protobuf::int32 value);

  // optional int32 precision = 10;
  inline bool has_precision() const;
  inline void clear_precision();
  static const int kPrecisionFieldNumber = 10;
  inline ::google::protobuf::int32 precision() const;
  inline void set_precision(::google::protobuf::int32 value);

  // optional int32 delay = 21;
  inline bool has_delay() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 21;
  inline ::google::protobuf::int32 delay() const;
  inline void set_delay(::google::protobuf::int32 value);

  // optional int32 hit = 8;
  inline bool has_hit() const;
  inline void clear_hit();
  static const int kHitFieldNumber = 8;
  inline ::google::protobuf::int32 hit() const;
  inline void set_hit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DianShiTech.Config.BattleConfig)
 private:
  inline void set_has_boss_hp();
  inline void clear_has_boss_hp();
  inline void set_has_max_count();
  inline void clear_has_max_count();
  inline void set_has_charcterlevel();
  inline void clear_has_charcterlevel();
  inline void set_has_boss_str();
  inline void clear_has_boss_str();
  inline void set_has_card_level();
  inline void clear_has_card_level();
  inline void set_has_block();
  inline void clear_has_block();
  inline void set_has_tough();
  inline void clear_has_tough();
  inline void set_has_evade();
  inline void clear_has_evade();
  inline void set_has_basedamage();
  inline void clear_has_basedamage();
  inline void set_has_boss_dom();
  inline void clear_has_boss_dom();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_boss_atk();
  inline void clear_has_boss_atk();
  inline void set_has_cri();
  inline void clear_has_cri();
  inline void set_has_max_coin();
  inline void clear_has_max_coin();
  inline void set_has_damage_reduce();
  inline void clear_has_damage_reduce();
  inline void set_has_boss_int();
  inline void clear_has_boss_int();
  inline void set_has_damage_increase();
  inline void clear_has_damage_increase();
  inline void set_has_precision();
  inline void clear_has_precision();
  inline void set_has_delay();
  inline void clear_has_delay();
  inline void set_has_hit();
  inline void clear_has_hit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 boss_hp_;
  ::google::protobuf::int32 max_count_;
  ::google::protobuf::int32 charcterlevel_;
  ::google::protobuf::int32 boss_str_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > killbonus_;
  ::google::protobuf::int32 card_level_;
  ::google::protobuf::int32 block_;
  ::google::protobuf::int32 tough_;
  ::google::protobuf::int32 evade_;
  ::google::protobuf::int32 basedamage_;
  ::google::protobuf::int32 boss_dom_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 damage_;
  ::google::protobuf::int32 boss_atk_;
  ::google::protobuf::int32 cri_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bonus_;
  ::google::protobuf::int32 max_coin_;
  ::google::protobuf::int32 damage_reduce_;
  ::google::protobuf::int32 boss_int_;
  ::google::protobuf::int32 damage_increase_;
  ::google::protobuf::int32 precision_;
  ::google::protobuf::int32 delay_;
  ::google::protobuf::int32 hit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];

  friend void  protobuf_AddDesc_BattleConfig_2eproto();
  friend void protobuf_AssignDesc_BattleConfig_2eproto();
  friend void protobuf_ShutdownFile_BattleConfig_2eproto();

  void InitAsDefaultInstance();
  static BattleConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// BattleConfig

// optional int32 boss_hp = 3;
inline bool BattleConfig::has_boss_hp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleConfig::set_has_boss_hp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleConfig::clear_has_boss_hp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleConfig::clear_boss_hp() {
  boss_hp_ = 0;
  clear_has_boss_hp();
}
inline ::google::protobuf::int32 BattleConfig::boss_hp() const {
  return boss_hp_;
}
inline void BattleConfig::set_boss_hp(::google::protobuf::int32 value) {
  set_has_boss_hp();
  boss_hp_ = value;
}

// optional int32 max_count = 23;
inline bool BattleConfig::has_max_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BattleConfig::set_has_max_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BattleConfig::clear_has_max_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BattleConfig::clear_max_count() {
  max_count_ = 0;
  clear_has_max_count();
}
inline ::google::protobuf::int32 BattleConfig::max_count() const {
  return max_count_;
}
inline void BattleConfig::set_max_count(::google::protobuf::int32 value) {
  set_has_max_count();
  max_count_ = value;
}

// optional int32 charcterlevel = 2;
inline bool BattleConfig::has_charcterlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BattleConfig::set_has_charcterlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BattleConfig::clear_has_charcterlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BattleConfig::clear_charcterlevel() {
  charcterlevel_ = 0;
  clear_has_charcterlevel();
}
inline ::google::protobuf::int32 BattleConfig::charcterlevel() const {
  return charcterlevel_;
}
inline void BattleConfig::set_charcterlevel(::google::protobuf::int32 value) {
  set_has_charcterlevel();
  charcterlevel_ = value;
}

// optional int32 boss_str = 5;
inline bool BattleConfig::has_boss_str() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BattleConfig::set_has_boss_str() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BattleConfig::clear_has_boss_str() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BattleConfig::clear_boss_str() {
  boss_str_ = 0;
  clear_has_boss_str();
}
inline ::google::protobuf::int32 BattleConfig::boss_str() const {
  return boss_str_;
}
inline void BattleConfig::set_boss_str(::google::protobuf::int32 value) {
  set_has_boss_str();
  boss_str_ = value;
}

// optional int32 card_level = 16;
inline bool BattleConfig::has_card_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BattleConfig::set_has_card_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BattleConfig::clear_has_card_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BattleConfig::clear_card_level() {
  card_level_ = 0;
  clear_has_card_level();
}
inline ::google::protobuf::int32 BattleConfig::card_level() const {
  return card_level_;
}
inline void BattleConfig::set_card_level(::google::protobuf::int32 value) {
  set_has_card_level();
  card_level_ = value;
}

// repeated int32 killbonus = 20;
inline int BattleConfig::killbonus_size() const {
  return killbonus_.size();
}
inline void BattleConfig::clear_killbonus() {
  killbonus_.Clear();
}
inline ::google::protobuf::int32 BattleConfig::killbonus(int index) const {
  return killbonus_.Get(index);
}
inline void BattleConfig::set_killbonus(int index, ::google::protobuf::int32 value) {
  killbonus_.Set(index, value);
}
inline void BattleConfig::add_killbonus(::google::protobuf::int32 value) {
  killbonus_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BattleConfig::killbonus() const {
  return killbonus_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BattleConfig::mutable_killbonus() {
  return &killbonus_;
}

// optional int32 block = 14;
inline bool BattleConfig::has_block() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BattleConfig::set_has_block() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BattleConfig::clear_has_block() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BattleConfig::clear_block() {
  block_ = 0;
  clear_has_block();
}
inline ::google::protobuf::int32 BattleConfig::block() const {
  return block_;
}
inline void BattleConfig::set_block(::google::protobuf::int32 value) {
  set_has_block();
  block_ = value;
}

// optional int32 tough = 13;
inline bool BattleConfig::has_tough() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BattleConfig::set_has_tough() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BattleConfig::clear_has_tough() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BattleConfig::clear_tough() {
  tough_ = 0;
  clear_has_tough();
}
inline ::google::protobuf::int32 BattleConfig::tough() const {
  return tough_;
}
inline void BattleConfig::set_tough(::google::protobuf::int32 value) {
  set_has_tough();
  tough_ = value;
}

// optional int32 evade = 12;
inline bool BattleConfig::has_evade() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BattleConfig::set_has_evade() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BattleConfig::clear_has_evade() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BattleConfig::clear_evade() {
  evade_ = 0;
  clear_has_evade();
}
inline ::google::protobuf::int32 BattleConfig::evade() const {
  return evade_;
}
inline void BattleConfig::set_evade(::google::protobuf::int32 value) {
  set_has_evade();
  evade_ = value;
}

// optional int32 basedamage = 17;
inline bool BattleConfig::has_basedamage() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BattleConfig::set_has_basedamage() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BattleConfig::clear_has_basedamage() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BattleConfig::clear_basedamage() {
  basedamage_ = 0;
  clear_has_basedamage();
}
inline ::google::protobuf::int32 BattleConfig::basedamage() const {
  return basedamage_;
}
inline void BattleConfig::set_basedamage(::google::protobuf::int32 value) {
  set_has_basedamage();
  basedamage_ = value;
}

// optional int32 boss_dom = 7;
inline bool BattleConfig::has_boss_dom() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BattleConfig::set_has_boss_dom() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BattleConfig::clear_has_boss_dom() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BattleConfig::clear_boss_dom() {
  boss_dom_ = 0;
  clear_has_boss_dom();
}
inline ::google::protobuf::int32 BattleConfig::boss_dom() const {
  return boss_dom_;
}
inline void BattleConfig::set_boss_dom(::google::protobuf::int32 value) {
  set_has_boss_dom();
  boss_dom_ = value;
}

// optional int32 id = 1;
inline bool BattleConfig::has_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BattleConfig::set_has_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BattleConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BattleConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 BattleConfig::id() const {
  return id_;
}
inline void BattleConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 damage = 22;
inline bool BattleConfig::has_damage() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BattleConfig::set_has_damage() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BattleConfig::clear_has_damage() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BattleConfig::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
inline ::google::protobuf::int32 BattleConfig::damage() const {
  return damage_;
}
inline void BattleConfig::set_damage(::google::protobuf::int32 value) {
  set_has_damage();
  damage_ = value;
}

// optional int32 boss_atk = 4;
inline bool BattleConfig::has_boss_atk() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BattleConfig::set_has_boss_atk() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BattleConfig::clear_has_boss_atk() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BattleConfig::clear_boss_atk() {
  boss_atk_ = 0;
  clear_has_boss_atk();
}
inline ::google::protobuf::int32 BattleConfig::boss_atk() const {
  return boss_atk_;
}
inline void BattleConfig::set_boss_atk(::google::protobuf::int32 value) {
  set_has_boss_atk();
  boss_atk_ = value;
}

// optional int32 cri = 9;
inline bool BattleConfig::has_cri() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BattleConfig::set_has_cri() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BattleConfig::clear_has_cri() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BattleConfig::clear_cri() {
  cri_ = 0;
  clear_has_cri();
}
inline ::google::protobuf::int32 BattleConfig::cri() const {
  return cri_;
}
inline void BattleConfig::set_cri(::google::protobuf::int32 value) {
  set_has_cri();
  cri_ = value;
}

// repeated int32 bonus = 19;
inline int BattleConfig::bonus_size() const {
  return bonus_.size();
}
inline void BattleConfig::clear_bonus() {
  bonus_.Clear();
}
inline ::google::protobuf::int32 BattleConfig::bonus(int index) const {
  return bonus_.Get(index);
}
inline void BattleConfig::set_bonus(int index, ::google::protobuf::int32 value) {
  bonus_.Set(index, value);
}
inline void BattleConfig::add_bonus(::google::protobuf::int32 value) {
  bonus_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BattleConfig::bonus() const {
  return bonus_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BattleConfig::mutable_bonus() {
  return &bonus_;
}

// optional int32 max_coin = 18;
inline bool BattleConfig::has_max_coin() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BattleConfig::set_has_max_coin() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BattleConfig::clear_has_max_coin() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BattleConfig::clear_max_coin() {
  max_coin_ = 0;
  clear_has_max_coin();
}
inline ::google::protobuf::int32 BattleConfig::max_coin() const {
  return max_coin_;
}
inline void BattleConfig::set_max_coin(::google::protobuf::int32 value) {
  set_has_max_coin();
  max_coin_ = value;
}

// optional int32 damage_reduce = 15;
inline bool BattleConfig::has_damage_reduce() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BattleConfig::set_has_damage_reduce() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BattleConfig::clear_has_damage_reduce() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BattleConfig::clear_damage_reduce() {
  damage_reduce_ = 0;
  clear_has_damage_reduce();
}
inline ::google::protobuf::int32 BattleConfig::damage_reduce() const {
  return damage_reduce_;
}
inline void BattleConfig::set_damage_reduce(::google::protobuf::int32 value) {
  set_has_damage_reduce();
  damage_reduce_ = value;
}

// optional int32 boss_int = 6;
inline bool BattleConfig::has_boss_int() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BattleConfig::set_has_boss_int() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BattleConfig::clear_has_boss_int() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BattleConfig::clear_boss_int() {
  boss_int_ = 0;
  clear_has_boss_int();
}
inline ::google::protobuf::int32 BattleConfig::boss_int() const {
  return boss_int_;
}
inline void BattleConfig::set_boss_int(::google::protobuf::int32 value) {
  set_has_boss_int();
  boss_int_ = value;
}

// optional int32 damage_increase = 11;
inline bool BattleConfig::has_damage_increase() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BattleConfig::set_has_damage_increase() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BattleConfig::clear_has_damage_increase() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BattleConfig::clear_damage_increase() {
  damage_increase_ = 0;
  clear_has_damage_increase();
}
inline ::google::protobuf::int32 BattleConfig::damage_increase() const {
  return damage_increase_;
}
inline void BattleConfig::set_damage_increase(::google::protobuf::int32 value) {
  set_has_damage_increase();
  damage_increase_ = value;
}

// optional int32 precision = 10;
inline bool BattleConfig::has_precision() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void BattleConfig::set_has_precision() {
  _has_bits_[0] |= 0x00100000u;
}
inline void BattleConfig::clear_has_precision() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void BattleConfig::clear_precision() {
  precision_ = 0;
  clear_has_precision();
}
inline ::google::protobuf::int32 BattleConfig::precision() const {
  return precision_;
}
inline void BattleConfig::set_precision(::google::protobuf::int32 value) {
  set_has_precision();
  precision_ = value;
}

// optional int32 delay = 21;
inline bool BattleConfig::has_delay() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void BattleConfig::set_has_delay() {
  _has_bits_[0] |= 0x00200000u;
}
inline void BattleConfig::clear_has_delay() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void BattleConfig::clear_delay() {
  delay_ = 0;
  clear_has_delay();
}
inline ::google::protobuf::int32 BattleConfig::delay() const {
  return delay_;
}
inline void BattleConfig::set_delay(::google::protobuf::int32 value) {
  set_has_delay();
  delay_ = value;
}

// optional int32 hit = 8;
inline bool BattleConfig::has_hit() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void BattleConfig::set_has_hit() {
  _has_bits_[0] |= 0x00400000u;
}
inline void BattleConfig::clear_has_hit() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void BattleConfig::clear_hit() {
  hit_ = 0;
  clear_has_hit();
}
inline ::google::protobuf::int32 BattleConfig::hit() const {
  return hit_;
}
inline void BattleConfig::set_hit(::google::protobuf::int32 value) {
  set_has_hit();
  hit_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BattleConfig_2eproto__INCLUDED

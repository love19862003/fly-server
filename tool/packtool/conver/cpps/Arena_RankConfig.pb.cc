// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Arena_RankConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Arena_RankConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* Arena_RankConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Arena_RankConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Arena_5fRankConfig_2eproto() {
  protobuf_AddDesc_Arena_5fRankConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Arena_RankConfig.proto");
  GOOGLE_CHECK(file != NULL);
  Arena_RankConfig_descriptor_ = file->message_type(0);
  static const int Arena_RankConfig_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arena_RankConfig, rank_min_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arena_RankConfig, search_add_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arena_RankConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arena_RankConfig, coins_end_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arena_RankConfig, rank_max_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arena_RankConfig, coins_win_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arena_RankConfig, coins_win_rate_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arena_RankConfig, points_win_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arena_RankConfig, search_max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arena_RankConfig, points_end_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arena_RankConfig, ranking_),
  };
  Arena_RankConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Arena_RankConfig_descriptor_,
      Arena_RankConfig::default_instance_,
      Arena_RankConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arena_RankConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arena_RankConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Arena_RankConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Arena_5fRankConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Arena_RankConfig_descriptor_, &Arena_RankConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Arena_5fRankConfig_2eproto() {
  delete Arena_RankConfig::default_instance_;
  delete Arena_RankConfig_reflection_;
}

void protobuf_AddDesc_Arena_5fRankConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026Arena_RankConfig.proto\022\022DianShiTech.Co"
    "nfig\032\025ConfigTypeGroup.proto\"\212\002\n\020Arena_Ra"
    "nkConfig\022\023\n\013rank_min_lv\030\002 \001(\005\022\027\n\017search_"
    "add_cost\030\005 \001(\005\022\n\n\002id\030\001 \001(\005\022\026\n\016coins_end_"
    "rate\030\n \001(\005\022\023\n\013rank_max_lv\030\003 \001(\005\022\026\n\016coins"
    "_win_rate\030\010 \001(\005\022\034\n\024coins_win_rate_limit\030"
    "\t \001(\005\022\026\n\016points_win_add\030\006 \001(\005\022\030\n\020search_"
    "max_count\030\004 \001(\005\022\026\n\016points_end_add\030\007 \001(\005\022"
    "\017\n\007ranking\030\013 \001(\005", 336);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Arena_RankConfig.proto", &protobuf_RegisterTypes);
  Arena_RankConfig::default_instance_ = new Arena_RankConfig();
  Arena_RankConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Arena_5fRankConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Arena_5fRankConfig_2eproto {
  StaticDescriptorInitializer_Arena_5fRankConfig_2eproto() {
    protobuf_AddDesc_Arena_5fRankConfig_2eproto();
  }
} static_descriptor_initializer_Arena_5fRankConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Arena_RankConfig::kRankMinLvFieldNumber;
const int Arena_RankConfig::kSearchAddCostFieldNumber;
const int Arena_RankConfig::kIdFieldNumber;
const int Arena_RankConfig::kCoinsEndRateFieldNumber;
const int Arena_RankConfig::kRankMaxLvFieldNumber;
const int Arena_RankConfig::kCoinsWinRateFieldNumber;
const int Arena_RankConfig::kCoinsWinRateLimitFieldNumber;
const int Arena_RankConfig::kPointsWinAddFieldNumber;
const int Arena_RankConfig::kSearchMaxCountFieldNumber;
const int Arena_RankConfig::kPointsEndAddFieldNumber;
const int Arena_RankConfig::kRankingFieldNumber;
#endif  // !_MSC_VER

Arena_RankConfig::Arena_RankConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Arena_RankConfig::InitAsDefaultInstance() {
}

Arena_RankConfig::Arena_RankConfig(const Arena_RankConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Arena_RankConfig::SharedCtor() {
  _cached_size_ = 0;
  rank_min_lv_ = 0;
  search_add_cost_ = 0;
  id_ = 0;
  coins_end_rate_ = 0;
  rank_max_lv_ = 0;
  coins_win_rate_ = 0;
  coins_win_rate_limit_ = 0;
  points_win_add_ = 0;
  search_max_count_ = 0;
  points_end_add_ = 0;
  ranking_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Arena_RankConfig::~Arena_RankConfig() {
  SharedDtor();
}

void Arena_RankConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Arena_RankConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Arena_RankConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Arena_RankConfig_descriptor_;
}

const Arena_RankConfig& Arena_RankConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_5fRankConfig_2eproto();
  return *default_instance_;
}

Arena_RankConfig* Arena_RankConfig::default_instance_ = NULL;

Arena_RankConfig* Arena_RankConfig::New() const {
  return new Arena_RankConfig;
}

void Arena_RankConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_min_lv_ = 0;
    search_add_cost_ = 0;
    id_ = 0;
    coins_end_rate_ = 0;
    rank_max_lv_ = 0;
    coins_win_rate_ = 0;
    coins_win_rate_limit_ = 0;
    points_win_add_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    search_max_count_ = 0;
    points_end_add_ = 0;
    ranking_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Arena_RankConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank_min_lv;
        break;
      }

      // optional int32 rank_min_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_min_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_min_lv_)));
          set_has_rank_min_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank_max_lv;
        break;
      }

      // optional int32 rank_max_lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_max_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_max_lv_)));
          set_has_rank_max_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_search_max_count;
        break;
      }

      // optional int32 search_max_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_search_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &search_max_count_)));
          set_has_search_max_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_search_add_cost;
        break;
      }

      // optional int32 search_add_cost = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_search_add_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &search_add_cost_)));
          set_has_search_add_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_points_win_add;
        break;
      }

      // optional int32 points_win_add = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points_win_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_win_add_)));
          set_has_points_win_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_points_end_add;
        break;
      }

      // optional int32 points_end_add = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points_end_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_end_add_)));
          set_has_points_end_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_coins_win_rate;
        break;
      }

      // optional int32 coins_win_rate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coins_win_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coins_win_rate_)));
          set_has_coins_win_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_coins_win_rate_limit;
        break;
      }

      // optional int32 coins_win_rate_limit = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coins_win_rate_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coins_win_rate_limit_)));
          set_has_coins_win_rate_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_coins_end_rate;
        break;
      }

      // optional int32 coins_end_rate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coins_end_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coins_end_rate_)));
          set_has_coins_end_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ranking;
        break;
      }

      // optional int32 ranking = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Arena_RankConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 rank_min_lv = 2;
  if (has_rank_min_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank_min_lv(), output);
  }

  // optional int32 rank_max_lv = 3;
  if (has_rank_max_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank_max_lv(), output);
  }

  // optional int32 search_max_count = 4;
  if (has_search_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->search_max_count(), output);
  }

  // optional int32 search_add_cost = 5;
  if (has_search_add_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->search_add_cost(), output);
  }

  // optional int32 points_win_add = 6;
  if (has_points_win_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->points_win_add(), output);
  }

  // optional int32 points_end_add = 7;
  if (has_points_end_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->points_end_add(), output);
  }

  // optional int32 coins_win_rate = 8;
  if (has_coins_win_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->coins_win_rate(), output);
  }

  // optional int32 coins_win_rate_limit = 9;
  if (has_coins_win_rate_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->coins_win_rate_limit(), output);
  }

  // optional int32 coins_end_rate = 10;
  if (has_coins_end_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->coins_end_rate(), output);
  }

  // optional int32 ranking = 11;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ranking(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Arena_RankConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 rank_min_lv = 2;
  if (has_rank_min_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank_min_lv(), target);
  }

  // optional int32 rank_max_lv = 3;
  if (has_rank_max_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank_max_lv(), target);
  }

  // optional int32 search_max_count = 4;
  if (has_search_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->search_max_count(), target);
  }

  // optional int32 search_add_cost = 5;
  if (has_search_add_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->search_add_cost(), target);
  }

  // optional int32 points_win_add = 6;
  if (has_points_win_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->points_win_add(), target);
  }

  // optional int32 points_end_add = 7;
  if (has_points_end_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->points_end_add(), target);
  }

  // optional int32 coins_win_rate = 8;
  if (has_coins_win_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->coins_win_rate(), target);
  }

  // optional int32 coins_win_rate_limit = 9;
  if (has_coins_win_rate_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->coins_win_rate_limit(), target);
  }

  // optional int32 coins_end_rate = 10;
  if (has_coins_end_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->coins_end_rate(), target);
  }

  // optional int32 ranking = 11;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->ranking(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Arena_RankConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank_min_lv = 2;
    if (has_rank_min_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_min_lv());
    }

    // optional int32 search_add_cost = 5;
    if (has_search_add_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->search_add_cost());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 coins_end_rate = 10;
    if (has_coins_end_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coins_end_rate());
    }

    // optional int32 rank_max_lv = 3;
    if (has_rank_max_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_max_lv());
    }

    // optional int32 coins_win_rate = 8;
    if (has_coins_win_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coins_win_rate());
    }

    // optional int32 coins_win_rate_limit = 9;
    if (has_coins_win_rate_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coins_win_rate_limit());
    }

    // optional int32 points_win_add = 6;
    if (has_points_win_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points_win_add());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 search_max_count = 4;
    if (has_search_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->search_max_count());
    }

    // optional int32 points_end_add = 7;
    if (has_points_end_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points_end_add());
    }

    // optional int32 ranking = 11;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Arena_RankConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Arena_RankConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Arena_RankConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Arena_RankConfig::MergeFrom(const Arena_RankConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_min_lv()) {
      set_rank_min_lv(from.rank_min_lv());
    }
    if (from.has_search_add_cost()) {
      set_search_add_cost(from.search_add_cost());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_coins_end_rate()) {
      set_coins_end_rate(from.coins_end_rate());
    }
    if (from.has_rank_max_lv()) {
      set_rank_max_lv(from.rank_max_lv());
    }
    if (from.has_coins_win_rate()) {
      set_coins_win_rate(from.coins_win_rate());
    }
    if (from.has_coins_win_rate_limit()) {
      set_coins_win_rate_limit(from.coins_win_rate_limit());
    }
    if (from.has_points_win_add()) {
      set_points_win_add(from.points_win_add());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_search_max_count()) {
      set_search_max_count(from.search_max_count());
    }
    if (from.has_points_end_add()) {
      set_points_end_add(from.points_end_add());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Arena_RankConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Arena_RankConfig::CopyFrom(const Arena_RankConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Arena_RankConfig::IsInitialized() const {

  return true;
}

void Arena_RankConfig::Swap(Arena_RankConfig* other) {
  if (other != this) {
    std::swap(rank_min_lv_, other->rank_min_lv_);
    std::swap(search_add_cost_, other->search_add_cost_);
    std::swap(id_, other->id_);
    std::swap(coins_end_rate_, other->coins_end_rate_);
    std::swap(rank_max_lv_, other->rank_max_lv_);
    std::swap(coins_win_rate_, other->coins_win_rate_);
    std::swap(coins_win_rate_limit_, other->coins_win_rate_limit_);
    std::swap(points_win_add_, other->points_win_add_);
    std::swap(search_max_count_, other->search_max_count_);
    std::swap(points_end_add_, other->points_end_add_);
    std::swap(ranking_, other->ranking_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Arena_RankConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Arena_RankConfig_descriptor_;
  metadata.reflection = Arena_RankConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

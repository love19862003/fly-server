// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExchangeConfig.proto

#ifndef PROTOBUF_ExchangeConfig_2eproto__INCLUDED
#define PROTOBUF_ExchangeConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ExchangeConfig_2eproto();
void protobuf_AssignDesc_ExchangeConfig_2eproto();
void protobuf_ShutdownFile_ExchangeConfig_2eproto();

class ExchangeConfig;

// ===================================================================

class ExchangeConfig : public ::google::protobuf::Message {
 public:
  ExchangeConfig();
  virtual ~ExchangeConfig();

  ExchangeConfig(const ExchangeConfig& from);

  inline ExchangeConfig& operator=(const ExchangeConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExchangeConfig& default_instance();

  void Swap(ExchangeConfig* other);

  // implements Message ----------------------------------------------

  ExchangeConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExchangeConfig& from);
  void MergeFrom(const ExchangeConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DianShiTech.Config.ConfigTypeGroup exchange_item = 4;
  inline int exchange_item_size() const;
  inline void clear_exchange_item();
  static const int kExchangeItemFieldNumber = 4;
  inline const ::DianShiTech::Config::ConfigTypeGroup& exchange_item(int index) const;
  inline ::DianShiTech::Config::ConfigTypeGroup* mutable_exchange_item(int index);
  inline ::DianShiTech::Config::ConfigTypeGroup* add_exchange_item();
  inline const ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >&
      exchange_item() const;
  inline ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >*
      mutable_exchange_item();

  // repeated .DianShiTech.Config.ConfigTypeGroup bonus = 5;
  inline int bonus_size() const;
  inline void clear_bonus();
  static const int kBonusFieldNumber = 5;
  inline const ::DianShiTech::Config::ConfigTypeGroup& bonus(int index) const;
  inline ::DianShiTech::Config::ConfigTypeGroup* mutable_bonus(int index);
  inline ::DianShiTech::Config::ConfigTypeGroup* add_bonus();
  inline const ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >&
      bonus() const;
  inline ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >*
      mutable_bonus();

  // optional int32 close_time = 7;
  inline bool has_close_time() const;
  inline void clear_close_time();
  static const int kCloseTimeFieldNumber = 7;
  inline ::google::protobuf::int32 close_time() const;
  inline void set_close_time(::google::protobuf::int32 value);

  // optional int32 open_time = 6;
  inline bool has_open_time() const;
  inline void clear_open_time();
  static const int kOpenTimeFieldNumber = 6;
  inline ::google::protobuf::int32 open_time() const;
  inline void set_open_time(::google::protobuf::int32 value);

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 daily_exchange = 8;
  inline bool has_daily_exchange() const;
  inline void clear_daily_exchange();
  static const int kDailyExchangeFieldNumber = 8;
  inline ::google::protobuf::int32 daily_exchange() const;
  inline void set_daily_exchange(::google::protobuf::int32 value);

  // optional string exchange_name = 3;
  inline bool has_exchange_name() const;
  inline void clear_exchange_name();
  static const int kExchangeNameFieldNumber = 3;
  inline const ::std::string& exchange_name() const;
  inline void set_exchange_name(const ::std::string& value);
  inline void set_exchange_name(const char* value);
  inline void set_exchange_name(const char* value, size_t size);
  inline ::std::string* mutable_exchange_name();
  inline ::std::string* release_exchange_name();
  inline void set_allocated_exchange_name(::std::string* exchange_name);

  // optional int32 activity_id = 2;
  inline bool has_activity_id() const;
  inline void clear_activity_id();
  static const int kActivityIdFieldNumber = 2;
  inline ::google::protobuf::int32 activity_id() const;
  inline void set_activity_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DianShiTech.Config.ExchangeConfig)
 private:
  inline void set_has_close_time();
  inline void clear_has_close_time();
  inline void set_has_open_time();
  inline void clear_has_open_time();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_daily_exchange();
  inline void clear_has_daily_exchange();
  inline void set_has_exchange_name();
  inline void clear_has_exchange_name();
  inline void set_has_activity_id();
  inline void clear_has_activity_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup > exchange_item_;
  ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup > bonus_;
  ::google::protobuf::int32 close_time_;
  ::google::protobuf::int32 open_time_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 daily_exchange_;
  ::std::string* exchange_name_;
  ::google::protobuf::int32 activity_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_ExchangeConfig_2eproto();
  friend void protobuf_AssignDesc_ExchangeConfig_2eproto();
  friend void protobuf_ShutdownFile_ExchangeConfig_2eproto();

  void InitAsDefaultInstance();
  static ExchangeConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// ExchangeConfig

// repeated .DianShiTech.Config.ConfigTypeGroup exchange_item = 4;
inline int ExchangeConfig::exchange_item_size() const {
  return exchange_item_.size();
}
inline void ExchangeConfig::clear_exchange_item() {
  exchange_item_.Clear();
}
inline const ::DianShiTech::Config::ConfigTypeGroup& ExchangeConfig::exchange_item(int index) const {
  return exchange_item_.Get(index);
}
inline ::DianShiTech::Config::ConfigTypeGroup* ExchangeConfig::mutable_exchange_item(int index) {
  return exchange_item_.Mutable(index);
}
inline ::DianShiTech::Config::ConfigTypeGroup* ExchangeConfig::add_exchange_item() {
  return exchange_item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >&
ExchangeConfig::exchange_item() const {
  return exchange_item_;
}
inline ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >*
ExchangeConfig::mutable_exchange_item() {
  return &exchange_item_;
}

// repeated .DianShiTech.Config.ConfigTypeGroup bonus = 5;
inline int ExchangeConfig::bonus_size() const {
  return bonus_.size();
}
inline void ExchangeConfig::clear_bonus() {
  bonus_.Clear();
}
inline const ::DianShiTech::Config::ConfigTypeGroup& ExchangeConfig::bonus(int index) const {
  return bonus_.Get(index);
}
inline ::DianShiTech::Config::ConfigTypeGroup* ExchangeConfig::mutable_bonus(int index) {
  return bonus_.Mutable(index);
}
inline ::DianShiTech::Config::ConfigTypeGroup* ExchangeConfig::add_bonus() {
  return bonus_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >&
ExchangeConfig::bonus() const {
  return bonus_;
}
inline ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >*
ExchangeConfig::mutable_bonus() {
  return &bonus_;
}

// optional int32 close_time = 7;
inline bool ExchangeConfig::has_close_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExchangeConfig::set_has_close_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExchangeConfig::clear_has_close_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExchangeConfig::clear_close_time() {
  close_time_ = 0;
  clear_has_close_time();
}
inline ::google::protobuf::int32 ExchangeConfig::close_time() const {
  return close_time_;
}
inline void ExchangeConfig::set_close_time(::google::protobuf::int32 value) {
  set_has_close_time();
  close_time_ = value;
}

// optional int32 open_time = 6;
inline bool ExchangeConfig::has_open_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExchangeConfig::set_has_open_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExchangeConfig::clear_has_open_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExchangeConfig::clear_open_time() {
  open_time_ = 0;
  clear_has_open_time();
}
inline ::google::protobuf::int32 ExchangeConfig::open_time() const {
  return open_time_;
}
inline void ExchangeConfig::set_open_time(::google::protobuf::int32 value) {
  set_has_open_time();
  open_time_ = value;
}

// optional int32 id = 1;
inline bool ExchangeConfig::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExchangeConfig::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExchangeConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExchangeConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ExchangeConfig::id() const {
  return id_;
}
inline void ExchangeConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 daily_exchange = 8;
inline bool ExchangeConfig::has_daily_exchange() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ExchangeConfig::set_has_daily_exchange() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ExchangeConfig::clear_has_daily_exchange() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ExchangeConfig::clear_daily_exchange() {
  daily_exchange_ = 0;
  clear_has_daily_exchange();
}
inline ::google::protobuf::int32 ExchangeConfig::daily_exchange() const {
  return daily_exchange_;
}
inline void ExchangeConfig::set_daily_exchange(::google::protobuf::int32 value) {
  set_has_daily_exchange();
  daily_exchange_ = value;
}

// optional string exchange_name = 3;
inline bool ExchangeConfig::has_exchange_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ExchangeConfig::set_has_exchange_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ExchangeConfig::clear_has_exchange_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ExchangeConfig::clear_exchange_name() {
  if (exchange_name_ != &::google::protobuf::internal::kEmptyString) {
    exchange_name_->clear();
  }
  clear_has_exchange_name();
}
inline const ::std::string& ExchangeConfig::exchange_name() const {
  return *exchange_name_;
}
inline void ExchangeConfig::set_exchange_name(const ::std::string& value) {
  set_has_exchange_name();
  if (exchange_name_ == &::google::protobuf::internal::kEmptyString) {
    exchange_name_ = new ::std::string;
  }
  exchange_name_->assign(value);
}
inline void ExchangeConfig::set_exchange_name(const char* value) {
  set_has_exchange_name();
  if (exchange_name_ == &::google::protobuf::internal::kEmptyString) {
    exchange_name_ = new ::std::string;
  }
  exchange_name_->assign(value);
}
inline void ExchangeConfig::set_exchange_name(const char* value, size_t size) {
  set_has_exchange_name();
  if (exchange_name_ == &::google::protobuf::internal::kEmptyString) {
    exchange_name_ = new ::std::string;
  }
  exchange_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExchangeConfig::mutable_exchange_name() {
  set_has_exchange_name();
  if (exchange_name_ == &::google::protobuf::internal::kEmptyString) {
    exchange_name_ = new ::std::string;
  }
  return exchange_name_;
}
inline ::std::string* ExchangeConfig::release_exchange_name() {
  clear_has_exchange_name();
  if (exchange_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = exchange_name_;
    exchange_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExchangeConfig::set_allocated_exchange_name(::std::string* exchange_name) {
  if (exchange_name_ != &::google::protobuf::internal::kEmptyString) {
    delete exchange_name_;
  }
  if (exchange_name) {
    set_has_exchange_name();
    exchange_name_ = exchange_name;
  } else {
    clear_has_exchange_name();
    exchange_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 activity_id = 2;
inline bool ExchangeConfig::has_activity_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ExchangeConfig::set_has_activity_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ExchangeConfig::clear_has_activity_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ExchangeConfig::clear_activity_id() {
  activity_id_ = 0;
  clear_has_activity_id();
}
inline ::google::protobuf::int32 ExchangeConfig::activity_id() const {
  return activity_id_;
}
inline void ExchangeConfig::set_activity_id(::google::protobuf::int32 value) {
  set_has_activity_id();
  activity_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ExchangeConfig_2eproto__INCLUDED

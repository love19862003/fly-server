// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UnitConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UnitConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* UnitConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_UnitConfig_2eproto() {
  protobuf_AddDesc_UnitConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UnitConfig.proto");
  GOOGLE_CHECK(file != NULL);
  UnitConfig_descriptor_ = file->message_type(0);
  static const int UnitConfig_offsets_[40] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, unit_xy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, grown_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, can_dismantle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, currency_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, dismantle_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, dismantle_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, is_exp_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, card_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, unit_head_pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, battle_head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, unit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, fast_connect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, active_equipment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, activate_units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, card_improve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, max_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, attr_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, equip_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, unit_root_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, unit_dubbing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, unit_cardname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, unit_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, unit_show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, card_puzzle_drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, card_max_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, unit_pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, card_droup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, card_pathway_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, gain_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, talent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, combined_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, country1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, lead_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, skill_level_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, battle_pic_),
  };
  UnitConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnitConfig_descriptor_,
      UnitConfig::default_instance_,
      UnitConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UnitConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitConfig_descriptor_, &UnitConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UnitConfig_2eproto() {
  delete UnitConfig::default_instance_;
  delete UnitConfig_reflection_;
}

void protobuf_AddDesc_UnitConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020UnitConfig.proto\022\022DianShiTech.Config\032\025"
    "ConfigTypeGroup.proto\"\341\006\n\nUnitConfig\022\017\n\007"
    "unit_xy\030\t \003(\005\022\020\n\010grown_id\030\023 \001(\005\022\025\n\rcan_d"
    "ismantle\030  \001(\005\022\r\n\005skill\030\030 \001(\005\022\025\n\rcurrenc"
    "y_type\030! \001(\005\022\026\n\016dismantle_data\030# \003(\005\022\026\n\016"
    "dismantle_cost\030\" \001(\005\022\023\n\013is_exp_card\030\003 \001("
    "\005\022\021\n\tcard_rank\030\014 \001(\005\022\025\n\runit_head_pic\030\005 "
    "\001(\005\022\023\n\013battle_head\030\007 \001(\005\022\021\n\tunit_type\030\013 "
    "\001(\005\022\024\n\014fast_connect\030\' \003(\005\022\030\n\020active_equi"
    "pment\030\033 \001(\005\022\026\n\016activate_units\030\031 \003(\005\022\024\n\014c"
    "ard_improve\030) \001(\005\022\021\n\tmax_level\030\016 \001(\005\022\021\n\t"
    "attr_type\030\022 \001(\005\022\022\n\nequip_name\030\034 \001(\t\022\021\n\tu"
    "nit_root\030\002 \001(\005\022\024\n\014unit_dubbing\030& \003(\005\022\025\n\r"
    "unit_cardname\030\021 \001(\t\022\021\n\tunit_name\030\004 \001(\t\022\021"
    "\n\tunit_show\030\n \001(\005\022\030\n\020card_puzzle_drop\030* "
    "\003(\005\022\025\n\rcard_max_rank\030\r \001(\005\022\020\n\010unit_pic\030\006"
    " \001(\005\022\017\n\007country\030\026 \001(\t\022\n\n\002id\030\001 \001(\005\0227\n\ncar"
    "d_droup\030( \003(\0132#.DianShiTech.Config.Confi"
    "gTypeGroup\022\024\n\014card_pathway\030% \001(\t\022\020\n\010gain"
    "_exp\030\036 \001(\005\022\016\n\006talent\030\035 \001(\005\022\016\n\006config\030\024 \001"
    "(\005\022\026\n\016combined_skill\030\032 \001(\005\022\020\n\010country1\030\027"
    " \001(\005\022\021\n\tlead_cost\030\017 \001(\005\022\023\n\013description\030\025"
    " \001(\t\022\027\n\017skill_level_max\030\020 \001(\005\022\022\n\nbattle_"
    "pic\030\010 \001(\005", 929);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UnitConfig.proto", &protobuf_RegisterTypes);
  UnitConfig::default_instance_ = new UnitConfig();
  UnitConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UnitConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UnitConfig_2eproto {
  StaticDescriptorInitializer_UnitConfig_2eproto() {
    protobuf_AddDesc_UnitConfig_2eproto();
  }
} static_descriptor_initializer_UnitConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UnitConfig::kUnitXyFieldNumber;
const int UnitConfig::kGrownIdFieldNumber;
const int UnitConfig::kCanDismantleFieldNumber;
const int UnitConfig::kSkillFieldNumber;
const int UnitConfig::kCurrencyTypeFieldNumber;
const int UnitConfig::kDismantleDataFieldNumber;
const int UnitConfig::kDismantleCostFieldNumber;
const int UnitConfig::kIsExpCardFieldNumber;
const int UnitConfig::kCardRankFieldNumber;
const int UnitConfig::kUnitHeadPicFieldNumber;
const int UnitConfig::kBattleHeadFieldNumber;
const int UnitConfig::kUnitTypeFieldNumber;
const int UnitConfig::kFastConnectFieldNumber;
const int UnitConfig::kActiveEquipmentFieldNumber;
const int UnitConfig::kActivateUnitsFieldNumber;
const int UnitConfig::kCardImproveFieldNumber;
const int UnitConfig::kMaxLevelFieldNumber;
const int UnitConfig::kAttrTypeFieldNumber;
const int UnitConfig::kEquipNameFieldNumber;
const int UnitConfig::kUnitRootFieldNumber;
const int UnitConfig::kUnitDubbingFieldNumber;
const int UnitConfig::kUnitCardnameFieldNumber;
const int UnitConfig::kUnitNameFieldNumber;
const int UnitConfig::kUnitShowFieldNumber;
const int UnitConfig::kCardPuzzleDropFieldNumber;
const int UnitConfig::kCardMaxRankFieldNumber;
const int UnitConfig::kUnitPicFieldNumber;
const int UnitConfig::kCountryFieldNumber;
const int UnitConfig::kIdFieldNumber;
const int UnitConfig::kCardDroupFieldNumber;
const int UnitConfig::kCardPathwayFieldNumber;
const int UnitConfig::kGainExpFieldNumber;
const int UnitConfig::kTalentFieldNumber;
const int UnitConfig::kConfigFieldNumber;
const int UnitConfig::kCombinedSkillFieldNumber;
const int UnitConfig::kCountry1FieldNumber;
const int UnitConfig::kLeadCostFieldNumber;
const int UnitConfig::kDescriptionFieldNumber;
const int UnitConfig::kSkillLevelMaxFieldNumber;
const int UnitConfig::kBattlePicFieldNumber;
#endif  // !_MSC_VER

UnitConfig::UnitConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnitConfig::InitAsDefaultInstance() {
}

UnitConfig::UnitConfig(const UnitConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnitConfig::SharedCtor() {
  _cached_size_ = 0;
  grown_id_ = 0;
  can_dismantle_ = 0;
  skill_ = 0;
  currency_type_ = 0;
  dismantle_cost_ = 0;
  is_exp_card_ = 0;
  card_rank_ = 0;
  unit_head_pic_ = 0;
  battle_head_ = 0;
  unit_type_ = 0;
  active_equipment_ = 0;
  card_improve_ = 0;
  max_level_ = 0;
  attr_type_ = 0;
  equip_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unit_root_ = 0;
  unit_cardname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unit_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unit_show_ = 0;
  card_max_rank_ = 0;
  unit_pic_ = 0;
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  card_pathway_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gain_exp_ = 0;
  talent_ = 0;
  config_ = 0;
  combined_skill_ = 0;
  country1_ = 0;
  lead_cost_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  skill_level_max_ = 0;
  battle_pic_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitConfig::~UnitConfig() {
  SharedDtor();
}

void UnitConfig::SharedDtor() {
  if (equip_name_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_name_;
  }
  if (unit_cardname_ != &::google::protobuf::internal::kEmptyString) {
    delete unit_cardname_;
  }
  if (unit_name_ != &::google::protobuf::internal::kEmptyString) {
    delete unit_name_;
  }
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (card_pathway_ != &::google::protobuf::internal::kEmptyString) {
    delete card_pathway_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void UnitConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnitConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitConfig_descriptor_;
}

const UnitConfig& UnitConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UnitConfig_2eproto();
  return *default_instance_;
}

UnitConfig* UnitConfig::default_instance_ = NULL;

UnitConfig* UnitConfig::New() const {
  return new UnitConfig;
}

void UnitConfig::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    grown_id_ = 0;
    can_dismantle_ = 0;
    skill_ = 0;
    currency_type_ = 0;
    dismantle_cost_ = 0;
    is_exp_card_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    card_rank_ = 0;
    unit_head_pic_ = 0;
    battle_head_ = 0;
    unit_type_ = 0;
    active_equipment_ = 0;
    card_improve_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    max_level_ = 0;
    attr_type_ = 0;
    if (has_equip_name()) {
      if (equip_name_ != &::google::protobuf::internal::kEmptyString) {
        equip_name_->clear();
      }
    }
    unit_root_ = 0;
    if (has_unit_cardname()) {
      if (unit_cardname_ != &::google::protobuf::internal::kEmptyString) {
        unit_cardname_->clear();
      }
    }
    if (has_unit_name()) {
      if (unit_name_ != &::google::protobuf::internal::kEmptyString) {
        unit_name_->clear();
      }
    }
    unit_show_ = 0;
  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    card_max_rank_ = 0;
    unit_pic_ = 0;
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::kEmptyString) {
        country_->clear();
      }
    }
    id_ = 0;
    if (has_card_pathway()) {
      if (card_pathway_ != &::google::protobuf::internal::kEmptyString) {
        card_pathway_->clear();
      }
    }
    gain_exp_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    talent_ = 0;
    config_ = 0;
    combined_skill_ = 0;
    country1_ = 0;
    lead_cost_ = 0;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    skill_level_max_ = 0;
    battle_pic_ = 0;
  }
  unit_xy_.Clear();
  dismantle_data_.Clear();
  fast_connect_.Clear();
  activate_units_.Clear();
  unit_dubbing_.Clear();
  card_puzzle_drop_.Clear();
  card_droup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unit_root;
        break;
      }

      // optional int32 unit_root = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit_root:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unit_root_)));
          set_has_unit_root();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_exp_card;
        break;
      }

      // optional int32 is_exp_card = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_exp_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_exp_card_)));
          set_has_is_exp_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_unit_name;
        break;
      }

      // optional string unit_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unit_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unit_name().data(), this->unit_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_unit_head_pic;
        break;
      }

      // optional int32 unit_head_pic = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit_head_pic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unit_head_pic_)));
          set_has_unit_head_pic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_unit_pic;
        break;
      }

      // optional int32 unit_pic = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit_pic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unit_pic_)));
          set_has_unit_pic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_battle_head;
        break;
      }

      // optional int32 battle_head = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_head_)));
          set_has_battle_head();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_battle_pic;
        break;
      }

      // optional int32 battle_pic = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_pic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_pic_)));
          set_has_battle_pic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_unit_xy;
        break;
      }

      // repeated int32 unit_xy = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit_xy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_unit_xy())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_unit_xy())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_unit_xy;
        if (input->ExpectTag(80)) goto parse_unit_show;
        break;
      }

      // optional int32 unit_show = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unit_show_)));
          set_has_unit_show();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_unit_type;
        break;
      }

      // optional int32 unit_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unit_type_)));
          set_has_unit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_card_rank;
        break;
      }

      // optional int32 card_rank = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_rank_)));
          set_has_card_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_card_max_rank;
        break;
      }

      // optional int32 card_max_rank = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_max_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_max_rank_)));
          set_has_card_max_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_max_level;
        break;
      }

      // optional int32 max_level = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_level_)));
          set_has_max_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_lead_cost;
        break;
      }

      // optional int32 lead_cost = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lead_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lead_cost_)));
          set_has_lead_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_skill_level_max;
        break;
      }

      // optional int32 skill_level_max = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_level_max_)));
          set_has_skill_level_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_unit_cardname;
        break;
      }

      // optional string unit_cardname = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unit_cardname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit_cardname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unit_cardname().data(), this->unit_cardname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_attr_type;
        break;
      }

      // optional int32 attr_type = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attr_type_)));
          set_has_attr_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_grown_id;
        break;
      }

      // optional int32 grown_id = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grown_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grown_id_)));
          set_has_grown_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_config;
        break;
      }

      // optional int32 config = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_config:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &config_)));
          set_has_config();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_description;
        break;
      }

      // optional string description = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_country;
        break;
      }

      // optional string country = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_country1;
        break;
      }

      // optional int32 country1 = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country1_)));
          set_has_country1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_skill;
        break;
      }

      // optional int32 skill = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_)));
          set_has_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_activate_units;
        break;
      }

      // repeated int32 activate_units = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activate_units:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 200, input, this->mutable_activate_units())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_activate_units())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_activate_units;
        if (input->ExpectTag(208)) goto parse_combined_skill;
        break;
      }

      // optional int32 combined_skill = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combined_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combined_skill_)));
          set_has_combined_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_active_equipment;
        break;
      }

      // optional int32 active_equipment = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_equipment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_equipment_)));
          set_has_active_equipment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_equip_name;
        break;
      }

      // optional string equip_name = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equip_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equip_name().data(), this->equip_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_talent;
        break;
      }

      // optional int32 talent = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talent_)));
          set_has_talent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_gain_exp;
        break;
      }

      // optional int32 gain_exp = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gain_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gain_exp_)));
          set_has_gain_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_can_dismantle;
        break;
      }

      // optional int32 can_dismantle = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_dismantle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_dismantle_)));
          set_has_can_dismantle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_currency_type;
        break;
      }

      // optional int32 currency_type = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currency_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_type_)));
          set_has_currency_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_dismantle_cost;
        break;
      }

      // optional int32 dismantle_cost = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dismantle_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dismantle_cost_)));
          set_has_dismantle_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_dismantle_data;
        break;
      }

      // repeated int32 dismantle_data = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dismantle_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 280, input, this->mutable_dismantle_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dismantle_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_dismantle_data;
        if (input->ExpectTag(298)) goto parse_card_pathway;
        break;
      }

      // optional string card_pathway = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_pathway:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_pathway()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->card_pathway().data(), this->card_pathway().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_unit_dubbing;
        break;
      }

      // repeated int32 unit_dubbing = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit_dubbing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 304, input, this->mutable_unit_dubbing())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_unit_dubbing())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_unit_dubbing;
        if (input->ExpectTag(312)) goto parse_fast_connect;
        break;
      }

      // repeated int32 fast_connect = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fast_connect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 312, input, this->mutable_fast_connect())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fast_connect())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_fast_connect;
        if (input->ExpectTag(322)) goto parse_card_droup;
        break;
      }

      // repeated .DianShiTech.Config.ConfigTypeGroup card_droup = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_droup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_droup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_card_droup;
        if (input->ExpectTag(328)) goto parse_card_improve;
        break;
      }

      // optional int32 card_improve = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_improve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_improve_)));
          set_has_card_improve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_card_puzzle_drop;
        break;
      }

      // repeated int32 card_puzzle_drop = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_puzzle_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 336, input, this->mutable_card_puzzle_drop())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card_puzzle_drop())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_card_puzzle_drop;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnitConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 unit_root = 2;
  if (has_unit_root()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->unit_root(), output);
  }

  // optional int32 is_exp_card = 3;
  if (has_is_exp_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_exp_card(), output);
  }

  // optional string unit_name = 4;
  if (has_unit_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit_name().data(), this->unit_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->unit_name(), output);
  }

  // optional int32 unit_head_pic = 5;
  if (has_unit_head_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->unit_head_pic(), output);
  }

  // optional int32 unit_pic = 6;
  if (has_unit_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->unit_pic(), output);
  }

  // optional int32 battle_head = 7;
  if (has_battle_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->battle_head(), output);
  }

  // optional int32 battle_pic = 8;
  if (has_battle_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->battle_pic(), output);
  }

  // repeated int32 unit_xy = 9;
  for (int i = 0; i < this->unit_xy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->unit_xy(i), output);
  }

  // optional int32 unit_show = 10;
  if (has_unit_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->unit_show(), output);
  }

  // optional int32 unit_type = 11;
  if (has_unit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->unit_type(), output);
  }

  // optional int32 card_rank = 12;
  if (has_card_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->card_rank(), output);
  }

  // optional int32 card_max_rank = 13;
  if (has_card_max_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->card_max_rank(), output);
  }

  // optional int32 max_level = 14;
  if (has_max_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->max_level(), output);
  }

  // optional int32 lead_cost = 15;
  if (has_lead_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->lead_cost(), output);
  }

  // optional int32 skill_level_max = 16;
  if (has_skill_level_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->skill_level_max(), output);
  }

  // optional string unit_cardname = 17;
  if (has_unit_cardname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit_cardname().data(), this->unit_cardname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->unit_cardname(), output);
  }

  // optional int32 attr_type = 18;
  if (has_attr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->attr_type(), output);
  }

  // optional int32 grown_id = 19;
  if (has_grown_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->grown_id(), output);
  }

  // optional int32 config = 20;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->config(), output);
  }

  // optional string description = 21;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->description(), output);
  }

  // optional string country = 22;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->country(), output);
  }

  // optional int32 country1 = 23;
  if (has_country1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->country1(), output);
  }

  // optional int32 skill = 24;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->skill(), output);
  }

  // repeated int32 activate_units = 25;
  for (int i = 0; i < this->activate_units_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      25, this->activate_units(i), output);
  }

  // optional int32 combined_skill = 26;
  if (has_combined_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->combined_skill(), output);
  }

  // optional int32 active_equipment = 27;
  if (has_active_equipment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->active_equipment(), output);
  }

  // optional string equip_name = 28;
  if (has_equip_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_name().data(), this->equip_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->equip_name(), output);
  }

  // optional int32 talent = 29;
  if (has_talent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->talent(), output);
  }

  // optional int32 gain_exp = 30;
  if (has_gain_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->gain_exp(), output);
  }

  // optional int32 can_dismantle = 32;
  if (has_can_dismantle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->can_dismantle(), output);
  }

  // optional int32 currency_type = 33;
  if (has_currency_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->currency_type(), output);
  }

  // optional int32 dismantle_cost = 34;
  if (has_dismantle_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->dismantle_cost(), output);
  }

  // repeated int32 dismantle_data = 35;
  for (int i = 0; i < this->dismantle_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      35, this->dismantle_data(i), output);
  }

  // optional string card_pathway = 37;
  if (has_card_pathway()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_pathway().data(), this->card_pathway().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      37, this->card_pathway(), output);
  }

  // repeated int32 unit_dubbing = 38;
  for (int i = 0; i < this->unit_dubbing_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      38, this->unit_dubbing(i), output);
  }

  // repeated int32 fast_connect = 39;
  for (int i = 0; i < this->fast_connect_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      39, this->fast_connect(i), output);
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup card_droup = 40;
  for (int i = 0; i < this->card_droup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->card_droup(i), output);
  }

  // optional int32 card_improve = 41;
  if (has_card_improve()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->card_improve(), output);
  }

  // repeated int32 card_puzzle_drop = 42;
  for (int i = 0; i < this->card_puzzle_drop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      42, this->card_puzzle_drop(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnitConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 unit_root = 2;
  if (has_unit_root()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->unit_root(), target);
  }

  // optional int32 is_exp_card = 3;
  if (has_is_exp_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_exp_card(), target);
  }

  // optional string unit_name = 4;
  if (has_unit_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit_name().data(), this->unit_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->unit_name(), target);
  }

  // optional int32 unit_head_pic = 5;
  if (has_unit_head_pic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->unit_head_pic(), target);
  }

  // optional int32 unit_pic = 6;
  if (has_unit_pic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->unit_pic(), target);
  }

  // optional int32 battle_head = 7;
  if (has_battle_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->battle_head(), target);
  }

  // optional int32 battle_pic = 8;
  if (has_battle_pic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->battle_pic(), target);
  }

  // repeated int32 unit_xy = 9;
  for (int i = 0; i < this->unit_xy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->unit_xy(i), target);
  }

  // optional int32 unit_show = 10;
  if (has_unit_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->unit_show(), target);
  }

  // optional int32 unit_type = 11;
  if (has_unit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->unit_type(), target);
  }

  // optional int32 card_rank = 12;
  if (has_card_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->card_rank(), target);
  }

  // optional int32 card_max_rank = 13;
  if (has_card_max_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->card_max_rank(), target);
  }

  // optional int32 max_level = 14;
  if (has_max_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->max_level(), target);
  }

  // optional int32 lead_cost = 15;
  if (has_lead_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->lead_cost(), target);
  }

  // optional int32 skill_level_max = 16;
  if (has_skill_level_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->skill_level_max(), target);
  }

  // optional string unit_cardname = 17;
  if (has_unit_cardname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit_cardname().data(), this->unit_cardname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->unit_cardname(), target);
  }

  // optional int32 attr_type = 18;
  if (has_attr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->attr_type(), target);
  }

  // optional int32 grown_id = 19;
  if (has_grown_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->grown_id(), target);
  }

  // optional int32 config = 20;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->config(), target);
  }

  // optional string description = 21;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->description(), target);
  }

  // optional string country = 22;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->country(), target);
  }

  // optional int32 country1 = 23;
  if (has_country1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->country1(), target);
  }

  // optional int32 skill = 24;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->skill(), target);
  }

  // repeated int32 activate_units = 25;
  for (int i = 0; i < this->activate_units_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(25, this->activate_units(i), target);
  }

  // optional int32 combined_skill = 26;
  if (has_combined_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->combined_skill(), target);
  }

  // optional int32 active_equipment = 27;
  if (has_active_equipment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->active_equipment(), target);
  }

  // optional string equip_name = 28;
  if (has_equip_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_name().data(), this->equip_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->equip_name(), target);
  }

  // optional int32 talent = 29;
  if (has_talent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->talent(), target);
  }

  // optional int32 gain_exp = 30;
  if (has_gain_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->gain_exp(), target);
  }

  // optional int32 can_dismantle = 32;
  if (has_can_dismantle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->can_dismantle(), target);
  }

  // optional int32 currency_type = 33;
  if (has_currency_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->currency_type(), target);
  }

  // optional int32 dismantle_cost = 34;
  if (has_dismantle_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->dismantle_cost(), target);
  }

  // repeated int32 dismantle_data = 35;
  for (int i = 0; i < this->dismantle_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(35, this->dismantle_data(i), target);
  }

  // optional string card_pathway = 37;
  if (has_card_pathway()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_pathway().data(), this->card_pathway().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->card_pathway(), target);
  }

  // repeated int32 unit_dubbing = 38;
  for (int i = 0; i < this->unit_dubbing_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(38, this->unit_dubbing(i), target);
  }

  // repeated int32 fast_connect = 39;
  for (int i = 0; i < this->fast_connect_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(39, this->fast_connect(i), target);
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup card_droup = 40;
  for (int i = 0; i < this->card_droup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->card_droup(i), target);
  }

  // optional int32 card_improve = 41;
  if (has_card_improve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->card_improve(), target);
  }

  // repeated int32 card_puzzle_drop = 42;
  for (int i = 0; i < this->card_puzzle_drop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(42, this->card_puzzle_drop(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnitConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 grown_id = 19;
    if (has_grown_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grown_id());
    }

    // optional int32 can_dismantle = 32;
    if (has_can_dismantle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_dismantle());
    }

    // optional int32 skill = 24;
    if (has_skill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill());
    }

    // optional int32 currency_type = 33;
    if (has_currency_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency_type());
    }

    // optional int32 dismantle_cost = 34;
    if (has_dismantle_cost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dismantle_cost());
    }

    // optional int32 is_exp_card = 3;
    if (has_is_exp_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_exp_card());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 card_rank = 12;
    if (has_card_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_rank());
    }

    // optional int32 unit_head_pic = 5;
    if (has_unit_head_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unit_head_pic());
    }

    // optional int32 battle_head = 7;
    if (has_battle_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_head());
    }

    // optional int32 unit_type = 11;
    if (has_unit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unit_type());
    }

    // optional int32 active_equipment = 27;
    if (has_active_equipment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_equipment());
    }

    // optional int32 card_improve = 41;
    if (has_card_improve()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_improve());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 max_level = 14;
    if (has_max_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_level());
    }

    // optional int32 attr_type = 18;
    if (has_attr_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attr_type());
    }

    // optional string equip_name = 28;
    if (has_equip_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equip_name());
    }

    // optional int32 unit_root = 2;
    if (has_unit_root()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unit_root());
    }

    // optional string unit_cardname = 17;
    if (has_unit_cardname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unit_cardname());
    }

    // optional string unit_name = 4;
    if (has_unit_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unit_name());
    }

    // optional int32 unit_show = 10;
    if (has_unit_show()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unit_show());
    }

  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional int32 card_max_rank = 13;
    if (has_card_max_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_max_rank());
    }

    // optional int32 unit_pic = 6;
    if (has_unit_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unit_pic());
    }

    // optional string country = 22;
    if (has_country()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string card_pathway = 37;
    if (has_card_pathway()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_pathway());
    }

    // optional int32 gain_exp = 30;
    if (has_gain_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gain_exp());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 talent = 29;
    if (has_talent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->talent());
    }

    // optional int32 config = 20;
    if (has_config()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->config());
    }

    // optional int32 combined_skill = 26;
    if (has_combined_skill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combined_skill());
    }

    // optional int32 country1 = 23;
    if (has_country1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country1());
    }

    // optional int32 lead_cost = 15;
    if (has_lead_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lead_cost());
    }

    // optional string description = 21;
    if (has_description()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional int32 skill_level_max = 16;
    if (has_skill_level_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_level_max());
    }

    // optional int32 battle_pic = 8;
    if (has_battle_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_pic());
    }

  }
  // repeated int32 unit_xy = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->unit_xy_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->unit_xy(i));
    }
    total_size += 1 * this->unit_xy_size() + data_size;
  }

  // repeated int32 dismantle_data = 35;
  {
    int data_size = 0;
    for (int i = 0; i < this->dismantle_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dismantle_data(i));
    }
    total_size += 2 * this->dismantle_data_size() + data_size;
  }

  // repeated int32 fast_connect = 39;
  {
    int data_size = 0;
    for (int i = 0; i < this->fast_connect_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fast_connect(i));
    }
    total_size += 2 * this->fast_connect_size() + data_size;
  }

  // repeated int32 activate_units = 25;
  {
    int data_size = 0;
    for (int i = 0; i < this->activate_units_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->activate_units(i));
    }
    total_size += 2 * this->activate_units_size() + data_size;
  }

  // repeated int32 unit_dubbing = 38;
  {
    int data_size = 0;
    for (int i = 0; i < this->unit_dubbing_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->unit_dubbing(i));
    }
    total_size += 2 * this->unit_dubbing_size() + data_size;
  }

  // repeated int32 card_puzzle_drop = 42;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_puzzle_drop_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card_puzzle_drop(i));
    }
    total_size += 2 * this->card_puzzle_drop_size() + data_size;
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup card_droup = 40;
  total_size += 2 * this->card_droup_size();
  for (int i = 0; i < this->card_droup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_droup(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnitConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitConfig::MergeFrom(const UnitConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  unit_xy_.MergeFrom(from.unit_xy_);
  dismantle_data_.MergeFrom(from.dismantle_data_);
  fast_connect_.MergeFrom(from.fast_connect_);
  activate_units_.MergeFrom(from.activate_units_);
  unit_dubbing_.MergeFrom(from.unit_dubbing_);
  card_puzzle_drop_.MergeFrom(from.card_puzzle_drop_);
  card_droup_.MergeFrom(from.card_droup_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_grown_id()) {
      set_grown_id(from.grown_id());
    }
    if (from.has_can_dismantle()) {
      set_can_dismantle(from.can_dismantle());
    }
    if (from.has_skill()) {
      set_skill(from.skill());
    }
    if (from.has_currency_type()) {
      set_currency_type(from.currency_type());
    }
    if (from.has_dismantle_cost()) {
      set_dismantle_cost(from.dismantle_cost());
    }
    if (from.has_is_exp_card()) {
      set_is_exp_card(from.is_exp_card());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_card_rank()) {
      set_card_rank(from.card_rank());
    }
    if (from.has_unit_head_pic()) {
      set_unit_head_pic(from.unit_head_pic());
    }
    if (from.has_battle_head()) {
      set_battle_head(from.battle_head());
    }
    if (from.has_unit_type()) {
      set_unit_type(from.unit_type());
    }
    if (from.has_active_equipment()) {
      set_active_equipment(from.active_equipment());
    }
    if (from.has_card_improve()) {
      set_card_improve(from.card_improve());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_max_level()) {
      set_max_level(from.max_level());
    }
    if (from.has_attr_type()) {
      set_attr_type(from.attr_type());
    }
    if (from.has_equip_name()) {
      set_equip_name(from.equip_name());
    }
    if (from.has_unit_root()) {
      set_unit_root(from.unit_root());
    }
    if (from.has_unit_cardname()) {
      set_unit_cardname(from.unit_cardname());
    }
    if (from.has_unit_name()) {
      set_unit_name(from.unit_name());
    }
    if (from.has_unit_show()) {
      set_unit_show(from.unit_show());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_card_max_rank()) {
      set_card_max_rank(from.card_max_rank());
    }
    if (from.has_unit_pic()) {
      set_unit_pic(from.unit_pic());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_card_pathway()) {
      set_card_pathway(from.card_pathway());
    }
    if (from.has_gain_exp()) {
      set_gain_exp(from.gain_exp());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_talent()) {
      set_talent(from.talent());
    }
    if (from.has_config()) {
      set_config(from.config());
    }
    if (from.has_combined_skill()) {
      set_combined_skill(from.combined_skill());
    }
    if (from.has_country1()) {
      set_country1(from.country1());
    }
    if (from.has_lead_cost()) {
      set_lead_cost(from.lead_cost());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_skill_level_max()) {
      set_skill_level_max(from.skill_level_max());
    }
    if (from.has_battle_pic()) {
      set_battle_pic(from.battle_pic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitConfig::CopyFrom(const UnitConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitConfig::IsInitialized() const {

  return true;
}

void UnitConfig::Swap(UnitConfig* other) {
  if (other != this) {
    unit_xy_.Swap(&other->unit_xy_);
    std::swap(grown_id_, other->grown_id_);
    std::swap(can_dismantle_, other->can_dismantle_);
    std::swap(skill_, other->skill_);
    std::swap(currency_type_, other->currency_type_);
    dismantle_data_.Swap(&other->dismantle_data_);
    std::swap(dismantle_cost_, other->dismantle_cost_);
    std::swap(is_exp_card_, other->is_exp_card_);
    std::swap(card_rank_, other->card_rank_);
    std::swap(unit_head_pic_, other->unit_head_pic_);
    std::swap(battle_head_, other->battle_head_);
    std::swap(unit_type_, other->unit_type_);
    fast_connect_.Swap(&other->fast_connect_);
    std::swap(active_equipment_, other->active_equipment_);
    activate_units_.Swap(&other->activate_units_);
    std::swap(card_improve_, other->card_improve_);
    std::swap(max_level_, other->max_level_);
    std::swap(attr_type_, other->attr_type_);
    std::swap(equip_name_, other->equip_name_);
    std::swap(unit_root_, other->unit_root_);
    unit_dubbing_.Swap(&other->unit_dubbing_);
    std::swap(unit_cardname_, other->unit_cardname_);
    std::swap(unit_name_, other->unit_name_);
    std::swap(unit_show_, other->unit_show_);
    card_puzzle_drop_.Swap(&other->card_puzzle_drop_);
    std::swap(card_max_rank_, other->card_max_rank_);
    std::swap(unit_pic_, other->unit_pic_);
    std::swap(country_, other->country_);
    std::swap(id_, other->id_);
    card_droup_.Swap(&other->card_droup_);
    std::swap(card_pathway_, other->card_pathway_);
    std::swap(gain_exp_, other->gain_exp_);
    std::swap(talent_, other->talent_);
    std::swap(config_, other->config_);
    std::swap(combined_skill_, other->combined_skill_);
    std::swap(country1_, other->country1_);
    std::swap(lead_cost_, other->lead_cost_);
    std::swap(description_, other->description_);
    std::swap(skill_level_max_, other->skill_level_max_);
    std::swap(battle_pic_, other->battle_pic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnitConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitConfig_descriptor_;
  metadata.reflection = UnitConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

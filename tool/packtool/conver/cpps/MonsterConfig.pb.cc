// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MonsterConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MonsterConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* MonsterConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MonsterConfig_2eproto() {
  protobuf_AddDesc_MonsterConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MonsterConfig.proto");
  GOOGLE_CHECK(file != NULL);
  MonsterConfig_descriptor_ = file->message_type(0);
  static const int MonsterConfig_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, cri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, damage_increase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, hp_steal_fix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, immune_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, reflect_fix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, tough_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, evade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, damage_reduce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, str_fix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, talent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, commonskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, hp_fix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, dom_fix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, monster_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, unit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, int_fix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, atk_fix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, card_level_),
  };
  MonsterConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterConfig_descriptor_,
      MonsterConfig::default_instance_,
      MonsterConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MonsterConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterConfig_descriptor_, &MonsterConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MonsterConfig_2eproto() {
  delete MonsterConfig::default_instance_;
  delete MonsterConfig_reflection_;
}

void protobuf_AddDesc_MonsterConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023MonsterConfig.proto\022\022DianShiTech.Confi"
    "g\032\025ConfigTypeGroup.proto\"\345\003\n\rMonsterConf"
    "ig\022\013\n\003cri\030\022 \001(\005\022\027\n\017damage_increase\030\024 \001(\005"
    "\022\r\n\005skill\030\007 \001(\005\022\014\n\004unit\030\003 \001(\005\022\014\n\004drop\030\033 "
    "\003(\005\022\024\n\014hp_steal_fix\030\032 \001(\005\022\023\n\013immune_type"
    "\030\013 \001(\005\022\023\n\013reflect_fix\030\031 \001(\005\022\r\n\005level\030\005 \001"
    "(\005\022\r\n\005tough\030\026 \001(\005\022\r\n\005evade\030\025 \001(\005\022\025\n\rdama"
    "ge_reduce\030\030 \001(\005\022\r\n\005block\030\027 \001(\005\022\017\n\007str_fi"
    "x\030\016 \001(\005\022\016\n\006talent\030\t \001(\005\022\n\n\002id\030\001 \001(\005\022\023\n\013c"
    "ommonskill\030\006 \001(\005\022\016\n\006hp_fix\030\r \001(\005\022\013\n\003hit\030"
    "\021 \001(\005\022\017\n\007dom_fix\030\020 \001(\005\022\016\n\006config\030\n \001(\005\022\024"
    "\n\014monster_name\030\002 \001(\t\022\021\n\tunit_type\030\004 \001(\005\022"
    "\017\n\007int_fix\030\017 \001(\005\022\021\n\tprecision\030\023 \001(\005\022\017\n\007a"
    "tk_fix\030\014 \001(\005\022\022\n\ncard_level\030\010 \001(\005", 552);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MonsterConfig.proto", &protobuf_RegisterTypes);
  MonsterConfig::default_instance_ = new MonsterConfig();
  MonsterConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MonsterConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MonsterConfig_2eproto {
  StaticDescriptorInitializer_MonsterConfig_2eproto() {
    protobuf_AddDesc_MonsterConfig_2eproto();
  }
} static_descriptor_initializer_MonsterConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MonsterConfig::kCriFieldNumber;
const int MonsterConfig::kDamageIncreaseFieldNumber;
const int MonsterConfig::kSkillFieldNumber;
const int MonsterConfig::kUnitFieldNumber;
const int MonsterConfig::kDropFieldNumber;
const int MonsterConfig::kHpStealFixFieldNumber;
const int MonsterConfig::kImmuneTypeFieldNumber;
const int MonsterConfig::kReflectFixFieldNumber;
const int MonsterConfig::kLevelFieldNumber;
const int MonsterConfig::kToughFieldNumber;
const int MonsterConfig::kEvadeFieldNumber;
const int MonsterConfig::kDamageReduceFieldNumber;
const int MonsterConfig::kBlockFieldNumber;
const int MonsterConfig::kStrFixFieldNumber;
const int MonsterConfig::kTalentFieldNumber;
const int MonsterConfig::kIdFieldNumber;
const int MonsterConfig::kCommonskillFieldNumber;
const int MonsterConfig::kHpFixFieldNumber;
const int MonsterConfig::kHitFieldNumber;
const int MonsterConfig::kDomFixFieldNumber;
const int MonsterConfig::kConfigFieldNumber;
const int MonsterConfig::kMonsterNameFieldNumber;
const int MonsterConfig::kUnitTypeFieldNumber;
const int MonsterConfig::kIntFixFieldNumber;
const int MonsterConfig::kPrecisionFieldNumber;
const int MonsterConfig::kAtkFixFieldNumber;
const int MonsterConfig::kCardLevelFieldNumber;
#endif  // !_MSC_VER

MonsterConfig::MonsterConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonsterConfig::InitAsDefaultInstance() {
}

MonsterConfig::MonsterConfig(const MonsterConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterConfig::SharedCtor() {
  _cached_size_ = 0;
  cri_ = 0;
  damage_increase_ = 0;
  skill_ = 0;
  unit_ = 0;
  hp_steal_fix_ = 0;
  immune_type_ = 0;
  reflect_fix_ = 0;
  level_ = 0;
  tough_ = 0;
  evade_ = 0;
  damage_reduce_ = 0;
  block_ = 0;
  str_fix_ = 0;
  talent_ = 0;
  id_ = 0;
  commonskill_ = 0;
  hp_fix_ = 0;
  hit_ = 0;
  dom_fix_ = 0;
  config_ = 0;
  monster_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unit_type_ = 0;
  int_fix_ = 0;
  precision_ = 0;
  atk_fix_ = 0;
  card_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterConfig::~MonsterConfig() {
  SharedDtor();
}

void MonsterConfig::SharedDtor() {
  if (monster_name_ != &::google::protobuf::internal::kEmptyString) {
    delete monster_name_;
  }
  if (this != default_instance_) {
  }
}

void MonsterConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterConfig_descriptor_;
}

const MonsterConfig& MonsterConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MonsterConfig_2eproto();
  return *default_instance_;
}

MonsterConfig* MonsterConfig::default_instance_ = NULL;

MonsterConfig* MonsterConfig::New() const {
  return new MonsterConfig;
}

void MonsterConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cri_ = 0;
    damage_increase_ = 0;
    skill_ = 0;
    unit_ = 0;
    hp_steal_fix_ = 0;
    immune_type_ = 0;
    reflect_fix_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0;
    tough_ = 0;
    evade_ = 0;
    damage_reduce_ = 0;
    block_ = 0;
    str_fix_ = 0;
    talent_ = 0;
    id_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    commonskill_ = 0;
    hp_fix_ = 0;
    hit_ = 0;
    dom_fix_ = 0;
    config_ = 0;
    if (has_monster_name()) {
      if (monster_name_ != &::google::protobuf::internal::kEmptyString) {
        monster_name_->clear();
      }
    }
    unit_type_ = 0;
    int_fix_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    precision_ = 0;
    atk_fix_ = 0;
    card_level_ = 0;
  }
  drop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonsterConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_monster_name;
        break;
      }

      // optional string monster_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monster_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->monster_name().data(), this->monster_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_unit;
        break;
      }

      // optional int32 unit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unit_)));
          set_has_unit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_unit_type;
        break;
      }

      // optional int32 unit_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unit_type_)));
          set_has_unit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_commonskill;
        break;
      }

      // optional int32 commonskill = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commonskill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &commonskill_)));
          set_has_commonskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_skill;
        break;
      }

      // optional int32 skill = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_)));
          set_has_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_card_level;
        break;
      }

      // optional int32 card_level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_level_)));
          set_has_card_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_talent;
        break;
      }

      // optional int32 talent = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talent_)));
          set_has_talent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_config;
        break;
      }

      // optional int32 config = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_config:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &config_)));
          set_has_config();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_immune_type;
        break;
      }

      // optional int32 immune_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_immune_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &immune_type_)));
          set_has_immune_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_atk_fix;
        break;
      }

      // optional int32 atk_fix = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atk_fix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atk_fix_)));
          set_has_atk_fix();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_hp_fix;
        break;
      }

      // optional int32 hp_fix = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp_fix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_fix_)));
          set_has_hp_fix();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_str_fix;
        break;
      }

      // optional int32 str_fix = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_str_fix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &str_fix_)));
          set_has_str_fix();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_int_fix;
        break;
      }

      // optional int32 int_fix = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_fix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_fix_)));
          set_has_int_fix();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_dom_fix;
        break;
      }

      // optional int32 dom_fix = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dom_fix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dom_fix_)));
          set_has_dom_fix();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_hit;
        break;
      }

      // optional int32 hit = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hit_)));
          set_has_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_cri;
        break;
      }

      // optional int32 cri = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cri_)));
          set_has_cri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_precision;
        break;
      }

      // optional int32 precision = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precision_)));
          set_has_precision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_damage_increase;
        break;
      }

      // optional int32 damage_increase = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_increase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_increase_)));
          set_has_damage_increase();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_evade;
        break;
      }

      // optional int32 evade = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_evade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &evade_)));
          set_has_evade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_tough;
        break;
      }

      // optional int32 tough = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tough:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tough_)));
          set_has_tough();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_block;
        break;
      }

      // optional int32 block = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_)));
          set_has_block();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_damage_reduce;
        break;
      }

      // optional int32 damage_reduce = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_reduce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_reduce_)));
          set_has_damage_reduce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_reflect_fix;
        break;
      }

      // optional int32 reflect_fix = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reflect_fix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reflect_fix_)));
          set_has_reflect_fix();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_hp_steal_fix;
        break;
      }

      // optional int32 hp_steal_fix = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp_steal_fix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_steal_fix_)));
          set_has_hp_steal_fix();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_drop;
        break;
      }

      // repeated int32 drop = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 216, input, this->mutable_drop())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_drop())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_drop;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonsterConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string monster_name = 2;
  if (has_monster_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->monster_name().data(), this->monster_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->monster_name(), output);
  }

  // optional int32 unit = 3;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->unit(), output);
  }

  // optional int32 unit_type = 4;
  if (has_unit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->unit_type(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // optional int32 commonskill = 6;
  if (has_commonskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->commonskill(), output);
  }

  // optional int32 skill = 7;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->skill(), output);
  }

  // optional int32 card_level = 8;
  if (has_card_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->card_level(), output);
  }

  // optional int32 talent = 9;
  if (has_talent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->talent(), output);
  }

  // optional int32 config = 10;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->config(), output);
  }

  // optional int32 immune_type = 11;
  if (has_immune_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->immune_type(), output);
  }

  // optional int32 atk_fix = 12;
  if (has_atk_fix()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->atk_fix(), output);
  }

  // optional int32 hp_fix = 13;
  if (has_hp_fix()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->hp_fix(), output);
  }

  // optional int32 str_fix = 14;
  if (has_str_fix()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->str_fix(), output);
  }

  // optional int32 int_fix = 15;
  if (has_int_fix()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->int_fix(), output);
  }

  // optional int32 dom_fix = 16;
  if (has_dom_fix()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->dom_fix(), output);
  }

  // optional int32 hit = 17;
  if (has_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->hit(), output);
  }

  // optional int32 cri = 18;
  if (has_cri()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->cri(), output);
  }

  // optional int32 precision = 19;
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->precision(), output);
  }

  // optional int32 damage_increase = 20;
  if (has_damage_increase()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->damage_increase(), output);
  }

  // optional int32 evade = 21;
  if (has_evade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->evade(), output);
  }

  // optional int32 tough = 22;
  if (has_tough()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->tough(), output);
  }

  // optional int32 block = 23;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->block(), output);
  }

  // optional int32 damage_reduce = 24;
  if (has_damage_reduce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->damage_reduce(), output);
  }

  // optional int32 reflect_fix = 25;
  if (has_reflect_fix()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->reflect_fix(), output);
  }

  // optional int32 hp_steal_fix = 26;
  if (has_hp_steal_fix()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->hp_steal_fix(), output);
  }

  // repeated int32 drop = 27;
  for (int i = 0; i < this->drop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      27, this->drop(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string monster_name = 2;
  if (has_monster_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->monster_name().data(), this->monster_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->monster_name(), target);
  }

  // optional int32 unit = 3;
  if (has_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->unit(), target);
  }

  // optional int32 unit_type = 4;
  if (has_unit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->unit_type(), target);
  }

  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // optional int32 commonskill = 6;
  if (has_commonskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->commonskill(), target);
  }

  // optional int32 skill = 7;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->skill(), target);
  }

  // optional int32 card_level = 8;
  if (has_card_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->card_level(), target);
  }

  // optional int32 talent = 9;
  if (has_talent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->talent(), target);
  }

  // optional int32 config = 10;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->config(), target);
  }

  // optional int32 immune_type = 11;
  if (has_immune_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->immune_type(), target);
  }

  // optional int32 atk_fix = 12;
  if (has_atk_fix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->atk_fix(), target);
  }

  // optional int32 hp_fix = 13;
  if (has_hp_fix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->hp_fix(), target);
  }

  // optional int32 str_fix = 14;
  if (has_str_fix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->str_fix(), target);
  }

  // optional int32 int_fix = 15;
  if (has_int_fix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->int_fix(), target);
  }

  // optional int32 dom_fix = 16;
  if (has_dom_fix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->dom_fix(), target);
  }

  // optional int32 hit = 17;
  if (has_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->hit(), target);
  }

  // optional int32 cri = 18;
  if (has_cri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->cri(), target);
  }

  // optional int32 precision = 19;
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->precision(), target);
  }

  // optional int32 damage_increase = 20;
  if (has_damage_increase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->damage_increase(), target);
  }

  // optional int32 evade = 21;
  if (has_evade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->evade(), target);
  }

  // optional int32 tough = 22;
  if (has_tough()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->tough(), target);
  }

  // optional int32 block = 23;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->block(), target);
  }

  // optional int32 damage_reduce = 24;
  if (has_damage_reduce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->damage_reduce(), target);
  }

  // optional int32 reflect_fix = 25;
  if (has_reflect_fix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->reflect_fix(), target);
  }

  // optional int32 hp_steal_fix = 26;
  if (has_hp_steal_fix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->hp_steal_fix(), target);
  }

  // repeated int32 drop = 27;
  for (int i = 0; i < this->drop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(27, this->drop(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cri = 18;
    if (has_cri()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cri());
    }

    // optional int32 damage_increase = 20;
    if (has_damage_increase()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_increase());
    }

    // optional int32 skill = 7;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill());
    }

    // optional int32 unit = 3;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unit());
    }

    // optional int32 hp_steal_fix = 26;
    if (has_hp_steal_fix()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp_steal_fix());
    }

    // optional int32 immune_type = 11;
    if (has_immune_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->immune_type());
    }

    // optional int32 reflect_fix = 25;
    if (has_reflect_fix()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reflect_fix());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 tough = 22;
    if (has_tough()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tough());
    }

    // optional int32 evade = 21;
    if (has_evade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->evade());
    }

    // optional int32 damage_reduce = 24;
    if (has_damage_reduce()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_reduce());
    }

    // optional int32 block = 23;
    if (has_block()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->block());
    }

    // optional int32 str_fix = 14;
    if (has_str_fix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->str_fix());
    }

    // optional int32 talent = 9;
    if (has_talent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->talent());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 commonskill = 6;
    if (has_commonskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->commonskill());
    }

    // optional int32 hp_fix = 13;
    if (has_hp_fix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp_fix());
    }

    // optional int32 hit = 17;
    if (has_hit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hit());
    }

    // optional int32 dom_fix = 16;
    if (has_dom_fix()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dom_fix());
    }

    // optional int32 config = 10;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->config());
    }

    // optional string monster_name = 2;
    if (has_monster_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->monster_name());
    }

    // optional int32 unit_type = 4;
    if (has_unit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unit_type());
    }

    // optional int32 int_fix = 15;
    if (has_int_fix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_fix());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 precision = 19;
    if (has_precision()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->precision());
    }

    // optional int32 atk_fix = 12;
    if (has_atk_fix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atk_fix());
    }

    // optional int32 card_level = 8;
    if (has_card_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_level());
    }

  }
  // repeated int32 drop = 27;
  {
    int data_size = 0;
    for (int i = 0; i < this->drop_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->drop(i));
    }
    total_size += 2 * this->drop_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonsterConfig::MergeFrom(const MonsterConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  drop_.MergeFrom(from.drop_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cri()) {
      set_cri(from.cri());
    }
    if (from.has_damage_increase()) {
      set_damage_increase(from.damage_increase());
    }
    if (from.has_skill()) {
      set_skill(from.skill());
    }
    if (from.has_unit()) {
      set_unit(from.unit());
    }
    if (from.has_hp_steal_fix()) {
      set_hp_steal_fix(from.hp_steal_fix());
    }
    if (from.has_immune_type()) {
      set_immune_type(from.immune_type());
    }
    if (from.has_reflect_fix()) {
      set_reflect_fix(from.reflect_fix());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_tough()) {
      set_tough(from.tough());
    }
    if (from.has_evade()) {
      set_evade(from.evade());
    }
    if (from.has_damage_reduce()) {
      set_damage_reduce(from.damage_reduce());
    }
    if (from.has_block()) {
      set_block(from.block());
    }
    if (from.has_str_fix()) {
      set_str_fix(from.str_fix());
    }
    if (from.has_talent()) {
      set_talent(from.talent());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_commonskill()) {
      set_commonskill(from.commonskill());
    }
    if (from.has_hp_fix()) {
      set_hp_fix(from.hp_fix());
    }
    if (from.has_hit()) {
      set_hit(from.hit());
    }
    if (from.has_dom_fix()) {
      set_dom_fix(from.dom_fix());
    }
    if (from.has_config()) {
      set_config(from.config());
    }
    if (from.has_monster_name()) {
      set_monster_name(from.monster_name());
    }
    if (from.has_unit_type()) {
      set_unit_type(from.unit_type());
    }
    if (from.has_int_fix()) {
      set_int_fix(from.int_fix());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_precision()) {
      set_precision(from.precision());
    }
    if (from.has_atk_fix()) {
      set_atk_fix(from.atk_fix());
    }
    if (from.has_card_level()) {
      set_card_level(from.card_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonsterConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterConfig::CopyFrom(const MonsterConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterConfig::IsInitialized() const {

  return true;
}

void MonsterConfig::Swap(MonsterConfig* other) {
  if (other != this) {
    std::swap(cri_, other->cri_);
    std::swap(damage_increase_, other->damage_increase_);
    std::swap(skill_, other->skill_);
    std::swap(unit_, other->unit_);
    drop_.Swap(&other->drop_);
    std::swap(hp_steal_fix_, other->hp_steal_fix_);
    std::swap(immune_type_, other->immune_type_);
    std::swap(reflect_fix_, other->reflect_fix_);
    std::swap(level_, other->level_);
    std::swap(tough_, other->tough_);
    std::swap(evade_, other->evade_);
    std::swap(damage_reduce_, other->damage_reduce_);
    std::swap(block_, other->block_);
    std::swap(str_fix_, other->str_fix_);
    std::swap(talent_, other->talent_);
    std::swap(id_, other->id_);
    std::swap(commonskill_, other->commonskill_);
    std::swap(hp_fix_, other->hp_fix_);
    std::swap(hit_, other->hit_);
    std::swap(dom_fix_, other->dom_fix_);
    std::swap(config_, other->config_);
    std::swap(monster_name_, other->monster_name_);
    std::swap(unit_type_, other->unit_type_);
    std::swap(int_fix_, other->int_fix_);
    std::swap(precision_, other->precision_);
    std::swap(atk_fix_, other->atk_fix_);
    std::swap(card_level_, other->card_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonsterConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterConfig_descriptor_;
  metadata.reflection = MonsterConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Vip_privilegeConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Vip_privilegeConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* Vip_privilegeConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vip_privilegeConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Vip_5fprivilegeConfig_2eproto() {
  protobuf_AddDesc_Vip_5fprivilegeConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Vip_privilegeConfig.proto");
  GOOGLE_CHECK(file != NULL);
  Vip_privilegeConfig_descriptor_ = file->message_type(0);
  static const int Vip_privilegeConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vip_privilegeConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vip_privilegeConfig, privilege_),
  };
  Vip_privilegeConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vip_privilegeConfig_descriptor_,
      Vip_privilegeConfig::default_instance_,
      Vip_privilegeConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vip_privilegeConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vip_privilegeConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vip_privilegeConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Vip_5fprivilegeConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vip_privilegeConfig_descriptor_, &Vip_privilegeConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Vip_5fprivilegeConfig_2eproto() {
  delete Vip_privilegeConfig::default_instance_;
  delete Vip_privilegeConfig_reflection_;
}

void protobuf_AddDesc_Vip_5fprivilegeConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031Vip_privilegeConfig.proto\022\022DianShiTech"
    ".Config\032\025ConfigTypeGroup.proto\"4\n\023Vip_pr"
    "ivilegeConfig\022\n\n\002id\030\001 \001(\005\022\021\n\tprivilege\030\002"
    " \003(\005", 124);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Vip_privilegeConfig.proto", &protobuf_RegisterTypes);
  Vip_privilegeConfig::default_instance_ = new Vip_privilegeConfig();
  Vip_privilegeConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Vip_5fprivilegeConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Vip_5fprivilegeConfig_2eproto {
  StaticDescriptorInitializer_Vip_5fprivilegeConfig_2eproto() {
    protobuf_AddDesc_Vip_5fprivilegeConfig_2eproto();
  }
} static_descriptor_initializer_Vip_5fprivilegeConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Vip_privilegeConfig::kIdFieldNumber;
const int Vip_privilegeConfig::kPrivilegeFieldNumber;
#endif  // !_MSC_VER

Vip_privilegeConfig::Vip_privilegeConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vip_privilegeConfig::InitAsDefaultInstance() {
}

Vip_privilegeConfig::Vip_privilegeConfig(const Vip_privilegeConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vip_privilegeConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vip_privilegeConfig::~Vip_privilegeConfig() {
  SharedDtor();
}

void Vip_privilegeConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vip_privilegeConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vip_privilegeConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vip_privilegeConfig_descriptor_;
}

const Vip_privilegeConfig& Vip_privilegeConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Vip_5fprivilegeConfig_2eproto();
  return *default_instance_;
}

Vip_privilegeConfig* Vip_privilegeConfig::default_instance_ = NULL;

Vip_privilegeConfig* Vip_privilegeConfig::New() const {
  return new Vip_privilegeConfig;
}

void Vip_privilegeConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  privilege_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vip_privilegeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_privilege;
        break;
      }

      // repeated int32 privilege = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_privilege:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_privilege())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_privilege())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_privilege;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vip_privilegeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated int32 privilege = 2;
  for (int i = 0; i < this->privilege_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->privilege(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vip_privilegeConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated int32 privilege = 2;
  for (int i = 0; i < this->privilege_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->privilege(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vip_privilegeConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated int32 privilege = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->privilege_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->privilege(i));
    }
    total_size += 1 * this->privilege_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vip_privilegeConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vip_privilegeConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vip_privilegeConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vip_privilegeConfig::MergeFrom(const Vip_privilegeConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  privilege_.MergeFrom(from.privilege_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vip_privilegeConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vip_privilegeConfig::CopyFrom(const Vip_privilegeConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vip_privilegeConfig::IsInitialized() const {

  return true;
}

void Vip_privilegeConfig::Swap(Vip_privilegeConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    privilege_.Swap(&other->privilege_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vip_privilegeConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vip_privilegeConfig_descriptor_;
  metadata.reflection = Vip_privilegeConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

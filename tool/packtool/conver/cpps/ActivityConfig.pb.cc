// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActivityConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ActivityConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* ActivityConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ActivityConfig_2eproto() {
  protobuf_AddDesc_ActivityConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ActivityConfig.proto");
  GOOGLE_CHECK(file != NULL);
  ActivityConfig_descriptor_ = file->message_type(0);
  static const int ActivityConfig_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, activity_show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, act_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, open_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, hot_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, rule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, week_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, close_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, showornot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, title_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, activity_drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, show_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, showrule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, act_same_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, date_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, activity_name_),
  };
  ActivityConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityConfig_descriptor_,
      ActivityConfig::default_instance_,
      ActivityConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ActivityConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityConfig_descriptor_, &ActivityConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ActivityConfig_2eproto() {
  delete ActivityConfig::default_instance_;
  delete ActivityConfig_reflection_;
}

void protobuf_AddDesc_ActivityConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ActivityConfig.proto\022\022DianShiTech.Conf"
    "ig\032\025ConfigTypeGroup.proto\"\346\002\n\016ActivityCo"
    "nfig\022\025\n\ractivity_show\030\013 \003(\005\022\020\n\010act_type\030"
    "\004 \001(\005\022\021\n\topen_date\030\006 \001(\005\022\020\n\010hot_type\030\022 \001"
    "(\005\022\014\n\004rule\030\021 \001(\t\022\021\n\tweek_date\030\010 \003(\005\022\022\n\nc"
    "lose_date\030\007 \001(\005\022\021\n\tshowornot\030\014 \001(\005\022\n\n\002id"
    "\030\001 \001(\005\022\021\n\ttitle_res\030\017 \001(\005\022\023\n\013activity_id"
    "\030\002 \001(\005\022\025\n\ractivity_drop\030\n \003(\005\022\014\n\004desc\030\020 "
    "\001(\t\022\021\n\tshow_type\030\016 \001(\005\022\020\n\010showrule\030\r \001(\005"
    "\022\026\n\016act_same_index\030\t \001(\005\022\021\n\tdate_type\030\005 "
    "\001(\005\022\025\n\ractivity_name\030\003 \001(\t", 426);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ActivityConfig.proto", &protobuf_RegisterTypes);
  ActivityConfig::default_instance_ = new ActivityConfig();
  ActivityConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ActivityConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ActivityConfig_2eproto {
  StaticDescriptorInitializer_ActivityConfig_2eproto() {
    protobuf_AddDesc_ActivityConfig_2eproto();
  }
} static_descriptor_initializer_ActivityConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ActivityConfig::kActivityShowFieldNumber;
const int ActivityConfig::kActTypeFieldNumber;
const int ActivityConfig::kOpenDateFieldNumber;
const int ActivityConfig::kHotTypeFieldNumber;
const int ActivityConfig::kRuleFieldNumber;
const int ActivityConfig::kWeekDateFieldNumber;
const int ActivityConfig::kCloseDateFieldNumber;
const int ActivityConfig::kShowornotFieldNumber;
const int ActivityConfig::kIdFieldNumber;
const int ActivityConfig::kTitleResFieldNumber;
const int ActivityConfig::kActivityIdFieldNumber;
const int ActivityConfig::kActivityDropFieldNumber;
const int ActivityConfig::kDescFieldNumber;
const int ActivityConfig::kShowTypeFieldNumber;
const int ActivityConfig::kShowruleFieldNumber;
const int ActivityConfig::kActSameIndexFieldNumber;
const int ActivityConfig::kDateTypeFieldNumber;
const int ActivityConfig::kActivityNameFieldNumber;
#endif  // !_MSC_VER

ActivityConfig::ActivityConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityConfig::InitAsDefaultInstance() {
}

ActivityConfig::ActivityConfig(const ActivityConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityConfig::SharedCtor() {
  _cached_size_ = 0;
  act_type_ = 0;
  open_date_ = 0;
  hot_type_ = 0;
  rule_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  close_date_ = 0;
  showornot_ = 0;
  id_ = 0;
  title_res_ = 0;
  activity_id_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  show_type_ = 0;
  showrule_ = 0;
  act_same_index_ = 0;
  date_type_ = 0;
  activity_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityConfig::~ActivityConfig() {
  SharedDtor();
}

void ActivityConfig::SharedDtor() {
  if (rule_ != &::google::protobuf::internal::kEmptyString) {
    delete rule_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (activity_name_ != &::google::protobuf::internal::kEmptyString) {
    delete activity_name_;
  }
  if (this != default_instance_) {
  }
}

void ActivityConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityConfig_descriptor_;
}

const ActivityConfig& ActivityConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityConfig_2eproto();
  return *default_instance_;
}

ActivityConfig* ActivityConfig::default_instance_ = NULL;

ActivityConfig* ActivityConfig::New() const {
  return new ActivityConfig;
}

void ActivityConfig::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    act_type_ = 0;
    open_date_ = 0;
    hot_type_ = 0;
    if (has_rule()) {
      if (rule_ != &::google::protobuf::internal::kEmptyString) {
        rule_->clear();
      }
    }
    close_date_ = 0;
    showornot_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    id_ = 0;
    title_res_ = 0;
    activity_id_ = 0;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    show_type_ = 0;
    showrule_ = 0;
    act_same_index_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    date_type_ = 0;
    if (has_activity_name()) {
      if (activity_name_ != &::google::protobuf::internal::kEmptyString) {
        activity_name_->clear();
      }
    }
  }
  activity_show_.Clear();
  week_date_.Clear();
  activity_drop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activity_id;
        break;
      }

      // optional int32 activity_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_activity_name;
        break;
      }

      // optional string activity_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activity_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activity_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activity_name().data(), this->activity_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_act_type;
        break;
      }

      // optional int32 act_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_act_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &act_type_)));
          set_has_act_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_date_type;
        break;
      }

      // optional int32 date_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &date_type_)));
          set_has_date_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_open_date;
        break;
      }

      // optional int32 open_date = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_date_)));
          set_has_open_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_close_date;
        break;
      }

      // optional int32 close_date = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_close_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &close_date_)));
          set_has_close_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_week_date;
        break;
      }

      // repeated int32 week_date = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_week_date())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_week_date())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_week_date;
        if (input->ExpectTag(72)) goto parse_act_same_index;
        break;
      }

      // optional int32 act_same_index = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_act_same_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &act_same_index_)));
          set_has_act_same_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_activity_drop;
        break;
      }

      // repeated int32 activity_drop = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_activity_drop())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_activity_drop())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_activity_drop;
        if (input->ExpectTag(88)) goto parse_activity_show;
        break;
      }

      // repeated int32 activity_show = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_activity_show())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_activity_show())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_activity_show;
        if (input->ExpectTag(96)) goto parse_showornot;
        break;
      }

      // optional int32 showornot = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showornot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showornot_)));
          set_has_showornot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_showrule;
        break;
      }

      // optional int32 showrule = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showrule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showrule_)));
          set_has_showrule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_show_type;
        break;
      }

      // optional int32 show_type = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &show_type_)));
          set_has_show_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_title_res;
        break;
      }

      // optional int32 title_res = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &title_res_)));
          set_has_title_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_desc;
        break;
      }

      // optional string desc = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_rule;
        break;
      }

      // optional string rule = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rule()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rule().data(), this->rule().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_hot_type;
        break;
      }

      // optional int32 hot_type = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hot_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hot_type_)));
          set_has_hot_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 activity_id = 2;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->activity_id(), output);
  }

  // optional string activity_name = 3;
  if (has_activity_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activity_name().data(), this->activity_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->activity_name(), output);
  }

  // optional int32 act_type = 4;
  if (has_act_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->act_type(), output);
  }

  // optional int32 date_type = 5;
  if (has_date_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->date_type(), output);
  }

  // optional int32 open_date = 6;
  if (has_open_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->open_date(), output);
  }

  // optional int32 close_date = 7;
  if (has_close_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->close_date(), output);
  }

  // repeated int32 week_date = 8;
  for (int i = 0; i < this->week_date_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->week_date(i), output);
  }

  // optional int32 act_same_index = 9;
  if (has_act_same_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->act_same_index(), output);
  }

  // repeated int32 activity_drop = 10;
  for (int i = 0; i < this->activity_drop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->activity_drop(i), output);
  }

  // repeated int32 activity_show = 11;
  for (int i = 0; i < this->activity_show_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->activity_show(i), output);
  }

  // optional int32 showornot = 12;
  if (has_showornot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->showornot(), output);
  }

  // optional int32 showrule = 13;
  if (has_showrule()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->showrule(), output);
  }

  // optional int32 show_type = 14;
  if (has_show_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->show_type(), output);
  }

  // optional int32 title_res = 15;
  if (has_title_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->title_res(), output);
  }

  // optional string desc = 16;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->desc(), output);
  }

  // optional string rule = 17;
  if (has_rule()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rule().data(), this->rule().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->rule(), output);
  }

  // optional int32 hot_type = 18;
  if (has_hot_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->hot_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 activity_id = 2;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->activity_id(), target);
  }

  // optional string activity_name = 3;
  if (has_activity_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activity_name().data(), this->activity_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->activity_name(), target);
  }

  // optional int32 act_type = 4;
  if (has_act_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->act_type(), target);
  }

  // optional int32 date_type = 5;
  if (has_date_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->date_type(), target);
  }

  // optional int32 open_date = 6;
  if (has_open_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->open_date(), target);
  }

  // optional int32 close_date = 7;
  if (has_close_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->close_date(), target);
  }

  // repeated int32 week_date = 8;
  for (int i = 0; i < this->week_date_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->week_date(i), target);
  }

  // optional int32 act_same_index = 9;
  if (has_act_same_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->act_same_index(), target);
  }

  // repeated int32 activity_drop = 10;
  for (int i = 0; i < this->activity_drop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->activity_drop(i), target);
  }

  // repeated int32 activity_show = 11;
  for (int i = 0; i < this->activity_show_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->activity_show(i), target);
  }

  // optional int32 showornot = 12;
  if (has_showornot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->showornot(), target);
  }

  // optional int32 showrule = 13;
  if (has_showrule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->showrule(), target);
  }

  // optional int32 show_type = 14;
  if (has_show_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->show_type(), target);
  }

  // optional int32 title_res = 15;
  if (has_title_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->title_res(), target);
  }

  // optional string desc = 16;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->desc(), target);
  }

  // optional string rule = 17;
  if (has_rule()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rule().data(), this->rule().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->rule(), target);
  }

  // optional int32 hot_type = 18;
  if (has_hot_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->hot_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 act_type = 4;
    if (has_act_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->act_type());
    }

    // optional int32 open_date = 6;
    if (has_open_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_date());
    }

    // optional int32 hot_type = 18;
    if (has_hot_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hot_type());
    }

    // optional string rule = 17;
    if (has_rule()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rule());
    }

    // optional int32 close_date = 7;
    if (has_close_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->close_date());
    }

    // optional int32 showornot = 12;
    if (has_showornot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showornot());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 title_res = 15;
    if (has_title_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->title_res());
    }

    // optional int32 activity_id = 2;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_id());
    }

    // optional string desc = 16;
    if (has_desc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional int32 show_type = 14;
    if (has_show_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->show_type());
    }

    // optional int32 showrule = 13;
    if (has_showrule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showrule());
    }

    // optional int32 act_same_index = 9;
    if (has_act_same_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->act_same_index());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 date_type = 5;
    if (has_date_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->date_type());
    }

    // optional string activity_name = 3;
    if (has_activity_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activity_name());
    }

  }
  // repeated int32 activity_show = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->activity_show_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->activity_show(i));
    }
    total_size += 1 * this->activity_show_size() + data_size;
  }

  // repeated int32 week_date = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->week_date_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->week_date(i));
    }
    total_size += 1 * this->week_date_size() + data_size;
  }

  // repeated int32 activity_drop = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->activity_drop_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->activity_drop(i));
    }
    total_size += 1 * this->activity_drop_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityConfig::MergeFrom(const ActivityConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  activity_show_.MergeFrom(from.activity_show_);
  week_date_.MergeFrom(from.week_date_);
  activity_drop_.MergeFrom(from.activity_drop_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_act_type()) {
      set_act_type(from.act_type());
    }
    if (from.has_open_date()) {
      set_open_date(from.open_date());
    }
    if (from.has_hot_type()) {
      set_hot_type(from.hot_type());
    }
    if (from.has_rule()) {
      set_rule(from.rule());
    }
    if (from.has_close_date()) {
      set_close_date(from.close_date());
    }
    if (from.has_showornot()) {
      set_showornot(from.showornot());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_title_res()) {
      set_title_res(from.title_res());
    }
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_show_type()) {
      set_show_type(from.show_type());
    }
    if (from.has_showrule()) {
      set_showrule(from.showrule());
    }
    if (from.has_act_same_index()) {
      set_act_same_index(from.act_same_index());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_date_type()) {
      set_date_type(from.date_type());
    }
    if (from.has_activity_name()) {
      set_activity_name(from.activity_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityConfig::CopyFrom(const ActivityConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityConfig::IsInitialized() const {

  return true;
}

void ActivityConfig::Swap(ActivityConfig* other) {
  if (other != this) {
    activity_show_.Swap(&other->activity_show_);
    std::swap(act_type_, other->act_type_);
    std::swap(open_date_, other->open_date_);
    std::swap(hot_type_, other->hot_type_);
    std::swap(rule_, other->rule_);
    week_date_.Swap(&other->week_date_);
    std::swap(close_date_, other->close_date_);
    std::swap(showornot_, other->showornot_);
    std::swap(id_, other->id_);
    std::swap(title_res_, other->title_res_);
    std::swap(activity_id_, other->activity_id_);
    activity_drop_.Swap(&other->activity_drop_);
    std::swap(desc_, other->desc_);
    std::swap(show_type_, other->show_type_);
    std::swap(showrule_, other->showrule_);
    std::swap(act_same_index_, other->act_same_index_);
    std::swap(date_type_, other->date_type_);
    std::swap(activity_name_, other->activity_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityConfig_descriptor_;
  metadata.reflection = ActivityConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UnitConfig.proto

#ifndef PROTOBUF_UnitConfig_2eproto__INCLUDED
#define PROTOBUF_UnitConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UnitConfig_2eproto();
void protobuf_AssignDesc_UnitConfig_2eproto();
void protobuf_ShutdownFile_UnitConfig_2eproto();

class UnitConfig;

// ===================================================================

class UnitConfig : public ::google::protobuf::Message {
 public:
  UnitConfig();
  virtual ~UnitConfig();

  UnitConfig(const UnitConfig& from);

  inline UnitConfig& operator=(const UnitConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnitConfig& default_instance();

  void Swap(UnitConfig* other);

  // implements Message ----------------------------------------------

  UnitConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnitConfig& from);
  void MergeFrom(const UnitConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 unit_xy = 9;
  inline int unit_xy_size() const;
  inline void clear_unit_xy();
  static const int kUnitXyFieldNumber = 9;
  inline ::google::protobuf::int32 unit_xy(int index) const;
  inline void set_unit_xy(int index, ::google::protobuf::int32 value);
  inline void add_unit_xy(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      unit_xy() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_unit_xy();

  // optional int32 grown_id = 19;
  inline bool has_grown_id() const;
  inline void clear_grown_id();
  static const int kGrownIdFieldNumber = 19;
  inline ::google::protobuf::int32 grown_id() const;
  inline void set_grown_id(::google::protobuf::int32 value);

  // optional int32 can_dismantle = 32;
  inline bool has_can_dismantle() const;
  inline void clear_can_dismantle();
  static const int kCanDismantleFieldNumber = 32;
  inline ::google::protobuf::int32 can_dismantle() const;
  inline void set_can_dismantle(::google::protobuf::int32 value);

  // optional int32 skill = 24;
  inline bool has_skill() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 24;
  inline ::google::protobuf::int32 skill() const;
  inline void set_skill(::google::protobuf::int32 value);

  // optional int32 currency_type = 33;
  inline bool has_currency_type() const;
  inline void clear_currency_type();
  static const int kCurrencyTypeFieldNumber = 33;
  inline ::google::protobuf::int32 currency_type() const;
  inline void set_currency_type(::google::protobuf::int32 value);

  // repeated int32 dismantle_data = 35;
  inline int dismantle_data_size() const;
  inline void clear_dismantle_data();
  static const int kDismantleDataFieldNumber = 35;
  inline ::google::protobuf::int32 dismantle_data(int index) const;
  inline void set_dismantle_data(int index, ::google::protobuf::int32 value);
  inline void add_dismantle_data(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dismantle_data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dismantle_data();

  // optional int32 dismantle_cost = 34;
  inline bool has_dismantle_cost() const;
  inline void clear_dismantle_cost();
  static const int kDismantleCostFieldNumber = 34;
  inline ::google::protobuf::int32 dismantle_cost() const;
  inline void set_dismantle_cost(::google::protobuf::int32 value);

  // optional int32 is_exp_card = 3;
  inline bool has_is_exp_card() const;
  inline void clear_is_exp_card();
  static const int kIsExpCardFieldNumber = 3;
  inline ::google::protobuf::int32 is_exp_card() const;
  inline void set_is_exp_card(::google::protobuf::int32 value);

  // optional int32 card_rank = 12;
  inline bool has_card_rank() const;
  inline void clear_card_rank();
  static const int kCardRankFieldNumber = 12;
  inline ::google::protobuf::int32 card_rank() const;
  inline void set_card_rank(::google::protobuf::int32 value);

  // optional int32 unit_head_pic = 5;
  inline bool has_unit_head_pic() const;
  inline void clear_unit_head_pic();
  static const int kUnitHeadPicFieldNumber = 5;
  inline ::google::protobuf::int32 unit_head_pic() const;
  inline void set_unit_head_pic(::google::protobuf::int32 value);

  // optional int32 battle_head = 7;
  inline bool has_battle_head() const;
  inline void clear_battle_head();
  static const int kBattleHeadFieldNumber = 7;
  inline ::google::protobuf::int32 battle_head() const;
  inline void set_battle_head(::google::protobuf::int32 value);

  // optional int32 unit_type = 11;
  inline bool has_unit_type() const;
  inline void clear_unit_type();
  static const int kUnitTypeFieldNumber = 11;
  inline ::google::protobuf::int32 unit_type() const;
  inline void set_unit_type(::google::protobuf::int32 value);

  // repeated int32 fast_connect = 39;
  inline int fast_connect_size() const;
  inline void clear_fast_connect();
  static const int kFastConnectFieldNumber = 39;
  inline ::google::protobuf::int32 fast_connect(int index) const;
  inline void set_fast_connect(int index, ::google::protobuf::int32 value);
  inline void add_fast_connect(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fast_connect() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fast_connect();

  // optional int32 active_equipment = 27;
  inline bool has_active_equipment() const;
  inline void clear_active_equipment();
  static const int kActiveEquipmentFieldNumber = 27;
  inline ::google::protobuf::int32 active_equipment() const;
  inline void set_active_equipment(::google::protobuf::int32 value);

  // repeated int32 activate_units = 25;
  inline int activate_units_size() const;
  inline void clear_activate_units();
  static const int kActivateUnitsFieldNumber = 25;
  inline ::google::protobuf::int32 activate_units(int index) const;
  inline void set_activate_units(int index, ::google::protobuf::int32 value);
  inline void add_activate_units(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      activate_units() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_activate_units();

  // optional int32 card_improve = 41;
  inline bool has_card_improve() const;
  inline void clear_card_improve();
  static const int kCardImproveFieldNumber = 41;
  inline ::google::protobuf::int32 card_improve() const;
  inline void set_card_improve(::google::protobuf::int32 value);

  // optional int32 max_level = 14;
  inline bool has_max_level() const;
  inline void clear_max_level();
  static const int kMaxLevelFieldNumber = 14;
  inline ::google::protobuf::int32 max_level() const;
  inline void set_max_level(::google::protobuf::int32 value);

  // optional int32 attr_type = 18;
  inline bool has_attr_type() const;
  inline void clear_attr_type();
  static const int kAttrTypeFieldNumber = 18;
  inline ::google::protobuf::int32 attr_type() const;
  inline void set_attr_type(::google::protobuf::int32 value);

  // optional string equip_name = 28;
  inline bool has_equip_name() const;
  inline void clear_equip_name();
  static const int kEquipNameFieldNumber = 28;
  inline const ::std::string& equip_name() const;
  inline void set_equip_name(const ::std::string& value);
  inline void set_equip_name(const char* value);
  inline void set_equip_name(const char* value, size_t size);
  inline ::std::string* mutable_equip_name();
  inline ::std::string* release_equip_name();
  inline void set_allocated_equip_name(::std::string* equip_name);

  // optional int32 unit_root = 2;
  inline bool has_unit_root() const;
  inline void clear_unit_root();
  static const int kUnitRootFieldNumber = 2;
  inline ::google::protobuf::int32 unit_root() const;
  inline void set_unit_root(::google::protobuf::int32 value);

  // repeated int32 unit_dubbing = 38;
  inline int unit_dubbing_size() const;
  inline void clear_unit_dubbing();
  static const int kUnitDubbingFieldNumber = 38;
  inline ::google::protobuf::int32 unit_dubbing(int index) const;
  inline void set_unit_dubbing(int index, ::google::protobuf::int32 value);
  inline void add_unit_dubbing(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      unit_dubbing() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_unit_dubbing();

  // optional string unit_cardname = 17;
  inline bool has_unit_cardname() const;
  inline void clear_unit_cardname();
  static const int kUnitCardnameFieldNumber = 17;
  inline const ::std::string& unit_cardname() const;
  inline void set_unit_cardname(const ::std::string& value);
  inline void set_unit_cardname(const char* value);
  inline void set_unit_cardname(const char* value, size_t size);
  inline ::std::string* mutable_unit_cardname();
  inline ::std::string* release_unit_cardname();
  inline void set_allocated_unit_cardname(::std::string* unit_cardname);

  // optional string unit_name = 4;
  inline bool has_unit_name() const;
  inline void clear_unit_name();
  static const int kUnitNameFieldNumber = 4;
  inline const ::std::string& unit_name() const;
  inline void set_unit_name(const ::std::string& value);
  inline void set_unit_name(const char* value);
  inline void set_unit_name(const char* value, size_t size);
  inline ::std::string* mutable_unit_name();
  inline ::std::string* release_unit_name();
  inline void set_allocated_unit_name(::std::string* unit_name);

  // optional int32 unit_show = 10;
  inline bool has_unit_show() const;
  inline void clear_unit_show();
  static const int kUnitShowFieldNumber = 10;
  inline ::google::protobuf::int32 unit_show() const;
  inline void set_unit_show(::google::protobuf::int32 value);

  // repeated int32 card_puzzle_drop = 42;
  inline int card_puzzle_drop_size() const;
  inline void clear_card_puzzle_drop();
  static const int kCardPuzzleDropFieldNumber = 42;
  inline ::google::protobuf::int32 card_puzzle_drop(int index) const;
  inline void set_card_puzzle_drop(int index, ::google::protobuf::int32 value);
  inline void add_card_puzzle_drop(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      card_puzzle_drop() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_card_puzzle_drop();

  // optional int32 card_max_rank = 13;
  inline bool has_card_max_rank() const;
  inline void clear_card_max_rank();
  static const int kCardMaxRankFieldNumber = 13;
  inline ::google::protobuf::int32 card_max_rank() const;
  inline void set_card_max_rank(::google::protobuf::int32 value);

  // optional int32 unit_pic = 6;
  inline bool has_unit_pic() const;
  inline void clear_unit_pic();
  static const int kUnitPicFieldNumber = 6;
  inline ::google::protobuf::int32 unit_pic() const;
  inline void set_unit_pic(::google::protobuf::int32 value);

  // optional string country = 22;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 22;
  inline const ::std::string& country() const;
  inline void set_country(const ::std::string& value);
  inline void set_country(const char* value);
  inline void set_country(const char* value, size_t size);
  inline ::std::string* mutable_country();
  inline ::std::string* release_country();
  inline void set_allocated_country(::std::string* country);

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated .DianShiTech.Config.ConfigTypeGroup card_droup = 40;
  inline int card_droup_size() const;
  inline void clear_card_droup();
  static const int kCardDroupFieldNumber = 40;
  inline const ::DianShiTech::Config::ConfigTypeGroup& card_droup(int index) const;
  inline ::DianShiTech::Config::ConfigTypeGroup* mutable_card_droup(int index);
  inline ::DianShiTech::Config::ConfigTypeGroup* add_card_droup();
  inline const ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >&
      card_droup() const;
  inline ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >*
      mutable_card_droup();

  // optional string card_pathway = 37;
  inline bool has_card_pathway() const;
  inline void clear_card_pathway();
  static const int kCardPathwayFieldNumber = 37;
  inline const ::std::string& card_pathway() const;
  inline void set_card_pathway(const ::std::string& value);
  inline void set_card_pathway(const char* value);
  inline void set_card_pathway(const char* value, size_t size);
  inline ::std::string* mutable_card_pathway();
  inline ::std::string* release_card_pathway();
  inline void set_allocated_card_pathway(::std::string* card_pathway);

  // optional int32 gain_exp = 30;
  inline bool has_gain_exp() const;
  inline void clear_gain_exp();
  static const int kGainExpFieldNumber = 30;
  inline ::google::protobuf::int32 gain_exp() const;
  inline void set_gain_exp(::google::protobuf::int32 value);

  // optional int32 talent = 29;
  inline bool has_talent() const;
  inline void clear_talent();
  static const int kTalentFieldNumber = 29;
  inline ::google::protobuf::int32 talent() const;
  inline void set_talent(::google::protobuf::int32 value);

  // optional int32 config = 20;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 20;
  inline ::google::protobuf::int32 config() const;
  inline void set_config(::google::protobuf::int32 value);

  // optional int32 combined_skill = 26;
  inline bool has_combined_skill() const;
  inline void clear_combined_skill();
  static const int kCombinedSkillFieldNumber = 26;
  inline ::google::protobuf::int32 combined_skill() const;
  inline void set_combined_skill(::google::protobuf::int32 value);

  // optional int32 country1 = 23;
  inline bool has_country1() const;
  inline void clear_country1();
  static const int kCountry1FieldNumber = 23;
  inline ::google::protobuf::int32 country1() const;
  inline void set_country1(::google::protobuf::int32 value);

  // optional int32 lead_cost = 15;
  inline bool has_lead_cost() const;
  inline void clear_lead_cost();
  static const int kLeadCostFieldNumber = 15;
  inline ::google::protobuf::int32 lead_cost() const;
  inline void set_lead_cost(::google::protobuf::int32 value);

  // optional string description = 21;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 21;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional int32 skill_level_max = 16;
  inline bool has_skill_level_max() const;
  inline void clear_skill_level_max();
  static const int kSkillLevelMaxFieldNumber = 16;
  inline ::google::protobuf::int32 skill_level_max() const;
  inline void set_skill_level_max(::google::protobuf::int32 value);

  // optional int32 battle_pic = 8;
  inline bool has_battle_pic() const;
  inline void clear_battle_pic();
  static const int kBattlePicFieldNumber = 8;
  inline ::google::protobuf::int32 battle_pic() const;
  inline void set_battle_pic(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DianShiTech.Config.UnitConfig)
 private:
  inline void set_has_grown_id();
  inline void clear_has_grown_id();
  inline void set_has_can_dismantle();
  inline void clear_has_can_dismantle();
  inline void set_has_skill();
  inline void clear_has_skill();
  inline void set_has_currency_type();
  inline void clear_has_currency_type();
  inline void set_has_dismantle_cost();
  inline void clear_has_dismantle_cost();
  inline void set_has_is_exp_card();
  inline void clear_has_is_exp_card();
  inline void set_has_card_rank();
  inline void clear_has_card_rank();
  inline void set_has_unit_head_pic();
  inline void clear_has_unit_head_pic();
  inline void set_has_battle_head();
  inline void clear_has_battle_head();
  inline void set_has_unit_type();
  inline void clear_has_unit_type();
  inline void set_has_active_equipment();
  inline void clear_has_active_equipment();
  inline void set_has_card_improve();
  inline void clear_has_card_improve();
  inline void set_has_max_level();
  inline void clear_has_max_level();
  inline void set_has_attr_type();
  inline void clear_has_attr_type();
  inline void set_has_equip_name();
  inline void clear_has_equip_name();
  inline void set_has_unit_root();
  inline void clear_has_unit_root();
  inline void set_has_unit_cardname();
  inline void clear_has_unit_cardname();
  inline void set_has_unit_name();
  inline void clear_has_unit_name();
  inline void set_has_unit_show();
  inline void clear_has_unit_show();
  inline void set_has_card_max_rank();
  inline void clear_has_card_max_rank();
  inline void set_has_unit_pic();
  inline void clear_has_unit_pic();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_card_pathway();
  inline void clear_has_card_pathway();
  inline void set_has_gain_exp();
  inline void clear_has_gain_exp();
  inline void set_has_talent();
  inline void clear_has_talent();
  inline void set_has_config();
  inline void clear_has_config();
  inline void set_has_combined_skill();
  inline void clear_has_combined_skill();
  inline void set_has_country1();
  inline void clear_has_country1();
  inline void set_has_lead_cost();
  inline void clear_has_lead_cost();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_skill_level_max();
  inline void clear_has_skill_level_max();
  inline void set_has_battle_pic();
  inline void clear_has_battle_pic();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > unit_xy_;
  ::google::protobuf::int32 grown_id_;
  ::google::protobuf::int32 can_dismantle_;
  ::google::protobuf::int32 skill_;
  ::google::protobuf::int32 currency_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dismantle_data_;
  ::google::protobuf::int32 dismantle_cost_;
  ::google::protobuf::int32 is_exp_card_;
  ::google::protobuf::int32 card_rank_;
  ::google::protobuf::int32 unit_head_pic_;
  ::google::protobuf::int32 battle_head_;
  ::google::protobuf::int32 unit_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fast_connect_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > activate_units_;
  ::google::protobuf::int32 active_equipment_;
  ::google::protobuf::int32 card_improve_;
  ::google::protobuf::int32 max_level_;
  ::google::protobuf::int32 attr_type_;
  ::std::string* equip_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > unit_dubbing_;
  ::std::string* unit_cardname_;
  ::google::protobuf::int32 unit_root_;
  ::google::protobuf::int32 unit_show_;
  ::std::string* unit_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > card_puzzle_drop_;
  ::google::protobuf::int32 card_max_rank_;
  ::google::protobuf::int32 unit_pic_;
  ::std::string* country_;
  ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup > card_droup_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 gain_exp_;
  ::std::string* card_pathway_;
  ::google::protobuf::int32 talent_;
  ::google::protobuf::int32 config_;
  ::google::protobuf::int32 combined_skill_;
  ::google::protobuf::int32 country1_;
  ::std::string* description_;
  ::google::protobuf::int32 lead_cost_;
  ::google::protobuf::int32 skill_level_max_;
  ::google::protobuf::int32 battle_pic_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(40 + 31) / 32];

  friend void  protobuf_AddDesc_UnitConfig_2eproto();
  friend void protobuf_AssignDesc_UnitConfig_2eproto();
  friend void protobuf_ShutdownFile_UnitConfig_2eproto();

  void InitAsDefaultInstance();
  static UnitConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// UnitConfig

// repeated int32 unit_xy = 9;
inline int UnitConfig::unit_xy_size() const {
  return unit_xy_.size();
}
inline void UnitConfig::clear_unit_xy() {
  unit_xy_.Clear();
}
inline ::google::protobuf::int32 UnitConfig::unit_xy(int index) const {
  return unit_xy_.Get(index);
}
inline void UnitConfig::set_unit_xy(int index, ::google::protobuf::int32 value) {
  unit_xy_.Set(index, value);
}
inline void UnitConfig::add_unit_xy(::google::protobuf::int32 value) {
  unit_xy_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UnitConfig::unit_xy() const {
  return unit_xy_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UnitConfig::mutable_unit_xy() {
  return &unit_xy_;
}

// optional int32 grown_id = 19;
inline bool UnitConfig::has_grown_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnitConfig::set_has_grown_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnitConfig::clear_has_grown_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnitConfig::clear_grown_id() {
  grown_id_ = 0;
  clear_has_grown_id();
}
inline ::google::protobuf::int32 UnitConfig::grown_id() const {
  return grown_id_;
}
inline void UnitConfig::set_grown_id(::google::protobuf::int32 value) {
  set_has_grown_id();
  grown_id_ = value;
}

// optional int32 can_dismantle = 32;
inline bool UnitConfig::has_can_dismantle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnitConfig::set_has_can_dismantle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnitConfig::clear_has_can_dismantle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnitConfig::clear_can_dismantle() {
  can_dismantle_ = 0;
  clear_has_can_dismantle();
}
inline ::google::protobuf::int32 UnitConfig::can_dismantle() const {
  return can_dismantle_;
}
inline void UnitConfig::set_can_dismantle(::google::protobuf::int32 value) {
  set_has_can_dismantle();
  can_dismantle_ = value;
}

// optional int32 skill = 24;
inline bool UnitConfig::has_skill() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UnitConfig::set_has_skill() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UnitConfig::clear_has_skill() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UnitConfig::clear_skill() {
  skill_ = 0;
  clear_has_skill();
}
inline ::google::protobuf::int32 UnitConfig::skill() const {
  return skill_;
}
inline void UnitConfig::set_skill(::google::protobuf::int32 value) {
  set_has_skill();
  skill_ = value;
}

// optional int32 currency_type = 33;
inline bool UnitConfig::has_currency_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UnitConfig::set_has_currency_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UnitConfig::clear_has_currency_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UnitConfig::clear_currency_type() {
  currency_type_ = 0;
  clear_has_currency_type();
}
inline ::google::protobuf::int32 UnitConfig::currency_type() const {
  return currency_type_;
}
inline void UnitConfig::set_currency_type(::google::protobuf::int32 value) {
  set_has_currency_type();
  currency_type_ = value;
}

// repeated int32 dismantle_data = 35;
inline int UnitConfig::dismantle_data_size() const {
  return dismantle_data_.size();
}
inline void UnitConfig::clear_dismantle_data() {
  dismantle_data_.Clear();
}
inline ::google::protobuf::int32 UnitConfig::dismantle_data(int index) const {
  return dismantle_data_.Get(index);
}
inline void UnitConfig::set_dismantle_data(int index, ::google::protobuf::int32 value) {
  dismantle_data_.Set(index, value);
}
inline void UnitConfig::add_dismantle_data(::google::protobuf::int32 value) {
  dismantle_data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UnitConfig::dismantle_data() const {
  return dismantle_data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UnitConfig::mutable_dismantle_data() {
  return &dismantle_data_;
}

// optional int32 dismantle_cost = 34;
inline bool UnitConfig::has_dismantle_cost() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UnitConfig::set_has_dismantle_cost() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UnitConfig::clear_has_dismantle_cost() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UnitConfig::clear_dismantle_cost() {
  dismantle_cost_ = 0;
  clear_has_dismantle_cost();
}
inline ::google::protobuf::int32 UnitConfig::dismantle_cost() const {
  return dismantle_cost_;
}
inline void UnitConfig::set_dismantle_cost(::google::protobuf::int32 value) {
  set_has_dismantle_cost();
  dismantle_cost_ = value;
}

// optional int32 is_exp_card = 3;
inline bool UnitConfig::has_is_exp_card() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UnitConfig::set_has_is_exp_card() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UnitConfig::clear_has_is_exp_card() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UnitConfig::clear_is_exp_card() {
  is_exp_card_ = 0;
  clear_has_is_exp_card();
}
inline ::google::protobuf::int32 UnitConfig::is_exp_card() const {
  return is_exp_card_;
}
inline void UnitConfig::set_is_exp_card(::google::protobuf::int32 value) {
  set_has_is_exp_card();
  is_exp_card_ = value;
}

// optional int32 card_rank = 12;
inline bool UnitConfig::has_card_rank() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UnitConfig::set_has_card_rank() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UnitConfig::clear_has_card_rank() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UnitConfig::clear_card_rank() {
  card_rank_ = 0;
  clear_has_card_rank();
}
inline ::google::protobuf::int32 UnitConfig::card_rank() const {
  return card_rank_;
}
inline void UnitConfig::set_card_rank(::google::protobuf::int32 value) {
  set_has_card_rank();
  card_rank_ = value;
}

// optional int32 unit_head_pic = 5;
inline bool UnitConfig::has_unit_head_pic() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UnitConfig::set_has_unit_head_pic() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UnitConfig::clear_has_unit_head_pic() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UnitConfig::clear_unit_head_pic() {
  unit_head_pic_ = 0;
  clear_has_unit_head_pic();
}
inline ::google::protobuf::int32 UnitConfig::unit_head_pic() const {
  return unit_head_pic_;
}
inline void UnitConfig::set_unit_head_pic(::google::protobuf::int32 value) {
  set_has_unit_head_pic();
  unit_head_pic_ = value;
}

// optional int32 battle_head = 7;
inline bool UnitConfig::has_battle_head() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UnitConfig::set_has_battle_head() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UnitConfig::clear_has_battle_head() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UnitConfig::clear_battle_head() {
  battle_head_ = 0;
  clear_has_battle_head();
}
inline ::google::protobuf::int32 UnitConfig::battle_head() const {
  return battle_head_;
}
inline void UnitConfig::set_battle_head(::google::protobuf::int32 value) {
  set_has_battle_head();
  battle_head_ = value;
}

// optional int32 unit_type = 11;
inline bool UnitConfig::has_unit_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UnitConfig::set_has_unit_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UnitConfig::clear_has_unit_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UnitConfig::clear_unit_type() {
  unit_type_ = 0;
  clear_has_unit_type();
}
inline ::google::protobuf::int32 UnitConfig::unit_type() const {
  return unit_type_;
}
inline void UnitConfig::set_unit_type(::google::protobuf::int32 value) {
  set_has_unit_type();
  unit_type_ = value;
}

// repeated int32 fast_connect = 39;
inline int UnitConfig::fast_connect_size() const {
  return fast_connect_.size();
}
inline void UnitConfig::clear_fast_connect() {
  fast_connect_.Clear();
}
inline ::google::protobuf::int32 UnitConfig::fast_connect(int index) const {
  return fast_connect_.Get(index);
}
inline void UnitConfig::set_fast_connect(int index, ::google::protobuf::int32 value) {
  fast_connect_.Set(index, value);
}
inline void UnitConfig::add_fast_connect(::google::protobuf::int32 value) {
  fast_connect_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UnitConfig::fast_connect() const {
  return fast_connect_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UnitConfig::mutable_fast_connect() {
  return &fast_connect_;
}

// optional int32 active_equipment = 27;
inline bool UnitConfig::has_active_equipment() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UnitConfig::set_has_active_equipment() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UnitConfig::clear_has_active_equipment() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UnitConfig::clear_active_equipment() {
  active_equipment_ = 0;
  clear_has_active_equipment();
}
inline ::google::protobuf::int32 UnitConfig::active_equipment() const {
  return active_equipment_;
}
inline void UnitConfig::set_active_equipment(::google::protobuf::int32 value) {
  set_has_active_equipment();
  active_equipment_ = value;
}

// repeated int32 activate_units = 25;
inline int UnitConfig::activate_units_size() const {
  return activate_units_.size();
}
inline void UnitConfig::clear_activate_units() {
  activate_units_.Clear();
}
inline ::google::protobuf::int32 UnitConfig::activate_units(int index) const {
  return activate_units_.Get(index);
}
inline void UnitConfig::set_activate_units(int index, ::google::protobuf::int32 value) {
  activate_units_.Set(index, value);
}
inline void UnitConfig::add_activate_units(::google::protobuf::int32 value) {
  activate_units_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UnitConfig::activate_units() const {
  return activate_units_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UnitConfig::mutable_activate_units() {
  return &activate_units_;
}

// optional int32 card_improve = 41;
inline bool UnitConfig::has_card_improve() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UnitConfig::set_has_card_improve() {
  _has_bits_[0] |= 0x00008000u;
}
inline void UnitConfig::clear_has_card_improve() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void UnitConfig::clear_card_improve() {
  card_improve_ = 0;
  clear_has_card_improve();
}
inline ::google::protobuf::int32 UnitConfig::card_improve() const {
  return card_improve_;
}
inline void UnitConfig::set_card_improve(::google::protobuf::int32 value) {
  set_has_card_improve();
  card_improve_ = value;
}

// optional int32 max_level = 14;
inline bool UnitConfig::has_max_level() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void UnitConfig::set_has_max_level() {
  _has_bits_[0] |= 0x00010000u;
}
inline void UnitConfig::clear_has_max_level() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void UnitConfig::clear_max_level() {
  max_level_ = 0;
  clear_has_max_level();
}
inline ::google::protobuf::int32 UnitConfig::max_level() const {
  return max_level_;
}
inline void UnitConfig::set_max_level(::google::protobuf::int32 value) {
  set_has_max_level();
  max_level_ = value;
}

// optional int32 attr_type = 18;
inline bool UnitConfig::has_attr_type() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void UnitConfig::set_has_attr_type() {
  _has_bits_[0] |= 0x00020000u;
}
inline void UnitConfig::clear_has_attr_type() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void UnitConfig::clear_attr_type() {
  attr_type_ = 0;
  clear_has_attr_type();
}
inline ::google::protobuf::int32 UnitConfig::attr_type() const {
  return attr_type_;
}
inline void UnitConfig::set_attr_type(::google::protobuf::int32 value) {
  set_has_attr_type();
  attr_type_ = value;
}

// optional string equip_name = 28;
inline bool UnitConfig::has_equip_name() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void UnitConfig::set_has_equip_name() {
  _has_bits_[0] |= 0x00040000u;
}
inline void UnitConfig::clear_has_equip_name() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void UnitConfig::clear_equip_name() {
  if (equip_name_ != &::google::protobuf::internal::kEmptyString) {
    equip_name_->clear();
  }
  clear_has_equip_name();
}
inline const ::std::string& UnitConfig::equip_name() const {
  return *equip_name_;
}
inline void UnitConfig::set_equip_name(const ::std::string& value) {
  set_has_equip_name();
  if (equip_name_ == &::google::protobuf::internal::kEmptyString) {
    equip_name_ = new ::std::string;
  }
  equip_name_->assign(value);
}
inline void UnitConfig::set_equip_name(const char* value) {
  set_has_equip_name();
  if (equip_name_ == &::google::protobuf::internal::kEmptyString) {
    equip_name_ = new ::std::string;
  }
  equip_name_->assign(value);
}
inline void UnitConfig::set_equip_name(const char* value, size_t size) {
  set_has_equip_name();
  if (equip_name_ == &::google::protobuf::internal::kEmptyString) {
    equip_name_ = new ::std::string;
  }
  equip_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnitConfig::mutable_equip_name() {
  set_has_equip_name();
  if (equip_name_ == &::google::protobuf::internal::kEmptyString) {
    equip_name_ = new ::std::string;
  }
  return equip_name_;
}
inline ::std::string* UnitConfig::release_equip_name() {
  clear_has_equip_name();
  if (equip_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equip_name_;
    equip_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UnitConfig::set_allocated_equip_name(::std::string* equip_name) {
  if (equip_name_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_name_;
  }
  if (equip_name) {
    set_has_equip_name();
    equip_name_ = equip_name;
  } else {
    clear_has_equip_name();
    equip_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 unit_root = 2;
inline bool UnitConfig::has_unit_root() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void UnitConfig::set_has_unit_root() {
  _has_bits_[0] |= 0x00080000u;
}
inline void UnitConfig::clear_has_unit_root() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void UnitConfig::clear_unit_root() {
  unit_root_ = 0;
  clear_has_unit_root();
}
inline ::google::protobuf::int32 UnitConfig::unit_root() const {
  return unit_root_;
}
inline void UnitConfig::set_unit_root(::google::protobuf::int32 value) {
  set_has_unit_root();
  unit_root_ = value;
}

// repeated int32 unit_dubbing = 38;
inline int UnitConfig::unit_dubbing_size() const {
  return unit_dubbing_.size();
}
inline void UnitConfig::clear_unit_dubbing() {
  unit_dubbing_.Clear();
}
inline ::google::protobuf::int32 UnitConfig::unit_dubbing(int index) const {
  return unit_dubbing_.Get(index);
}
inline void UnitConfig::set_unit_dubbing(int index, ::google::protobuf::int32 value) {
  unit_dubbing_.Set(index, value);
}
inline void UnitConfig::add_unit_dubbing(::google::protobuf::int32 value) {
  unit_dubbing_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UnitConfig::unit_dubbing() const {
  return unit_dubbing_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UnitConfig::mutable_unit_dubbing() {
  return &unit_dubbing_;
}

// optional string unit_cardname = 17;
inline bool UnitConfig::has_unit_cardname() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void UnitConfig::set_has_unit_cardname() {
  _has_bits_[0] |= 0x00200000u;
}
inline void UnitConfig::clear_has_unit_cardname() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void UnitConfig::clear_unit_cardname() {
  if (unit_cardname_ != &::google::protobuf::internal::kEmptyString) {
    unit_cardname_->clear();
  }
  clear_has_unit_cardname();
}
inline const ::std::string& UnitConfig::unit_cardname() const {
  return *unit_cardname_;
}
inline void UnitConfig::set_unit_cardname(const ::std::string& value) {
  set_has_unit_cardname();
  if (unit_cardname_ == &::google::protobuf::internal::kEmptyString) {
    unit_cardname_ = new ::std::string;
  }
  unit_cardname_->assign(value);
}
inline void UnitConfig::set_unit_cardname(const char* value) {
  set_has_unit_cardname();
  if (unit_cardname_ == &::google::protobuf::internal::kEmptyString) {
    unit_cardname_ = new ::std::string;
  }
  unit_cardname_->assign(value);
}
inline void UnitConfig::set_unit_cardname(const char* value, size_t size) {
  set_has_unit_cardname();
  if (unit_cardname_ == &::google::protobuf::internal::kEmptyString) {
    unit_cardname_ = new ::std::string;
  }
  unit_cardname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnitConfig::mutable_unit_cardname() {
  set_has_unit_cardname();
  if (unit_cardname_ == &::google::protobuf::internal::kEmptyString) {
    unit_cardname_ = new ::std::string;
  }
  return unit_cardname_;
}
inline ::std::string* UnitConfig::release_unit_cardname() {
  clear_has_unit_cardname();
  if (unit_cardname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unit_cardname_;
    unit_cardname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UnitConfig::set_allocated_unit_cardname(::std::string* unit_cardname) {
  if (unit_cardname_ != &::google::protobuf::internal::kEmptyString) {
    delete unit_cardname_;
  }
  if (unit_cardname) {
    set_has_unit_cardname();
    unit_cardname_ = unit_cardname;
  } else {
    clear_has_unit_cardname();
    unit_cardname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string unit_name = 4;
inline bool UnitConfig::has_unit_name() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void UnitConfig::set_has_unit_name() {
  _has_bits_[0] |= 0x00400000u;
}
inline void UnitConfig::clear_has_unit_name() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void UnitConfig::clear_unit_name() {
  if (unit_name_ != &::google::protobuf::internal::kEmptyString) {
    unit_name_->clear();
  }
  clear_has_unit_name();
}
inline const ::std::string& UnitConfig::unit_name() const {
  return *unit_name_;
}
inline void UnitConfig::set_unit_name(const ::std::string& value) {
  set_has_unit_name();
  if (unit_name_ == &::google::protobuf::internal::kEmptyString) {
    unit_name_ = new ::std::string;
  }
  unit_name_->assign(value);
}
inline void UnitConfig::set_unit_name(const char* value) {
  set_has_unit_name();
  if (unit_name_ == &::google::protobuf::internal::kEmptyString) {
    unit_name_ = new ::std::string;
  }
  unit_name_->assign(value);
}
inline void UnitConfig::set_unit_name(const char* value, size_t size) {
  set_has_unit_name();
  if (unit_name_ == &::google::protobuf::internal::kEmptyString) {
    unit_name_ = new ::std::string;
  }
  unit_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnitConfig::mutable_unit_name() {
  set_has_unit_name();
  if (unit_name_ == &::google::protobuf::internal::kEmptyString) {
    unit_name_ = new ::std::string;
  }
  return unit_name_;
}
inline ::std::string* UnitConfig::release_unit_name() {
  clear_has_unit_name();
  if (unit_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unit_name_;
    unit_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UnitConfig::set_allocated_unit_name(::std::string* unit_name) {
  if (unit_name_ != &::google::protobuf::internal::kEmptyString) {
    delete unit_name_;
  }
  if (unit_name) {
    set_has_unit_name();
    unit_name_ = unit_name;
  } else {
    clear_has_unit_name();
    unit_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 unit_show = 10;
inline bool UnitConfig::has_unit_show() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void UnitConfig::set_has_unit_show() {
  _has_bits_[0] |= 0x00800000u;
}
inline void UnitConfig::clear_has_unit_show() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void UnitConfig::clear_unit_show() {
  unit_show_ = 0;
  clear_has_unit_show();
}
inline ::google::protobuf::int32 UnitConfig::unit_show() const {
  return unit_show_;
}
inline void UnitConfig::set_unit_show(::google::protobuf::int32 value) {
  set_has_unit_show();
  unit_show_ = value;
}

// repeated int32 card_puzzle_drop = 42;
inline int UnitConfig::card_puzzle_drop_size() const {
  return card_puzzle_drop_.size();
}
inline void UnitConfig::clear_card_puzzle_drop() {
  card_puzzle_drop_.Clear();
}
inline ::google::protobuf::int32 UnitConfig::card_puzzle_drop(int index) const {
  return card_puzzle_drop_.Get(index);
}
inline void UnitConfig::set_card_puzzle_drop(int index, ::google::protobuf::int32 value) {
  card_puzzle_drop_.Set(index, value);
}
inline void UnitConfig::add_card_puzzle_drop(::google::protobuf::int32 value) {
  card_puzzle_drop_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UnitConfig::card_puzzle_drop() const {
  return card_puzzle_drop_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UnitConfig::mutable_card_puzzle_drop() {
  return &card_puzzle_drop_;
}

// optional int32 card_max_rank = 13;
inline bool UnitConfig::has_card_max_rank() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void UnitConfig::set_has_card_max_rank() {
  _has_bits_[0] |= 0x02000000u;
}
inline void UnitConfig::clear_has_card_max_rank() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void UnitConfig::clear_card_max_rank() {
  card_max_rank_ = 0;
  clear_has_card_max_rank();
}
inline ::google::protobuf::int32 UnitConfig::card_max_rank() const {
  return card_max_rank_;
}
inline void UnitConfig::set_card_max_rank(::google::protobuf::int32 value) {
  set_has_card_max_rank();
  card_max_rank_ = value;
}

// optional int32 unit_pic = 6;
inline bool UnitConfig::has_unit_pic() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void UnitConfig::set_has_unit_pic() {
  _has_bits_[0] |= 0x04000000u;
}
inline void UnitConfig::clear_has_unit_pic() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void UnitConfig::clear_unit_pic() {
  unit_pic_ = 0;
  clear_has_unit_pic();
}
inline ::google::protobuf::int32 UnitConfig::unit_pic() const {
  return unit_pic_;
}
inline void UnitConfig::set_unit_pic(::google::protobuf::int32 value) {
  set_has_unit_pic();
  unit_pic_ = value;
}

// optional string country = 22;
inline bool UnitConfig::has_country() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void UnitConfig::set_has_country() {
  _has_bits_[0] |= 0x08000000u;
}
inline void UnitConfig::clear_has_country() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void UnitConfig::clear_country() {
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    country_->clear();
  }
  clear_has_country();
}
inline const ::std::string& UnitConfig::country() const {
  return *country_;
}
inline void UnitConfig::set_country(const ::std::string& value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(value);
}
inline void UnitConfig::set_country(const char* value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(value);
}
inline void UnitConfig::set_country(const char* value, size_t size) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnitConfig::mutable_country() {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  return country_;
}
inline ::std::string* UnitConfig::release_country() {
  clear_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = country_;
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UnitConfig::set_allocated_country(::std::string* country) {
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (country) {
    set_has_country();
    country_ = country;
  } else {
    clear_has_country();
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 id = 1;
inline bool UnitConfig::has_id() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void UnitConfig::set_has_id() {
  _has_bits_[0] |= 0x10000000u;
}
inline void UnitConfig::clear_has_id() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void UnitConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UnitConfig::id() const {
  return id_;
}
inline void UnitConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated .DianShiTech.Config.ConfigTypeGroup card_droup = 40;
inline int UnitConfig::card_droup_size() const {
  return card_droup_.size();
}
inline void UnitConfig::clear_card_droup() {
  card_droup_.Clear();
}
inline const ::DianShiTech::Config::ConfigTypeGroup& UnitConfig::card_droup(int index) const {
  return card_droup_.Get(index);
}
inline ::DianShiTech::Config::ConfigTypeGroup* UnitConfig::mutable_card_droup(int index) {
  return card_droup_.Mutable(index);
}
inline ::DianShiTech::Config::ConfigTypeGroup* UnitConfig::add_card_droup() {
  return card_droup_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >&
UnitConfig::card_droup() const {
  return card_droup_;
}
inline ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >*
UnitConfig::mutable_card_droup() {
  return &card_droup_;
}

// optional string card_pathway = 37;
inline bool UnitConfig::has_card_pathway() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void UnitConfig::set_has_card_pathway() {
  _has_bits_[0] |= 0x40000000u;
}
inline void UnitConfig::clear_has_card_pathway() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void UnitConfig::clear_card_pathway() {
  if (card_pathway_ != &::google::protobuf::internal::kEmptyString) {
    card_pathway_->clear();
  }
  clear_has_card_pathway();
}
inline const ::std::string& UnitConfig::card_pathway() const {
  return *card_pathway_;
}
inline void UnitConfig::set_card_pathway(const ::std::string& value) {
  set_has_card_pathway();
  if (card_pathway_ == &::google::protobuf::internal::kEmptyString) {
    card_pathway_ = new ::std::string;
  }
  card_pathway_->assign(value);
}
inline void UnitConfig::set_card_pathway(const char* value) {
  set_has_card_pathway();
  if (card_pathway_ == &::google::protobuf::internal::kEmptyString) {
    card_pathway_ = new ::std::string;
  }
  card_pathway_->assign(value);
}
inline void UnitConfig::set_card_pathway(const char* value, size_t size) {
  set_has_card_pathway();
  if (card_pathway_ == &::google::protobuf::internal::kEmptyString) {
    card_pathway_ = new ::std::string;
  }
  card_pathway_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnitConfig::mutable_card_pathway() {
  set_has_card_pathway();
  if (card_pathway_ == &::google::protobuf::internal::kEmptyString) {
    card_pathway_ = new ::std::string;
  }
  return card_pathway_;
}
inline ::std::string* UnitConfig::release_card_pathway() {
  clear_has_card_pathway();
  if (card_pathway_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = card_pathway_;
    card_pathway_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UnitConfig::set_allocated_card_pathway(::std::string* card_pathway) {
  if (card_pathway_ != &::google::protobuf::internal::kEmptyString) {
    delete card_pathway_;
  }
  if (card_pathway) {
    set_has_card_pathway();
    card_pathway_ = card_pathway;
  } else {
    clear_has_card_pathway();
    card_pathway_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 gain_exp = 30;
inline bool UnitConfig::has_gain_exp() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void UnitConfig::set_has_gain_exp() {
  _has_bits_[0] |= 0x80000000u;
}
inline void UnitConfig::clear_has_gain_exp() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void UnitConfig::clear_gain_exp() {
  gain_exp_ = 0;
  clear_has_gain_exp();
}
inline ::google::protobuf::int32 UnitConfig::gain_exp() const {
  return gain_exp_;
}
inline void UnitConfig::set_gain_exp(::google::protobuf::int32 value) {
  set_has_gain_exp();
  gain_exp_ = value;
}

// optional int32 talent = 29;
inline bool UnitConfig::has_talent() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void UnitConfig::set_has_talent() {
  _has_bits_[1] |= 0x00000001u;
}
inline void UnitConfig::clear_has_talent() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void UnitConfig::clear_talent() {
  talent_ = 0;
  clear_has_talent();
}
inline ::google::protobuf::int32 UnitConfig::talent() const {
  return talent_;
}
inline void UnitConfig::set_talent(::google::protobuf::int32 value) {
  set_has_talent();
  talent_ = value;
}

// optional int32 config = 20;
inline bool UnitConfig::has_config() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void UnitConfig::set_has_config() {
  _has_bits_[1] |= 0x00000002u;
}
inline void UnitConfig::clear_has_config() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void UnitConfig::clear_config() {
  config_ = 0;
  clear_has_config();
}
inline ::google::protobuf::int32 UnitConfig::config() const {
  return config_;
}
inline void UnitConfig::set_config(::google::protobuf::int32 value) {
  set_has_config();
  config_ = value;
}

// optional int32 combined_skill = 26;
inline bool UnitConfig::has_combined_skill() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void UnitConfig::set_has_combined_skill() {
  _has_bits_[1] |= 0x00000004u;
}
inline void UnitConfig::clear_has_combined_skill() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void UnitConfig::clear_combined_skill() {
  combined_skill_ = 0;
  clear_has_combined_skill();
}
inline ::google::protobuf::int32 UnitConfig::combined_skill() const {
  return combined_skill_;
}
inline void UnitConfig::set_combined_skill(::google::protobuf::int32 value) {
  set_has_combined_skill();
  combined_skill_ = value;
}

// optional int32 country1 = 23;
inline bool UnitConfig::has_country1() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void UnitConfig::set_has_country1() {
  _has_bits_[1] |= 0x00000008u;
}
inline void UnitConfig::clear_has_country1() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void UnitConfig::clear_country1() {
  country1_ = 0;
  clear_has_country1();
}
inline ::google::protobuf::int32 UnitConfig::country1() const {
  return country1_;
}
inline void UnitConfig::set_country1(::google::protobuf::int32 value) {
  set_has_country1();
  country1_ = value;
}

// optional int32 lead_cost = 15;
inline bool UnitConfig::has_lead_cost() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void UnitConfig::set_has_lead_cost() {
  _has_bits_[1] |= 0x00000010u;
}
inline void UnitConfig::clear_has_lead_cost() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void UnitConfig::clear_lead_cost() {
  lead_cost_ = 0;
  clear_has_lead_cost();
}
inline ::google::protobuf::int32 UnitConfig::lead_cost() const {
  return lead_cost_;
}
inline void UnitConfig::set_lead_cost(::google::protobuf::int32 value) {
  set_has_lead_cost();
  lead_cost_ = value;
}

// optional string description = 21;
inline bool UnitConfig::has_description() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void UnitConfig::set_has_description() {
  _has_bits_[1] |= 0x00000020u;
}
inline void UnitConfig::clear_has_description() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void UnitConfig::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& UnitConfig::description() const {
  return *description_;
}
inline void UnitConfig::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void UnitConfig::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void UnitConfig::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnitConfig::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* UnitConfig::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UnitConfig::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 skill_level_max = 16;
inline bool UnitConfig::has_skill_level_max() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void UnitConfig::set_has_skill_level_max() {
  _has_bits_[1] |= 0x00000040u;
}
inline void UnitConfig::clear_has_skill_level_max() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void UnitConfig::clear_skill_level_max() {
  skill_level_max_ = 0;
  clear_has_skill_level_max();
}
inline ::google::protobuf::int32 UnitConfig::skill_level_max() const {
  return skill_level_max_;
}
inline void UnitConfig::set_skill_level_max(::google::protobuf::int32 value) {
  set_has_skill_level_max();
  skill_level_max_ = value;
}

// optional int32 battle_pic = 8;
inline bool UnitConfig::has_battle_pic() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void UnitConfig::set_has_battle_pic() {
  _has_bits_[1] |= 0x00000080u;
}
inline void UnitConfig::clear_has_battle_pic() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void UnitConfig::clear_battle_pic() {
  battle_pic_ = 0;
  clear_has_battle_pic();
}
inline ::google::protobuf::int32 UnitConfig::battle_pic() const {
  return battle_pic_;
}
inline void UnitConfig::set_battle_pic(::google::protobuf::int32 value) {
  set_has_battle_pic();
  battle_pic_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UnitConfig_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LivenessConfig.proto

#ifndef PROTOBUF_LivenessConfig_2eproto__INCLUDED
#define PROTOBUF_LivenessConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LivenessConfig_2eproto();
void protobuf_AssignDesc_LivenessConfig_2eproto();
void protobuf_ShutdownFile_LivenessConfig_2eproto();

class LivenessConfig;

// ===================================================================

class LivenessConfig : public ::google::protobuf::Message {
 public:
  LivenessConfig();
  virtual ~LivenessConfig();

  LivenessConfig(const LivenessConfig& from);

  inline LivenessConfig& operator=(const LivenessConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LivenessConfig& default_instance();

  void Swap(LivenessConfig* other);

  // implements Message ----------------------------------------------

  LivenessConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LivenessConfig& from);
  void MergeFrom(const LivenessConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 pre_liveness = 5;
  inline bool has_pre_liveness() const;
  inline void clear_pre_liveness();
  static const int kPreLivenessFieldNumber = 5;
  inline ::google::protobuf::int32 pre_liveness() const;
  inline void set_pre_liveness(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 system_open_value = 10;
  inline bool has_system_open_value() const;
  inline void clear_system_open_value();
  static const int kSystemOpenValueFieldNumber = 10;
  inline ::google::protobuf::int32 system_open_value() const;
  inline void set_system_open_value(::google::protobuf::int32 value);

  // optional string desciption = 4;
  inline bool has_desciption() const;
  inline void clear_desciption();
  static const int kDesciptionFieldNumber = 4;
  inline const ::std::string& desciption() const;
  inline void set_desciption(const ::std::string& value);
  inline void set_desciption(const char* value);
  inline void set_desciption(const char* value, size_t size);
  inline ::std::string* mutable_desciption();
  inline ::std::string* release_desciption();
  inline void set_allocated_desciption(::std::string* desciption);

  // optional int32 is_open = 3;
  inline bool has_is_open() const;
  inline void clear_is_open();
  static const int kIsOpenFieldNumber = 3;
  inline ::google::protobuf::int32 is_open() const;
  inline void set_is_open(::google::protobuf::int32 value);

  // optional int32 count = 8;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 8;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional int32 next_liveness = 6;
  inline bool has_next_liveness() const;
  inline void clear_next_liveness();
  static const int kNextLivenessFieldNumber = 6;
  inline ::google::protobuf::int32 next_liveness() const;
  inline void set_next_liveness(::google::protobuf::int32 value);

  // optional int32 system_open_type = 9;
  inline bool has_system_open_type() const;
  inline void clear_system_open_type();
  static const int kSystemOpenTypeFieldNumber = 9;
  inline ::google::protobuf::int32 system_open_type() const;
  inline void set_system_open_type(::google::protobuf::int32 value);

  // optional int32 value = 7;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 7;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DianShiTech.Config.LivenessConfig)
 private:
  inline void set_has_pre_liveness();
  inline void clear_has_pre_liveness();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_system_open_value();
  inline void clear_has_system_open_value();
  inline void set_has_desciption();
  inline void clear_has_desciption();
  inline void set_has_is_open();
  inline void clear_has_is_open();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_next_liveness();
  inline void clear_has_next_liveness();
  inline void set_has_system_open_type();
  inline void clear_has_system_open_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 pre_liveness_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 system_open_value_;
  ::std::string* desciption_;
  ::google::protobuf::int32 is_open_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 next_liveness_;
  ::google::protobuf::int32 system_open_type_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_LivenessConfig_2eproto();
  friend void protobuf_AssignDesc_LivenessConfig_2eproto();
  friend void protobuf_ShutdownFile_LivenessConfig_2eproto();

  void InitAsDefaultInstance();
  static LivenessConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// LivenessConfig

// optional int32 pre_liveness = 5;
inline bool LivenessConfig::has_pre_liveness() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LivenessConfig::set_has_pre_liveness() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LivenessConfig::clear_has_pre_liveness() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LivenessConfig::clear_pre_liveness() {
  pre_liveness_ = 0;
  clear_has_pre_liveness();
}
inline ::google::protobuf::int32 LivenessConfig::pre_liveness() const {
  return pre_liveness_;
}
inline void LivenessConfig::set_pre_liveness(::google::protobuf::int32 value) {
  set_has_pre_liveness();
  pre_liveness_ = value;
}

// optional int32 type = 2;
inline bool LivenessConfig::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LivenessConfig::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LivenessConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LivenessConfig::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 LivenessConfig::type() const {
  return type_;
}
inline void LivenessConfig::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 id = 1;
inline bool LivenessConfig::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LivenessConfig::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LivenessConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LivenessConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 LivenessConfig::id() const {
  return id_;
}
inline void LivenessConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 system_open_value = 10;
inline bool LivenessConfig::has_system_open_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LivenessConfig::set_has_system_open_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LivenessConfig::clear_has_system_open_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LivenessConfig::clear_system_open_value() {
  system_open_value_ = 0;
  clear_has_system_open_value();
}
inline ::google::protobuf::int32 LivenessConfig::system_open_value() const {
  return system_open_value_;
}
inline void LivenessConfig::set_system_open_value(::google::protobuf::int32 value) {
  set_has_system_open_value();
  system_open_value_ = value;
}

// optional string desciption = 4;
inline bool LivenessConfig::has_desciption() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LivenessConfig::set_has_desciption() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LivenessConfig::clear_has_desciption() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LivenessConfig::clear_desciption() {
  if (desciption_ != &::google::protobuf::internal::kEmptyString) {
    desciption_->clear();
  }
  clear_has_desciption();
}
inline const ::std::string& LivenessConfig::desciption() const {
  return *desciption_;
}
inline void LivenessConfig::set_desciption(const ::std::string& value) {
  set_has_desciption();
  if (desciption_ == &::google::protobuf::internal::kEmptyString) {
    desciption_ = new ::std::string;
  }
  desciption_->assign(value);
}
inline void LivenessConfig::set_desciption(const char* value) {
  set_has_desciption();
  if (desciption_ == &::google::protobuf::internal::kEmptyString) {
    desciption_ = new ::std::string;
  }
  desciption_->assign(value);
}
inline void LivenessConfig::set_desciption(const char* value, size_t size) {
  set_has_desciption();
  if (desciption_ == &::google::protobuf::internal::kEmptyString) {
    desciption_ = new ::std::string;
  }
  desciption_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LivenessConfig::mutable_desciption() {
  set_has_desciption();
  if (desciption_ == &::google::protobuf::internal::kEmptyString) {
    desciption_ = new ::std::string;
  }
  return desciption_;
}
inline ::std::string* LivenessConfig::release_desciption() {
  clear_has_desciption();
  if (desciption_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desciption_;
    desciption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LivenessConfig::set_allocated_desciption(::std::string* desciption) {
  if (desciption_ != &::google::protobuf::internal::kEmptyString) {
    delete desciption_;
  }
  if (desciption) {
    set_has_desciption();
    desciption_ = desciption;
  } else {
    clear_has_desciption();
    desciption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 is_open = 3;
inline bool LivenessConfig::has_is_open() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LivenessConfig::set_has_is_open() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LivenessConfig::clear_has_is_open() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LivenessConfig::clear_is_open() {
  is_open_ = 0;
  clear_has_is_open();
}
inline ::google::protobuf::int32 LivenessConfig::is_open() const {
  return is_open_;
}
inline void LivenessConfig::set_is_open(::google::protobuf::int32 value) {
  set_has_is_open();
  is_open_ = value;
}

// optional int32 count = 8;
inline bool LivenessConfig::has_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LivenessConfig::set_has_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LivenessConfig::clear_has_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LivenessConfig::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 LivenessConfig::count() const {
  return count_;
}
inline void LivenessConfig::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 next_liveness = 6;
inline bool LivenessConfig::has_next_liveness() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LivenessConfig::set_has_next_liveness() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LivenessConfig::clear_has_next_liveness() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LivenessConfig::clear_next_liveness() {
  next_liveness_ = 0;
  clear_has_next_liveness();
}
inline ::google::protobuf::int32 LivenessConfig::next_liveness() const {
  return next_liveness_;
}
inline void LivenessConfig::set_next_liveness(::google::protobuf::int32 value) {
  set_has_next_liveness();
  next_liveness_ = value;
}

// optional int32 system_open_type = 9;
inline bool LivenessConfig::has_system_open_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LivenessConfig::set_has_system_open_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LivenessConfig::clear_has_system_open_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LivenessConfig::clear_system_open_type() {
  system_open_type_ = 0;
  clear_has_system_open_type();
}
inline ::google::protobuf::int32 LivenessConfig::system_open_type() const {
  return system_open_type_;
}
inline void LivenessConfig::set_system_open_type(::google::protobuf::int32 value) {
  set_has_system_open_type();
  system_open_type_ = value;
}

// optional int32 value = 7;
inline bool LivenessConfig::has_value() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LivenessConfig::set_has_value() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LivenessConfig::clear_has_value() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LivenessConfig::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 LivenessConfig::value() const {
  return value_;
}
inline void LivenessConfig::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LivenessConfig_2eproto__INCLUDED

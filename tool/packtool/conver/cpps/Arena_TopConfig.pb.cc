// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Arena_TopConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Arena_TopConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* Arena_TopConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Arena_TopConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Arena_5fTopConfig_2eproto() {
  protobuf_AddDesc_Arena_5fTopConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Arena_TopConfig.proto");
  GOOGLE_CHECK(file != NULL);
  Arena_TopConfig_descriptor_ = file->message_type(0);
  static const int Arena_TopConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arena_TopConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arena_TopConfig, max_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arena_TopConfig, min_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arena_TopConfig, drop_),
  };
  Arena_TopConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Arena_TopConfig_descriptor_,
      Arena_TopConfig::default_instance_,
      Arena_TopConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arena_TopConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arena_TopConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Arena_TopConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Arena_5fTopConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Arena_TopConfig_descriptor_, &Arena_TopConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Arena_5fTopConfig_2eproto() {
  delete Arena_TopConfig::default_instance_;
  delete Arena_TopConfig_reflection_;
}

void protobuf_AddDesc_Arena_5fTopConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025Arena_TopConfig.proto\022\022DianShiTech.Con"
    "fig\032\025ConfigTypeGroup.proto\"O\n\017Arena_TopC"
    "onfig\022\n\n\002id\030\001 \001(\005\022\020\n\010max_rank\030\003 \001(\005\022\020\n\010m"
    "in_rank\030\002 \001(\005\022\014\n\004drop\030\004 \003(\005", 147);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Arena_TopConfig.proto", &protobuf_RegisterTypes);
  Arena_TopConfig::default_instance_ = new Arena_TopConfig();
  Arena_TopConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Arena_5fTopConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Arena_5fTopConfig_2eproto {
  StaticDescriptorInitializer_Arena_5fTopConfig_2eproto() {
    protobuf_AddDesc_Arena_5fTopConfig_2eproto();
  }
} static_descriptor_initializer_Arena_5fTopConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Arena_TopConfig::kIdFieldNumber;
const int Arena_TopConfig::kMaxRankFieldNumber;
const int Arena_TopConfig::kMinRankFieldNumber;
const int Arena_TopConfig::kDropFieldNumber;
#endif  // !_MSC_VER

Arena_TopConfig::Arena_TopConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Arena_TopConfig::InitAsDefaultInstance() {
}

Arena_TopConfig::Arena_TopConfig(const Arena_TopConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Arena_TopConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  max_rank_ = 0;
  min_rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Arena_TopConfig::~Arena_TopConfig() {
  SharedDtor();
}

void Arena_TopConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Arena_TopConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Arena_TopConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Arena_TopConfig_descriptor_;
}

const Arena_TopConfig& Arena_TopConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_5fTopConfig_2eproto();
  return *default_instance_;
}

Arena_TopConfig* Arena_TopConfig::default_instance_ = NULL;

Arena_TopConfig* Arena_TopConfig::New() const {
  return new Arena_TopConfig;
}

void Arena_TopConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    max_rank_ = 0;
    min_rank_ = 0;
  }
  drop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Arena_TopConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_min_rank;
        break;
      }

      // optional int32 min_rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_rank_)));
          set_has_min_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_rank;
        break;
      }

      // optional int32 max_rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_rank_)));
          set_has_max_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_drop;
        break;
      }

      // repeated int32 drop = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_drop())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_drop())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_drop;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Arena_TopConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 min_rank = 2;
  if (has_min_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min_rank(), output);
  }

  // optional int32 max_rank = 3;
  if (has_max_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_rank(), output);
  }

  // repeated int32 drop = 4;
  for (int i = 0; i < this->drop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->drop(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Arena_TopConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 min_rank = 2;
  if (has_min_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min_rank(), target);
  }

  // optional int32 max_rank = 3;
  if (has_max_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_rank(), target);
  }

  // repeated int32 drop = 4;
  for (int i = 0; i < this->drop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->drop(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Arena_TopConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 max_rank = 3;
    if (has_max_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_rank());
    }

    // optional int32 min_rank = 2;
    if (has_min_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_rank());
    }

  }
  // repeated int32 drop = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->drop_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->drop(i));
    }
    total_size += 1 * this->drop_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Arena_TopConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Arena_TopConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Arena_TopConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Arena_TopConfig::MergeFrom(const Arena_TopConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  drop_.MergeFrom(from.drop_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_max_rank()) {
      set_max_rank(from.max_rank());
    }
    if (from.has_min_rank()) {
      set_min_rank(from.min_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Arena_TopConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Arena_TopConfig::CopyFrom(const Arena_TopConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Arena_TopConfig::IsInitialized() const {

  return true;
}

void Arena_TopConfig::Swap(Arena_TopConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(max_rank_, other->max_rank_);
    std::swap(min_rank_, other->min_rank_);
    drop_.Swap(&other->drop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Arena_TopConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Arena_TopConfig_descriptor_;
  metadata.reflection = Arena_TopConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

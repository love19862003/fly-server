// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UnitGrownConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UnitGrownConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* UnitGrownConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitGrownConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_UnitGrownConfig_2eproto() {
  protobuf_AddDesc_UnitGrownConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UnitGrownConfig.proto");
  GOOGLE_CHECK(file != NULL);
  UnitGrownConfig_descriptor_ = file->message_type(0);
  static const int UnitGrownConfig_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitGrownConfig, str_grown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitGrownConfig, int_grown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitGrownConfig, dom_grown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitGrownConfig, toughness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitGrownConfig, evade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitGrownConfig, heal_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitGrownConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitGrownConfig, damage_reduce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitGrownConfig, recommend_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitGrownConfig, hp_steal_fix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitGrownConfig, reflect_fix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitGrownConfig, damage_increase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitGrownConfig, hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitGrownConfig, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitGrownConfig, precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitGrownConfig, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitGrownConfig, cri_),
  };
  UnitGrownConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnitGrownConfig_descriptor_,
      UnitGrownConfig::default_instance_,
      UnitGrownConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitGrownConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitGrownConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitGrownConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UnitGrownConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitGrownConfig_descriptor_, &UnitGrownConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UnitGrownConfig_2eproto() {
  delete UnitGrownConfig::default_instance_;
  delete UnitGrownConfig_reflection_;
}

void protobuf_AddDesc_UnitGrownConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025UnitGrownConfig.proto\022\022DianShiTech.Con"
    "fig\032\025ConfigTypeGroup.proto\"\324\002\n\017UnitGrown"
    "Config\022\021\n\tstr_grown\030\002 \001(\005\022\021\n\tint_grown\030\003"
    " \001(\005\022\021\n\tdom_grown\030\004 \001(\005\022\021\n\ttoughness\030\010 \001"
    "(\005\022\r\n\005evade\030\005 \001(\005\022\024\n\014heal_percent\030\017 \001(\005\022"
    "\n\n\002id\030\001 \001(\005\022\025\n\rdamage_reduce\030\013 \001(\005\022\033\n\023re"
    "commend_attribute\030\020 \003(\005\022\024\n\014hp_steal_fix\030"
    "\016 \001(\005\022\023\n\013reflect_fix\030\r \001(\005\022\027\n\017damage_inc"
    "rease\030\014 \001(\005\022\013\n\003hit\030\006 \001(\005\022\020\n\010location\030\021 \001"
    "(\005\022\021\n\tprecision\030\n \001(\005\022\r\n\005block\030\t \001(\005\022\013\n\003"
    "cri\030\007 \001(\005", 409);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UnitGrownConfig.proto", &protobuf_RegisterTypes);
  UnitGrownConfig::default_instance_ = new UnitGrownConfig();
  UnitGrownConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UnitGrownConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UnitGrownConfig_2eproto {
  StaticDescriptorInitializer_UnitGrownConfig_2eproto() {
    protobuf_AddDesc_UnitGrownConfig_2eproto();
  }
} static_descriptor_initializer_UnitGrownConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UnitGrownConfig::kStrGrownFieldNumber;
const int UnitGrownConfig::kIntGrownFieldNumber;
const int UnitGrownConfig::kDomGrownFieldNumber;
const int UnitGrownConfig::kToughnessFieldNumber;
const int UnitGrownConfig::kEvadeFieldNumber;
const int UnitGrownConfig::kHealPercentFieldNumber;
const int UnitGrownConfig::kIdFieldNumber;
const int UnitGrownConfig::kDamageReduceFieldNumber;
const int UnitGrownConfig::kRecommendAttributeFieldNumber;
const int UnitGrownConfig::kHpStealFixFieldNumber;
const int UnitGrownConfig::kReflectFixFieldNumber;
const int UnitGrownConfig::kDamageIncreaseFieldNumber;
const int UnitGrownConfig::kHitFieldNumber;
const int UnitGrownConfig::kLocationFieldNumber;
const int UnitGrownConfig::kPrecisionFieldNumber;
const int UnitGrownConfig::kBlockFieldNumber;
const int UnitGrownConfig::kCriFieldNumber;
#endif  // !_MSC_VER

UnitGrownConfig::UnitGrownConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnitGrownConfig::InitAsDefaultInstance() {
}

UnitGrownConfig::UnitGrownConfig(const UnitGrownConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnitGrownConfig::SharedCtor() {
  _cached_size_ = 0;
  str_grown_ = 0;
  int_grown_ = 0;
  dom_grown_ = 0;
  toughness_ = 0;
  evade_ = 0;
  heal_percent_ = 0;
  id_ = 0;
  damage_reduce_ = 0;
  hp_steal_fix_ = 0;
  reflect_fix_ = 0;
  damage_increase_ = 0;
  hit_ = 0;
  location_ = 0;
  precision_ = 0;
  block_ = 0;
  cri_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitGrownConfig::~UnitGrownConfig() {
  SharedDtor();
}

void UnitGrownConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnitGrownConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnitGrownConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitGrownConfig_descriptor_;
}

const UnitGrownConfig& UnitGrownConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UnitGrownConfig_2eproto();
  return *default_instance_;
}

UnitGrownConfig* UnitGrownConfig::default_instance_ = NULL;

UnitGrownConfig* UnitGrownConfig::New() const {
  return new UnitGrownConfig;
}

void UnitGrownConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    str_grown_ = 0;
    int_grown_ = 0;
    dom_grown_ = 0;
    toughness_ = 0;
    evade_ = 0;
    heal_percent_ = 0;
    id_ = 0;
    damage_reduce_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    hp_steal_fix_ = 0;
    reflect_fix_ = 0;
    damage_increase_ = 0;
    hit_ = 0;
    location_ = 0;
    precision_ = 0;
    block_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    cri_ = 0;
  }
  recommend_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitGrownConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_str_grown;
        break;
      }

      // optional int32 str_grown = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_str_grown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &str_grown_)));
          set_has_str_grown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_int_grown;
        break;
      }

      // optional int32 int_grown = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_grown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_grown_)));
          set_has_int_grown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dom_grown;
        break;
      }

      // optional int32 dom_grown = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dom_grown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dom_grown_)));
          set_has_dom_grown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_evade;
        break;
      }

      // optional int32 evade = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_evade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &evade_)));
          set_has_evade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hit;
        break;
      }

      // optional int32 hit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hit_)));
          set_has_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cri;
        break;
      }

      // optional int32 cri = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cri_)));
          set_has_cri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_toughness;
        break;
      }

      // optional int32 toughness = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toughness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toughness_)));
          set_has_toughness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_block;
        break;
      }

      // optional int32 block = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_)));
          set_has_block();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_precision;
        break;
      }

      // optional int32 precision = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precision_)));
          set_has_precision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_damage_reduce;
        break;
      }

      // optional int32 damage_reduce = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_reduce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_reduce_)));
          set_has_damage_reduce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_damage_increase;
        break;
      }

      // optional int32 damage_increase = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_increase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_increase_)));
          set_has_damage_increase();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_reflect_fix;
        break;
      }

      // optional int32 reflect_fix = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reflect_fix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reflect_fix_)));
          set_has_reflect_fix();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_hp_steal_fix;
        break;
      }

      // optional int32 hp_steal_fix = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp_steal_fix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_steal_fix_)));
          set_has_hp_steal_fix();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_heal_percent;
        break;
      }

      // optional int32 heal_percent = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heal_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heal_percent_)));
          set_has_heal_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_recommend_attribute;
        break;
      }

      // repeated int32 recommend_attribute = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recommend_attribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 128, input, this->mutable_recommend_attribute())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_recommend_attribute())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_recommend_attribute;
        if (input->ExpectTag(136)) goto parse_location;
        break;
      }

      // optional int32 location = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &location_)));
          set_has_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnitGrownConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 str_grown = 2;
  if (has_str_grown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->str_grown(), output);
  }

  // optional int32 int_grown = 3;
  if (has_int_grown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->int_grown(), output);
  }

  // optional int32 dom_grown = 4;
  if (has_dom_grown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dom_grown(), output);
  }

  // optional int32 evade = 5;
  if (has_evade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->evade(), output);
  }

  // optional int32 hit = 6;
  if (has_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hit(), output);
  }

  // optional int32 cri = 7;
  if (has_cri()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cri(), output);
  }

  // optional int32 toughness = 8;
  if (has_toughness()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->toughness(), output);
  }

  // optional int32 block = 9;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->block(), output);
  }

  // optional int32 precision = 10;
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->precision(), output);
  }

  // optional int32 damage_reduce = 11;
  if (has_damage_reduce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->damage_reduce(), output);
  }

  // optional int32 damage_increase = 12;
  if (has_damage_increase()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->damage_increase(), output);
  }

  // optional int32 reflect_fix = 13;
  if (has_reflect_fix()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->reflect_fix(), output);
  }

  // optional int32 hp_steal_fix = 14;
  if (has_hp_steal_fix()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->hp_steal_fix(), output);
  }

  // optional int32 heal_percent = 15;
  if (has_heal_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->heal_percent(), output);
  }

  // repeated int32 recommend_attribute = 16;
  for (int i = 0; i < this->recommend_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      16, this->recommend_attribute(i), output);
  }

  // optional int32 location = 17;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->location(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnitGrownConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 str_grown = 2;
  if (has_str_grown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->str_grown(), target);
  }

  // optional int32 int_grown = 3;
  if (has_int_grown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->int_grown(), target);
  }

  // optional int32 dom_grown = 4;
  if (has_dom_grown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dom_grown(), target);
  }

  // optional int32 evade = 5;
  if (has_evade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->evade(), target);
  }

  // optional int32 hit = 6;
  if (has_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hit(), target);
  }

  // optional int32 cri = 7;
  if (has_cri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cri(), target);
  }

  // optional int32 toughness = 8;
  if (has_toughness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->toughness(), target);
  }

  // optional int32 block = 9;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->block(), target);
  }

  // optional int32 precision = 10;
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->precision(), target);
  }

  // optional int32 damage_reduce = 11;
  if (has_damage_reduce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->damage_reduce(), target);
  }

  // optional int32 damage_increase = 12;
  if (has_damage_increase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->damage_increase(), target);
  }

  // optional int32 reflect_fix = 13;
  if (has_reflect_fix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->reflect_fix(), target);
  }

  // optional int32 hp_steal_fix = 14;
  if (has_hp_steal_fix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->hp_steal_fix(), target);
  }

  // optional int32 heal_percent = 15;
  if (has_heal_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->heal_percent(), target);
  }

  // repeated int32 recommend_attribute = 16;
  for (int i = 0; i < this->recommend_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(16, this->recommend_attribute(i), target);
  }

  // optional int32 location = 17;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->location(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnitGrownConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 str_grown = 2;
    if (has_str_grown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->str_grown());
    }

    // optional int32 int_grown = 3;
    if (has_int_grown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_grown());
    }

    // optional int32 dom_grown = 4;
    if (has_dom_grown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dom_grown());
    }

    // optional int32 toughness = 8;
    if (has_toughness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toughness());
    }

    // optional int32 evade = 5;
    if (has_evade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->evade());
    }

    // optional int32 heal_percent = 15;
    if (has_heal_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heal_percent());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 damage_reduce = 11;
    if (has_damage_reduce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_reduce());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 hp_steal_fix = 14;
    if (has_hp_steal_fix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp_steal_fix());
    }

    // optional int32 reflect_fix = 13;
    if (has_reflect_fix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reflect_fix());
    }

    // optional int32 damage_increase = 12;
    if (has_damage_increase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_increase());
    }

    // optional int32 hit = 6;
    if (has_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hit());
    }

    // optional int32 location = 17;
    if (has_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->location());
    }

    // optional int32 precision = 10;
    if (has_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->precision());
    }

    // optional int32 block = 9;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->block());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 cri = 7;
    if (has_cri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cri());
    }

  }
  // repeated int32 recommend_attribute = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->recommend_attribute_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->recommend_attribute(i));
    }
    total_size += 2 * this->recommend_attribute_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitGrownConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitGrownConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnitGrownConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitGrownConfig::MergeFrom(const UnitGrownConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  recommend_attribute_.MergeFrom(from.recommend_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str_grown()) {
      set_str_grown(from.str_grown());
    }
    if (from.has_int_grown()) {
      set_int_grown(from.int_grown());
    }
    if (from.has_dom_grown()) {
      set_dom_grown(from.dom_grown());
    }
    if (from.has_toughness()) {
      set_toughness(from.toughness());
    }
    if (from.has_evade()) {
      set_evade(from.evade());
    }
    if (from.has_heal_percent()) {
      set_heal_percent(from.heal_percent());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_damage_reduce()) {
      set_damage_reduce(from.damage_reduce());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_hp_steal_fix()) {
      set_hp_steal_fix(from.hp_steal_fix());
    }
    if (from.has_reflect_fix()) {
      set_reflect_fix(from.reflect_fix());
    }
    if (from.has_damage_increase()) {
      set_damage_increase(from.damage_increase());
    }
    if (from.has_hit()) {
      set_hit(from.hit());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_precision()) {
      set_precision(from.precision());
    }
    if (from.has_block()) {
      set_block(from.block());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_cri()) {
      set_cri(from.cri());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitGrownConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitGrownConfig::CopyFrom(const UnitGrownConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitGrownConfig::IsInitialized() const {

  return true;
}

void UnitGrownConfig::Swap(UnitGrownConfig* other) {
  if (other != this) {
    std::swap(str_grown_, other->str_grown_);
    std::swap(int_grown_, other->int_grown_);
    std::swap(dom_grown_, other->dom_grown_);
    std::swap(toughness_, other->toughness_);
    std::swap(evade_, other->evade_);
    std::swap(heal_percent_, other->heal_percent_);
    std::swap(id_, other->id_);
    std::swap(damage_reduce_, other->damage_reduce_);
    recommend_attribute_.Swap(&other->recommend_attribute_);
    std::swap(hp_steal_fix_, other->hp_steal_fix_);
    std::swap(reflect_fix_, other->reflect_fix_);
    std::swap(damage_increase_, other->damage_increase_);
    std::swap(hit_, other->hit_);
    std::swap(location_, other->location_);
    std::swap(precision_, other->precision_);
    std::swap(block_, other->block_);
    std::swap(cri_, other->cri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnitGrownConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitGrownConfig_descriptor_;
  metadata.reflection = UnitGrownConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

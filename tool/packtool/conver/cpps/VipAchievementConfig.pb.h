// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VipAchievementConfig.proto

#ifndef PROTOBUF_VipAchievementConfig_2eproto__INCLUDED
#define PROTOBUF_VipAchievementConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_VipAchievementConfig_2eproto();
void protobuf_AssignDesc_VipAchievementConfig_2eproto();
void protobuf_ShutdownFile_VipAchievementConfig_2eproto();

class VipAchievementConfig;

// ===================================================================

class VipAchievementConfig : public ::google::protobuf::Message {
 public:
  VipAchievementConfig();
  virtual ~VipAchievementConfig();

  VipAchievementConfig(const VipAchievementConfig& from);

  inline VipAchievementConfig& operator=(const VipAchievementConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VipAchievementConfig& default_instance();

  void Swap(VipAchievementConfig* other);

  // implements Message ----------------------------------------------

  VipAchievementConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VipAchievementConfig& from);
  void MergeFrom(const VipAchievementConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 open_task = 9;
  inline bool has_open_task() const;
  inline void clear_open_task();
  static const int kOpenTaskFieldNumber = 9;
  inline ::google::protobuf::int32 open_task() const;
  inline void set_open_task(::google::protobuf::int32 value);

  // optional int32 isopen = 12;
  inline bool has_isopen() const;
  inline void clear_isopen();
  static const int kIsopenFieldNumber = 12;
  inline ::google::protobuf::int32 isopen() const;
  inline void set_isopen(::google::protobuf::int32 value);

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 condition = 6;
  inline bool has_condition() const;
  inline void clear_condition();
  static const int kConditionFieldNumber = 6;
  inline ::google::protobuf::int32 condition() const;
  inline void set_condition(::google::protobuf::int32 value);

  // optional string desc = 5;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 5;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // optional int32 jump_value = 14;
  inline bool has_jump_value() const;
  inline void clear_jump_value();
  static const int kJumpValueFieldNumber = 14;
  inline ::google::protobuf::int32 jump_value() const;
  inline void set_jump_value(::google::protobuf::int32 value);

  // optional int32 jump_type = 13;
  inline bool has_jump_type() const;
  inline void clear_jump_type();
  static const int kJumpTypeFieldNumber = 13;
  inline ::google::protobuf::int32 jump_type() const;
  inline void set_jump_type(::google::protobuf::int32 value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 condition_para = 7;
  inline bool has_condition_para() const;
  inline void clear_condition_para();
  static const int kConditionParaFieldNumber = 7;
  inline ::google::protobuf::int32 condition_para() const;
  inline void set_condition_para(::google::protobuf::int32 value);

  // optional int32 achievement_point = 8;
  inline bool has_achievement_point() const;
  inline void clear_achievement_point();
  static const int kAchievementPointFieldNumber = 8;
  inline ::google::protobuf::int32 achievement_point() const;
  inline void set_achievement_point(::google::protobuf::int32 value);

  // optional int32 sheet_type = 3;
  inline bool has_sheet_type() const;
  inline void clear_sheet_type();
  static const int kSheetTypeFieldNumber = 3;
  inline ::google::protobuf::int32 sheet_type() const;
  inline void set_sheet_type(::google::protobuf::int32 value);

  // optional int32 active_level = 11;
  inline bool has_active_level() const;
  inline void clear_active_level();
  static const int kActiveLevelFieldNumber = 11;
  inline ::google::protobuf::int32 active_level() const;
  inline void set_active_level(::google::protobuf::int32 value);

  // optional int32 bonus = 10;
  inline bool has_bonus() const;
  inline void clear_bonus();
  static const int kBonusFieldNumber = 10;
  inline ::google::protobuf::int32 bonus() const;
  inline void set_bonus(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DianShiTech.Config.VipAchievementConfig)
 private:
  inline void set_has_open_task();
  inline void clear_has_open_task();
  inline void set_has_isopen();
  inline void clear_has_isopen();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_condition();
  inline void clear_has_condition();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_jump_value();
  inline void clear_has_jump_value();
  inline void set_has_jump_type();
  inline void clear_has_jump_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_condition_para();
  inline void clear_has_condition_para();
  inline void set_has_achievement_point();
  inline void clear_has_achievement_point();
  inline void set_has_sheet_type();
  inline void clear_has_sheet_type();
  inline void set_has_active_level();
  inline void clear_has_active_level();
  inline void set_has_bonus();
  inline void clear_has_bonus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 open_task_;
  ::google::protobuf::int32 isopen_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 condition_;
  ::std::string* desc_;
  ::google::protobuf::int32 jump_value_;
  ::google::protobuf::int32 jump_type_;
  ::std::string* name_;
  ::google::protobuf::int32 condition_para_;
  ::google::protobuf::int32 achievement_point_;
  ::google::protobuf::int32 sheet_type_;
  ::google::protobuf::int32 active_level_;
  ::google::protobuf::int32 bonus_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_VipAchievementConfig_2eproto();
  friend void protobuf_AssignDesc_VipAchievementConfig_2eproto();
  friend void protobuf_ShutdownFile_VipAchievementConfig_2eproto();

  void InitAsDefaultInstance();
  static VipAchievementConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// VipAchievementConfig

// optional int32 open_task = 9;
inline bool VipAchievementConfig::has_open_task() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VipAchievementConfig::set_has_open_task() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VipAchievementConfig::clear_has_open_task() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VipAchievementConfig::clear_open_task() {
  open_task_ = 0;
  clear_has_open_task();
}
inline ::google::protobuf::int32 VipAchievementConfig::open_task() const {
  return open_task_;
}
inline void VipAchievementConfig::set_open_task(::google::protobuf::int32 value) {
  set_has_open_task();
  open_task_ = value;
}

// optional int32 isopen = 12;
inline bool VipAchievementConfig::has_isopen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VipAchievementConfig::set_has_isopen() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VipAchievementConfig::clear_has_isopen() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VipAchievementConfig::clear_isopen() {
  isopen_ = 0;
  clear_has_isopen();
}
inline ::google::protobuf::int32 VipAchievementConfig::isopen() const {
  return isopen_;
}
inline void VipAchievementConfig::set_isopen(::google::protobuf::int32 value) {
  set_has_isopen();
  isopen_ = value;
}

// optional int32 id = 1;
inline bool VipAchievementConfig::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VipAchievementConfig::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VipAchievementConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VipAchievementConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 VipAchievementConfig::id() const {
  return id_;
}
inline void VipAchievementConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 condition = 6;
inline bool VipAchievementConfig::has_condition() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VipAchievementConfig::set_has_condition() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VipAchievementConfig::clear_has_condition() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VipAchievementConfig::clear_condition() {
  condition_ = 0;
  clear_has_condition();
}
inline ::google::protobuf::int32 VipAchievementConfig::condition() const {
  return condition_;
}
inline void VipAchievementConfig::set_condition(::google::protobuf::int32 value) {
  set_has_condition();
  condition_ = value;
}

// optional string desc = 5;
inline bool VipAchievementConfig::has_desc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VipAchievementConfig::set_has_desc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VipAchievementConfig::clear_has_desc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VipAchievementConfig::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& VipAchievementConfig::desc() const {
  return *desc_;
}
inline void VipAchievementConfig::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void VipAchievementConfig::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void VipAchievementConfig::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VipAchievementConfig::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* VipAchievementConfig::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VipAchievementConfig::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 jump_value = 14;
inline bool VipAchievementConfig::has_jump_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VipAchievementConfig::set_has_jump_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VipAchievementConfig::clear_has_jump_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VipAchievementConfig::clear_jump_value() {
  jump_value_ = 0;
  clear_has_jump_value();
}
inline ::google::protobuf::int32 VipAchievementConfig::jump_value() const {
  return jump_value_;
}
inline void VipAchievementConfig::set_jump_value(::google::protobuf::int32 value) {
  set_has_jump_value();
  jump_value_ = value;
}

// optional int32 jump_type = 13;
inline bool VipAchievementConfig::has_jump_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VipAchievementConfig::set_has_jump_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VipAchievementConfig::clear_has_jump_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VipAchievementConfig::clear_jump_type() {
  jump_type_ = 0;
  clear_has_jump_type();
}
inline ::google::protobuf::int32 VipAchievementConfig::jump_type() const {
  return jump_type_;
}
inline void VipAchievementConfig::set_jump_type(::google::protobuf::int32 value) {
  set_has_jump_type();
  jump_type_ = value;
}

// optional string name = 4;
inline bool VipAchievementConfig::has_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VipAchievementConfig::set_has_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VipAchievementConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VipAchievementConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& VipAchievementConfig::name() const {
  return *name_;
}
inline void VipAchievementConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void VipAchievementConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void VipAchievementConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VipAchievementConfig::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* VipAchievementConfig::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VipAchievementConfig::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 condition_para = 7;
inline bool VipAchievementConfig::has_condition_para() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VipAchievementConfig::set_has_condition_para() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VipAchievementConfig::clear_has_condition_para() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VipAchievementConfig::clear_condition_para() {
  condition_para_ = 0;
  clear_has_condition_para();
}
inline ::google::protobuf::int32 VipAchievementConfig::condition_para() const {
  return condition_para_;
}
inline void VipAchievementConfig::set_condition_para(::google::protobuf::int32 value) {
  set_has_condition_para();
  condition_para_ = value;
}

// optional int32 achievement_point = 8;
inline bool VipAchievementConfig::has_achievement_point() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VipAchievementConfig::set_has_achievement_point() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VipAchievementConfig::clear_has_achievement_point() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VipAchievementConfig::clear_achievement_point() {
  achievement_point_ = 0;
  clear_has_achievement_point();
}
inline ::google::protobuf::int32 VipAchievementConfig::achievement_point() const {
  return achievement_point_;
}
inline void VipAchievementConfig::set_achievement_point(::google::protobuf::int32 value) {
  set_has_achievement_point();
  achievement_point_ = value;
}

// optional int32 sheet_type = 3;
inline bool VipAchievementConfig::has_sheet_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VipAchievementConfig::set_has_sheet_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VipAchievementConfig::clear_has_sheet_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VipAchievementConfig::clear_sheet_type() {
  sheet_type_ = 0;
  clear_has_sheet_type();
}
inline ::google::protobuf::int32 VipAchievementConfig::sheet_type() const {
  return sheet_type_;
}
inline void VipAchievementConfig::set_sheet_type(::google::protobuf::int32 value) {
  set_has_sheet_type();
  sheet_type_ = value;
}

// optional int32 active_level = 11;
inline bool VipAchievementConfig::has_active_level() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VipAchievementConfig::set_has_active_level() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VipAchievementConfig::clear_has_active_level() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VipAchievementConfig::clear_active_level() {
  active_level_ = 0;
  clear_has_active_level();
}
inline ::google::protobuf::int32 VipAchievementConfig::active_level() const {
  return active_level_;
}
inline void VipAchievementConfig::set_active_level(::google::protobuf::int32 value) {
  set_has_active_level();
  active_level_ = value;
}

// optional int32 bonus = 10;
inline bool VipAchievementConfig::has_bonus() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void VipAchievementConfig::set_has_bonus() {
  _has_bits_[0] |= 0x00001000u;
}
inline void VipAchievementConfig::clear_has_bonus() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void VipAchievementConfig::clear_bonus() {
  bonus_ = 0;
  clear_has_bonus();
}
inline ::google::protobuf::int32 VipAchievementConfig::bonus() const {
  return bonus_;
}
inline void VipAchievementConfig::set_bonus(::google::protobuf::int32 value) {
  set_has_bonus();
  bonus_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_VipAchievementConfig_2eproto__INCLUDED

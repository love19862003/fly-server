// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: activity_commodityConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "activity_commodityConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* activity_commodityConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_commodityConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_activity_5fcommodityConfig_2eproto() {
  protobuf_AddDesc_activity_5fcommodityConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "activity_commodityConfig.proto");
  GOOGLE_CHECK(file != NULL);
  activity_commodityConfig_descriptor_ = file->message_type(0);
  static const int activity_commodityConfig_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_commodityConfig, commodity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_commodityConfig, drop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_commodityConfig, act_same_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_commodityConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_commodityConfig, drop_condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_commodityConfig, activity_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_commodityConfig, activity_id_),
  };
  activity_commodityConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_commodityConfig_descriptor_,
      activity_commodityConfig::default_instance_,
      activity_commodityConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_commodityConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_commodityConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_commodityConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_activity_5fcommodityConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_commodityConfig_descriptor_, &activity_commodityConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_activity_5fcommodityConfig_2eproto() {
  delete activity_commodityConfig::default_instance_;
  delete activity_commodityConfig_reflection_;
}

void protobuf_AddDesc_activity_5fcommodityConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036activity_commodityConfig.proto\022\022DianSh"
    "iTech.Config\032\025ConfigTypeGroup.proto\"\251\001\n\030"
    "activity_commodityConfig\022\024\n\014commodity_id"
    "\030\003 \001(\005\022\017\n\007drop_id\030\005 \001(\005\022\026\n\016act_same_inde"
    "x\030\007 \001(\005\022\n\n\002id\030\001 \001(\005\022\026\n\016drop_condition\030\004 "
    "\001(\005\022\025\n\ractivity_type\030\006 \001(\005\022\023\n\013activity_i"
    "d\030\002 \001(\005", 247);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "activity_commodityConfig.proto", &protobuf_RegisterTypes);
  activity_commodityConfig::default_instance_ = new activity_commodityConfig();
  activity_commodityConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_activity_5fcommodityConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_activity_5fcommodityConfig_2eproto {
  StaticDescriptorInitializer_activity_5fcommodityConfig_2eproto() {
    protobuf_AddDesc_activity_5fcommodityConfig_2eproto();
  }
} static_descriptor_initializer_activity_5fcommodityConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int activity_commodityConfig::kCommodityIdFieldNumber;
const int activity_commodityConfig::kDropIdFieldNumber;
const int activity_commodityConfig::kActSameIndexFieldNumber;
const int activity_commodityConfig::kIdFieldNumber;
const int activity_commodityConfig::kDropConditionFieldNumber;
const int activity_commodityConfig::kActivityTypeFieldNumber;
const int activity_commodityConfig::kActivityIdFieldNumber;
#endif  // !_MSC_VER

activity_commodityConfig::activity_commodityConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activity_commodityConfig::InitAsDefaultInstance() {
}

activity_commodityConfig::activity_commodityConfig(const activity_commodityConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activity_commodityConfig::SharedCtor() {
  _cached_size_ = 0;
  commodity_id_ = 0;
  drop_id_ = 0;
  act_same_index_ = 0;
  id_ = 0;
  drop_condition_ = 0;
  activity_type_ = 0;
  activity_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_commodityConfig::~activity_commodityConfig() {
  SharedDtor();
}

void activity_commodityConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activity_commodityConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_commodityConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_commodityConfig_descriptor_;
}

const activity_commodityConfig& activity_commodityConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_5fcommodityConfig_2eproto();
  return *default_instance_;
}

activity_commodityConfig* activity_commodityConfig::default_instance_ = NULL;

activity_commodityConfig* activity_commodityConfig::New() const {
  return new activity_commodityConfig;
}

void activity_commodityConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    commodity_id_ = 0;
    drop_id_ = 0;
    act_same_index_ = 0;
    id_ = 0;
    drop_condition_ = 0;
    activity_type_ = 0;
    activity_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_commodityConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activity_id;
        break;
      }

      // optional int32 activity_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_commodity_id;
        break;
      }

      // optional int32 commodity_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commodity_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &commodity_id_)));
          set_has_commodity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_drop_condition;
        break;
      }

      // optional int32 drop_condition = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drop_condition_)));
          set_has_drop_condition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_drop_id;
        break;
      }

      // optional int32 drop_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drop_id_)));
          set_has_drop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_activity_type;
        break;
      }

      // optional int32 activity_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_type_)));
          set_has_activity_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_act_same_index;
        break;
      }

      // optional int32 act_same_index = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_act_same_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &act_same_index_)));
          set_has_act_same_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activity_commodityConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 activity_id = 2;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->activity_id(), output);
  }

  // optional int32 commodity_id = 3;
  if (has_commodity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->commodity_id(), output);
  }

  // optional int32 drop_condition = 4;
  if (has_drop_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->drop_condition(), output);
  }

  // optional int32 drop_id = 5;
  if (has_drop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->drop_id(), output);
  }

  // optional int32 activity_type = 6;
  if (has_activity_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->activity_type(), output);
  }

  // optional int32 act_same_index = 7;
  if (has_act_same_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->act_same_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activity_commodityConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 activity_id = 2;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->activity_id(), target);
  }

  // optional int32 commodity_id = 3;
  if (has_commodity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->commodity_id(), target);
  }

  // optional int32 drop_condition = 4;
  if (has_drop_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->drop_condition(), target);
  }

  // optional int32 drop_id = 5;
  if (has_drop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->drop_id(), target);
  }

  // optional int32 activity_type = 6;
  if (has_activity_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->activity_type(), target);
  }

  // optional int32 act_same_index = 7;
  if (has_act_same_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->act_same_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activity_commodityConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 commodity_id = 3;
    if (has_commodity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->commodity_id());
    }

    // optional int32 drop_id = 5;
    if (has_drop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drop_id());
    }

    // optional int32 act_same_index = 7;
    if (has_act_same_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->act_same_index());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 drop_condition = 4;
    if (has_drop_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drop_condition());
    }

    // optional int32 activity_type = 6;
    if (has_activity_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_type());
    }

    // optional int32 activity_id = 2;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_commodityConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_commodityConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_commodityConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_commodityConfig::MergeFrom(const activity_commodityConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commodity_id()) {
      set_commodity_id(from.commodity_id());
    }
    if (from.has_drop_id()) {
      set_drop_id(from.drop_id());
    }
    if (from.has_act_same_index()) {
      set_act_same_index(from.act_same_index());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_drop_condition()) {
      set_drop_condition(from.drop_condition());
    }
    if (from.has_activity_type()) {
      set_activity_type(from.activity_type());
    }
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_commodityConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_commodityConfig::CopyFrom(const activity_commodityConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_commodityConfig::IsInitialized() const {

  return true;
}

void activity_commodityConfig::Swap(activity_commodityConfig* other) {
  if (other != this) {
    std::swap(commodity_id_, other->commodity_id_);
    std::swap(drop_id_, other->drop_id_);
    std::swap(act_same_index_, other->act_same_index_);
    std::swap(id_, other->id_);
    std::swap(drop_condition_, other->drop_condition_);
    std::swap(activity_type_, other->activity_type_);
    std::swap(activity_id_, other->activity_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_commodityConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_commodityConfig_descriptor_;
  metadata.reflection = activity_commodityConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

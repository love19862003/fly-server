// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EquipmentConfig.proto

#ifndef PROTOBUF_EquipmentConfig_2eproto__INCLUDED
#define PROTOBUF_EquipmentConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_EquipmentConfig_2eproto();
void protobuf_AssignDesc_EquipmentConfig_2eproto();
void protobuf_ShutdownFile_EquipmentConfig_2eproto();

class EquipmentConfig;

// ===================================================================

class EquipmentConfig : public ::google::protobuf::Message {
 public:
  EquipmentConfig();
  virtual ~EquipmentConfig();

  EquipmentConfig(const EquipmentConfig& from);

  inline EquipmentConfig& operator=(const EquipmentConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentConfig& default_instance();

  void Swap(EquipmentConfig* other);

  // implements Message ----------------------------------------------

  EquipmentConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentConfig& from);
  void MergeFrom(const EquipmentConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string description = 11;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 11;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional int32 base_prop = 19;
  inline bool has_base_prop() const;
  inline void clear_base_prop();
  static const int kBasePropFieldNumber = 19;
  inline ::google::protobuf::int32 base_prop() const;
  inline void set_base_prop(::google::protobuf::int32 value);

  // optional int32 total_need_exp = 29;
  inline bool has_total_need_exp() const;
  inline void clear_total_need_exp();
  static const int kTotalNeedExpFieldNumber = 29;
  inline ::google::protobuf::int32 total_need_exp() const;
  inline void set_total_need_exp(::google::protobuf::int32 value);

  // optional int32 smelt_currency_type = 25;
  inline bool has_smelt_currency_type() const;
  inline void clear_smelt_currency_type();
  static const int kSmeltCurrencyTypeFieldNumber = 25;
  inline ::google::protobuf::int32 smelt_currency_type() const;
  inline void set_smelt_currency_type(::google::protobuf::int32 value);

  // optional int32 improve_attr = 18;
  inline bool has_improve_attr() const;
  inline void clear_improve_attr();
  static const int kImproveAttrFieldNumber = 18;
  inline ::google::protobuf::int32 improve_attr() const;
  inline void set_improve_attr(::google::protobuf::int32 value);

  // optional int32 equip_root = 4;
  inline bool has_equip_root() const;
  inline void clear_equip_root();
  static const int kEquipRootFieldNumber = 4;
  inline ::google::protobuf::int32 equip_root() const;
  inline void set_equip_root(::google::protobuf::int32 value);

  // optional int32 smelt_cost = 26;
  inline bool has_smelt_cost() const;
  inline void clear_smelt_cost();
  static const int kSmeltCostFieldNumber = 26;
  inline ::google::protobuf::int32 smelt_cost() const;
  inline void set_smelt_cost(::google::protobuf::int32 value);

  // optional int32 rare = 7;
  inline bool has_rare() const;
  inline void clear_rare();
  static const int kRareFieldNumber = 7;
  inline ::google::protobuf::int32 rare() const;
  inline void set_rare(::google::protobuf::int32 value);

  // optional int32 equip_rank = 8;
  inline bool has_equip_rank() const;
  inline void clear_equip_rank();
  static const int kEquipRankFieldNumber = 8;
  inline ::google::protobuf::int32 equip_rank() const;
  inline void set_equip_rank(::google::protobuf::int32 value);

  // optional int32 upgrade_equip_id = 28;
  inline bool has_upgrade_equip_id() const;
  inline void clear_upgrade_equip_id();
  static const int kUpgradeEquipIdFieldNumber = 28;
  inline ::google::protobuf::int32 upgrade_equip_id() const;
  inline void set_upgrade_equip_id(::google::protobuf::int32 value);

  // optional string root_name = 5;
  inline bool has_root_name() const;
  inline void clear_root_name();
  static const int kRootNameFieldNumber = 5;
  inline const ::std::string& root_name() const;
  inline void set_root_name(const ::std::string& value);
  inline void set_root_name(const char* value);
  inline void set_root_name(const char* value, size_t size);
  inline ::std::string* mutable_root_name();
  inline ::std::string* release_root_name();
  inline void set_allocated_root_name(::std::string* root_name);

  // optional int32 can_smelt = 24;
  inline bool has_can_smelt() const;
  inline void clear_can_smelt();
  static const int kCanSmeltFieldNumber = 24;
  inline ::google::protobuf::int32 can_smelt() const;
  inline void set_can_smelt(::google::protobuf::int32 value);

  // optional int32 sell_price = 23;
  inline bool has_sell_price() const;
  inline void clear_sell_price();
  static const int kSellPriceFieldNumber = 23;
  inline ::google::protobuf::int32 sell_price() const;
  inline void set_sell_price(::google::protobuf::int32 value);

  // optional int32 quality = 9;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 9;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // optional int32 base_attr_type = 16;
  inline bool has_base_attr_type() const;
  inline void clear_base_attr_type();
  static const int kBaseAttrTypeFieldNumber = 16;
  inline ::google::protobuf::int32 base_attr_type() const;
  inline void set_base_attr_type(::google::protobuf::int32 value);

  // optional int32 currency_type = 22;
  inline bool has_currency_type() const;
  inline void clear_currency_type();
  static const int kCurrencyTypeFieldNumber = 22;
  inline ::google::protobuf::int32 currency_type() const;
  inline void set_currency_type(::google::protobuf::int32 value);

  // optional string card_name = 6;
  inline bool has_card_name() const;
  inline void clear_card_name();
  static const int kCardNameFieldNumber = 6;
  inline const ::std::string& card_name() const;
  inline void set_card_name(const ::std::string& value);
  inline void set_card_name(const char* value);
  inline void set_card_name(const char* value, size_t size);
  inline ::std::string* mutable_card_name();
  inline ::std::string* release_card_name();
  inline void set_allocated_card_name(::std::string* card_name);

  // optional int32 equip_pic = 14;
  inline bool has_equip_pic() const;
  inline void clear_equip_pic();
  static const int kEquipPicFieldNumber = 14;
  inline ::google::protobuf::int32 equip_pic() const;
  inline void set_equip_pic(::google::protobuf::int32 value);

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 base_attr = 17;
  inline bool has_base_attr() const;
  inline void clear_base_attr();
  static const int kBaseAttrFieldNumber = 17;
  inline ::google::protobuf::int32 base_attr() const;
  inline void set_base_attr(::google::protobuf::int32 value);

  // optional int32 equip_type = 3;
  inline bool has_equip_type() const;
  inline void clear_equip_type();
  static const int kEquipTypeFieldNumber = 3;
  inline ::google::protobuf::int32 equip_type() const;
  inline void set_equip_type(::google::protobuf::int32 value);

  // optional int32 depend_prop = 21;
  inline bool has_depend_prop() const;
  inline void clear_depend_prop();
  static const int kDependPropFieldNumber = 21;
  inline ::google::protobuf::int32 depend_prop() const;
  inline void set_depend_prop(::google::protobuf::int32 value);

  // optional string ralate_stage = 13;
  inline bool has_ralate_stage() const;
  inline void clear_ralate_stage();
  static const int kRalateStageFieldNumber = 13;
  inline const ::std::string& ralate_stage() const;
  inline void set_ralate_stage(const ::std::string& value);
  inline void set_ralate_stage(const char* value);
  inline void set_ralate_stage(const char* value, size_t size);
  inline ::std::string* mutable_ralate_stage();
  inline ::std::string* release_ralate_stage();
  inline void set_allocated_ralate_stage(::std::string* ralate_stage);

  // optional int32 equip_icon = 15;
  inline bool has_equip_icon() const;
  inline void clear_equip_icon();
  static const int kEquipIconFieldNumber = 15;
  inline ::google::protobuf::int32 equip_icon() const;
  inline void set_equip_icon(::google::protobuf::int32 value);

  // optional string name = 10;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 10;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated int32 smelt_data = 27;
  inline int smelt_data_size() const;
  inline void clear_smelt_data();
  static const int kSmeltDataFieldNumber = 27;
  inline ::google::protobuf::int32 smelt_data(int index) const;
  inline void set_smelt_data(int index, ::google::protobuf::int32 value);
  inline void add_smelt_data(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      smelt_data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_smelt_data();

  // optional int32 xilian_prop = 30;
  inline bool has_xilian_prop() const;
  inline void clear_xilian_prop();
  static const int kXilianPropFieldNumber = 30;
  inline ::google::protobuf::int32 xilian_prop() const;
  inline void set_xilian_prop(::google::protobuf::int32 value);

  // optional string relate_unit = 12;
  inline bool has_relate_unit() const;
  inline void clear_relate_unit();
  static const int kRelateUnitFieldNumber = 12;
  inline const ::std::string& relate_unit() const;
  inline void set_relate_unit(const ::std::string& value);
  inline void set_relate_unit(const char* value);
  inline void set_relate_unit(const char* value, size_t size);
  inline ::std::string* mutable_relate_unit();
  inline ::std::string* release_relate_unit();
  inline void set_allocated_relate_unit(::std::string* relate_unit);

  // optional int32 isbase = 2;
  inline bool has_isbase() const;
  inline void clear_isbase();
  static const int kIsbaseFieldNumber = 2;
  inline ::google::protobuf::int32 isbase() const;
  inline void set_isbase(::google::protobuf::int32 value);

  // optional int32 random_prop = 20;
  inline bool has_random_prop() const;
  inline void clear_random_prop();
  static const int kRandomPropFieldNumber = 20;
  inline ::google::protobuf::int32 random_prop() const;
  inline void set_random_prop(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DianShiTech.Config.EquipmentConfig)
 private:
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_base_prop();
  inline void clear_has_base_prop();
  inline void set_has_total_need_exp();
  inline void clear_has_total_need_exp();
  inline void set_has_smelt_currency_type();
  inline void clear_has_smelt_currency_type();
  inline void set_has_improve_attr();
  inline void clear_has_improve_attr();
  inline void set_has_equip_root();
  inline void clear_has_equip_root();
  inline void set_has_smelt_cost();
  inline void clear_has_smelt_cost();
  inline void set_has_rare();
  inline void clear_has_rare();
  inline void set_has_equip_rank();
  inline void clear_has_equip_rank();
  inline void set_has_upgrade_equip_id();
  inline void clear_has_upgrade_equip_id();
  inline void set_has_root_name();
  inline void clear_has_root_name();
  inline void set_has_can_smelt();
  inline void clear_has_can_smelt();
  inline void set_has_sell_price();
  inline void clear_has_sell_price();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_base_attr_type();
  inline void clear_has_base_attr_type();
  inline void set_has_currency_type();
  inline void clear_has_currency_type();
  inline void set_has_card_name();
  inline void clear_has_card_name();
  inline void set_has_equip_pic();
  inline void clear_has_equip_pic();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_base_attr();
  inline void clear_has_base_attr();
  inline void set_has_equip_type();
  inline void clear_has_equip_type();
  inline void set_has_depend_prop();
  inline void clear_has_depend_prop();
  inline void set_has_ralate_stage();
  inline void clear_has_ralate_stage();
  inline void set_has_equip_icon();
  inline void clear_has_equip_icon();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_xilian_prop();
  inline void clear_has_xilian_prop();
  inline void set_has_relate_unit();
  inline void clear_has_relate_unit();
  inline void set_has_isbase();
  inline void clear_has_isbase();
  inline void set_has_random_prop();
  inline void clear_has_random_prop();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* description_;
  ::google::protobuf::int32 base_prop_;
  ::google::protobuf::int32 total_need_exp_;
  ::google::protobuf::int32 smelt_currency_type_;
  ::google::protobuf::int32 improve_attr_;
  ::google::protobuf::int32 equip_root_;
  ::google::protobuf::int32 smelt_cost_;
  ::google::protobuf::int32 rare_;
  ::google::protobuf::int32 equip_rank_;
  ::std::string* root_name_;
  ::google::protobuf::int32 upgrade_equip_id_;
  ::google::protobuf::int32 can_smelt_;
  ::google::protobuf::int32 sell_price_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 base_attr_type_;
  ::google::protobuf::int32 currency_type_;
  ::std::string* card_name_;
  ::google::protobuf::int32 equip_pic_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 base_attr_;
  ::google::protobuf::int32 equip_type_;
  ::std::string* ralate_stage_;
  ::google::protobuf::int32 depend_prop_;
  ::google::protobuf::int32 equip_icon_;
  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > smelt_data_;
  ::std::string* relate_unit_;
  ::google::protobuf::int32 xilian_prop_;
  ::google::protobuf::int32 isbase_;
  ::google::protobuf::int32 random_prop_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(30 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentConfig_2eproto();
  friend void protobuf_AssignDesc_EquipmentConfig_2eproto();
  friend void protobuf_ShutdownFile_EquipmentConfig_2eproto();

  void InitAsDefaultInstance();
  static EquipmentConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// EquipmentConfig

// optional string description = 11;
inline bool EquipmentConfig::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentConfig::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentConfig::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentConfig::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& EquipmentConfig::description() const {
  return *description_;
}
inline void EquipmentConfig::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void EquipmentConfig::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void EquipmentConfig::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EquipmentConfig::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* EquipmentConfig::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EquipmentConfig::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 base_prop = 19;
inline bool EquipmentConfig::has_base_prop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipmentConfig::set_has_base_prop() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipmentConfig::clear_has_base_prop() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipmentConfig::clear_base_prop() {
  base_prop_ = 0;
  clear_has_base_prop();
}
inline ::google::protobuf::int32 EquipmentConfig::base_prop() const {
  return base_prop_;
}
inline void EquipmentConfig::set_base_prop(::google::protobuf::int32 value) {
  set_has_base_prop();
  base_prop_ = value;
}

// optional int32 total_need_exp = 29;
inline bool EquipmentConfig::has_total_need_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipmentConfig::set_has_total_need_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipmentConfig::clear_has_total_need_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipmentConfig::clear_total_need_exp() {
  total_need_exp_ = 0;
  clear_has_total_need_exp();
}
inline ::google::protobuf::int32 EquipmentConfig::total_need_exp() const {
  return total_need_exp_;
}
inline void EquipmentConfig::set_total_need_exp(::google::protobuf::int32 value) {
  set_has_total_need_exp();
  total_need_exp_ = value;
}

// optional int32 smelt_currency_type = 25;
inline bool EquipmentConfig::has_smelt_currency_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipmentConfig::set_has_smelt_currency_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipmentConfig::clear_has_smelt_currency_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipmentConfig::clear_smelt_currency_type() {
  smelt_currency_type_ = 0;
  clear_has_smelt_currency_type();
}
inline ::google::protobuf::int32 EquipmentConfig::smelt_currency_type() const {
  return smelt_currency_type_;
}
inline void EquipmentConfig::set_smelt_currency_type(::google::protobuf::int32 value) {
  set_has_smelt_currency_type();
  smelt_currency_type_ = value;
}

// optional int32 improve_attr = 18;
inline bool EquipmentConfig::has_improve_attr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EquipmentConfig::set_has_improve_attr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EquipmentConfig::clear_has_improve_attr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EquipmentConfig::clear_improve_attr() {
  improve_attr_ = 0;
  clear_has_improve_attr();
}
inline ::google::protobuf::int32 EquipmentConfig::improve_attr() const {
  return improve_attr_;
}
inline void EquipmentConfig::set_improve_attr(::google::protobuf::int32 value) {
  set_has_improve_attr();
  improve_attr_ = value;
}

// optional int32 equip_root = 4;
inline bool EquipmentConfig::has_equip_root() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EquipmentConfig::set_has_equip_root() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EquipmentConfig::clear_has_equip_root() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EquipmentConfig::clear_equip_root() {
  equip_root_ = 0;
  clear_has_equip_root();
}
inline ::google::protobuf::int32 EquipmentConfig::equip_root() const {
  return equip_root_;
}
inline void EquipmentConfig::set_equip_root(::google::protobuf::int32 value) {
  set_has_equip_root();
  equip_root_ = value;
}

// optional int32 smelt_cost = 26;
inline bool EquipmentConfig::has_smelt_cost() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EquipmentConfig::set_has_smelt_cost() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EquipmentConfig::clear_has_smelt_cost() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EquipmentConfig::clear_smelt_cost() {
  smelt_cost_ = 0;
  clear_has_smelt_cost();
}
inline ::google::protobuf::int32 EquipmentConfig::smelt_cost() const {
  return smelt_cost_;
}
inline void EquipmentConfig::set_smelt_cost(::google::protobuf::int32 value) {
  set_has_smelt_cost();
  smelt_cost_ = value;
}

// optional int32 rare = 7;
inline bool EquipmentConfig::has_rare() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EquipmentConfig::set_has_rare() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EquipmentConfig::clear_has_rare() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EquipmentConfig::clear_rare() {
  rare_ = 0;
  clear_has_rare();
}
inline ::google::protobuf::int32 EquipmentConfig::rare() const {
  return rare_;
}
inline void EquipmentConfig::set_rare(::google::protobuf::int32 value) {
  set_has_rare();
  rare_ = value;
}

// optional int32 equip_rank = 8;
inline bool EquipmentConfig::has_equip_rank() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EquipmentConfig::set_has_equip_rank() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EquipmentConfig::clear_has_equip_rank() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EquipmentConfig::clear_equip_rank() {
  equip_rank_ = 0;
  clear_has_equip_rank();
}
inline ::google::protobuf::int32 EquipmentConfig::equip_rank() const {
  return equip_rank_;
}
inline void EquipmentConfig::set_equip_rank(::google::protobuf::int32 value) {
  set_has_equip_rank();
  equip_rank_ = value;
}

// optional int32 upgrade_equip_id = 28;
inline bool EquipmentConfig::has_upgrade_equip_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EquipmentConfig::set_has_upgrade_equip_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EquipmentConfig::clear_has_upgrade_equip_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EquipmentConfig::clear_upgrade_equip_id() {
  upgrade_equip_id_ = 0;
  clear_has_upgrade_equip_id();
}
inline ::google::protobuf::int32 EquipmentConfig::upgrade_equip_id() const {
  return upgrade_equip_id_;
}
inline void EquipmentConfig::set_upgrade_equip_id(::google::protobuf::int32 value) {
  set_has_upgrade_equip_id();
  upgrade_equip_id_ = value;
}

// optional string root_name = 5;
inline bool EquipmentConfig::has_root_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EquipmentConfig::set_has_root_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EquipmentConfig::clear_has_root_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EquipmentConfig::clear_root_name() {
  if (root_name_ != &::google::protobuf::internal::kEmptyString) {
    root_name_->clear();
  }
  clear_has_root_name();
}
inline const ::std::string& EquipmentConfig::root_name() const {
  return *root_name_;
}
inline void EquipmentConfig::set_root_name(const ::std::string& value) {
  set_has_root_name();
  if (root_name_ == &::google::protobuf::internal::kEmptyString) {
    root_name_ = new ::std::string;
  }
  root_name_->assign(value);
}
inline void EquipmentConfig::set_root_name(const char* value) {
  set_has_root_name();
  if (root_name_ == &::google::protobuf::internal::kEmptyString) {
    root_name_ = new ::std::string;
  }
  root_name_->assign(value);
}
inline void EquipmentConfig::set_root_name(const char* value, size_t size) {
  set_has_root_name();
  if (root_name_ == &::google::protobuf::internal::kEmptyString) {
    root_name_ = new ::std::string;
  }
  root_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EquipmentConfig::mutable_root_name() {
  set_has_root_name();
  if (root_name_ == &::google::protobuf::internal::kEmptyString) {
    root_name_ = new ::std::string;
  }
  return root_name_;
}
inline ::std::string* EquipmentConfig::release_root_name() {
  clear_has_root_name();
  if (root_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = root_name_;
    root_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EquipmentConfig::set_allocated_root_name(::std::string* root_name) {
  if (root_name_ != &::google::protobuf::internal::kEmptyString) {
    delete root_name_;
  }
  if (root_name) {
    set_has_root_name();
    root_name_ = root_name;
  } else {
    clear_has_root_name();
    root_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 can_smelt = 24;
inline bool EquipmentConfig::has_can_smelt() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void EquipmentConfig::set_has_can_smelt() {
  _has_bits_[0] |= 0x00000800u;
}
inline void EquipmentConfig::clear_has_can_smelt() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void EquipmentConfig::clear_can_smelt() {
  can_smelt_ = 0;
  clear_has_can_smelt();
}
inline ::google::protobuf::int32 EquipmentConfig::can_smelt() const {
  return can_smelt_;
}
inline void EquipmentConfig::set_can_smelt(::google::protobuf::int32 value) {
  set_has_can_smelt();
  can_smelt_ = value;
}

// optional int32 sell_price = 23;
inline bool EquipmentConfig::has_sell_price() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void EquipmentConfig::set_has_sell_price() {
  _has_bits_[0] |= 0x00001000u;
}
inline void EquipmentConfig::clear_has_sell_price() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void EquipmentConfig::clear_sell_price() {
  sell_price_ = 0;
  clear_has_sell_price();
}
inline ::google::protobuf::int32 EquipmentConfig::sell_price() const {
  return sell_price_;
}
inline void EquipmentConfig::set_sell_price(::google::protobuf::int32 value) {
  set_has_sell_price();
  sell_price_ = value;
}

// optional int32 quality = 9;
inline bool EquipmentConfig::has_quality() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void EquipmentConfig::set_has_quality() {
  _has_bits_[0] |= 0x00002000u;
}
inline void EquipmentConfig::clear_has_quality() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void EquipmentConfig::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 EquipmentConfig::quality() const {
  return quality_;
}
inline void EquipmentConfig::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional int32 base_attr_type = 16;
inline bool EquipmentConfig::has_base_attr_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void EquipmentConfig::set_has_base_attr_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void EquipmentConfig::clear_has_base_attr_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void EquipmentConfig::clear_base_attr_type() {
  base_attr_type_ = 0;
  clear_has_base_attr_type();
}
inline ::google::protobuf::int32 EquipmentConfig::base_attr_type() const {
  return base_attr_type_;
}
inline void EquipmentConfig::set_base_attr_type(::google::protobuf::int32 value) {
  set_has_base_attr_type();
  base_attr_type_ = value;
}

// optional int32 currency_type = 22;
inline bool EquipmentConfig::has_currency_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void EquipmentConfig::set_has_currency_type() {
  _has_bits_[0] |= 0x00008000u;
}
inline void EquipmentConfig::clear_has_currency_type() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void EquipmentConfig::clear_currency_type() {
  currency_type_ = 0;
  clear_has_currency_type();
}
inline ::google::protobuf::int32 EquipmentConfig::currency_type() const {
  return currency_type_;
}
inline void EquipmentConfig::set_currency_type(::google::protobuf::int32 value) {
  set_has_currency_type();
  currency_type_ = value;
}

// optional string card_name = 6;
inline bool EquipmentConfig::has_card_name() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void EquipmentConfig::set_has_card_name() {
  _has_bits_[0] |= 0x00010000u;
}
inline void EquipmentConfig::clear_has_card_name() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void EquipmentConfig::clear_card_name() {
  if (card_name_ != &::google::protobuf::internal::kEmptyString) {
    card_name_->clear();
  }
  clear_has_card_name();
}
inline const ::std::string& EquipmentConfig::card_name() const {
  return *card_name_;
}
inline void EquipmentConfig::set_card_name(const ::std::string& value) {
  set_has_card_name();
  if (card_name_ == &::google::protobuf::internal::kEmptyString) {
    card_name_ = new ::std::string;
  }
  card_name_->assign(value);
}
inline void EquipmentConfig::set_card_name(const char* value) {
  set_has_card_name();
  if (card_name_ == &::google::protobuf::internal::kEmptyString) {
    card_name_ = new ::std::string;
  }
  card_name_->assign(value);
}
inline void EquipmentConfig::set_card_name(const char* value, size_t size) {
  set_has_card_name();
  if (card_name_ == &::google::protobuf::internal::kEmptyString) {
    card_name_ = new ::std::string;
  }
  card_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EquipmentConfig::mutable_card_name() {
  set_has_card_name();
  if (card_name_ == &::google::protobuf::internal::kEmptyString) {
    card_name_ = new ::std::string;
  }
  return card_name_;
}
inline ::std::string* EquipmentConfig::release_card_name() {
  clear_has_card_name();
  if (card_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = card_name_;
    card_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EquipmentConfig::set_allocated_card_name(::std::string* card_name) {
  if (card_name_ != &::google::protobuf::internal::kEmptyString) {
    delete card_name_;
  }
  if (card_name) {
    set_has_card_name();
    card_name_ = card_name;
  } else {
    clear_has_card_name();
    card_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 equip_pic = 14;
inline bool EquipmentConfig::has_equip_pic() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void EquipmentConfig::set_has_equip_pic() {
  _has_bits_[0] |= 0x00020000u;
}
inline void EquipmentConfig::clear_has_equip_pic() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void EquipmentConfig::clear_equip_pic() {
  equip_pic_ = 0;
  clear_has_equip_pic();
}
inline ::google::protobuf::int32 EquipmentConfig::equip_pic() const {
  return equip_pic_;
}
inline void EquipmentConfig::set_equip_pic(::google::protobuf::int32 value) {
  set_has_equip_pic();
  equip_pic_ = value;
}

// optional int32 id = 1;
inline bool EquipmentConfig::has_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void EquipmentConfig::set_has_id() {
  _has_bits_[0] |= 0x00040000u;
}
inline void EquipmentConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void EquipmentConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 EquipmentConfig::id() const {
  return id_;
}
inline void EquipmentConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 base_attr = 17;
inline bool EquipmentConfig::has_base_attr() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void EquipmentConfig::set_has_base_attr() {
  _has_bits_[0] |= 0x00080000u;
}
inline void EquipmentConfig::clear_has_base_attr() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void EquipmentConfig::clear_base_attr() {
  base_attr_ = 0;
  clear_has_base_attr();
}
inline ::google::protobuf::int32 EquipmentConfig::base_attr() const {
  return base_attr_;
}
inline void EquipmentConfig::set_base_attr(::google::protobuf::int32 value) {
  set_has_base_attr();
  base_attr_ = value;
}

// optional int32 equip_type = 3;
inline bool EquipmentConfig::has_equip_type() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void EquipmentConfig::set_has_equip_type() {
  _has_bits_[0] |= 0x00100000u;
}
inline void EquipmentConfig::clear_has_equip_type() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void EquipmentConfig::clear_equip_type() {
  equip_type_ = 0;
  clear_has_equip_type();
}
inline ::google::protobuf::int32 EquipmentConfig::equip_type() const {
  return equip_type_;
}
inline void EquipmentConfig::set_equip_type(::google::protobuf::int32 value) {
  set_has_equip_type();
  equip_type_ = value;
}

// optional int32 depend_prop = 21;
inline bool EquipmentConfig::has_depend_prop() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void EquipmentConfig::set_has_depend_prop() {
  _has_bits_[0] |= 0x00200000u;
}
inline void EquipmentConfig::clear_has_depend_prop() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void EquipmentConfig::clear_depend_prop() {
  depend_prop_ = 0;
  clear_has_depend_prop();
}
inline ::google::protobuf::int32 EquipmentConfig::depend_prop() const {
  return depend_prop_;
}
inline void EquipmentConfig::set_depend_prop(::google::protobuf::int32 value) {
  set_has_depend_prop();
  depend_prop_ = value;
}

// optional string ralate_stage = 13;
inline bool EquipmentConfig::has_ralate_stage() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void EquipmentConfig::set_has_ralate_stage() {
  _has_bits_[0] |= 0x00400000u;
}
inline void EquipmentConfig::clear_has_ralate_stage() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void EquipmentConfig::clear_ralate_stage() {
  if (ralate_stage_ != &::google::protobuf::internal::kEmptyString) {
    ralate_stage_->clear();
  }
  clear_has_ralate_stage();
}
inline const ::std::string& EquipmentConfig::ralate_stage() const {
  return *ralate_stage_;
}
inline void EquipmentConfig::set_ralate_stage(const ::std::string& value) {
  set_has_ralate_stage();
  if (ralate_stage_ == &::google::protobuf::internal::kEmptyString) {
    ralate_stage_ = new ::std::string;
  }
  ralate_stage_->assign(value);
}
inline void EquipmentConfig::set_ralate_stage(const char* value) {
  set_has_ralate_stage();
  if (ralate_stage_ == &::google::protobuf::internal::kEmptyString) {
    ralate_stage_ = new ::std::string;
  }
  ralate_stage_->assign(value);
}
inline void EquipmentConfig::set_ralate_stage(const char* value, size_t size) {
  set_has_ralate_stage();
  if (ralate_stage_ == &::google::protobuf::internal::kEmptyString) {
    ralate_stage_ = new ::std::string;
  }
  ralate_stage_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EquipmentConfig::mutable_ralate_stage() {
  set_has_ralate_stage();
  if (ralate_stage_ == &::google::protobuf::internal::kEmptyString) {
    ralate_stage_ = new ::std::string;
  }
  return ralate_stage_;
}
inline ::std::string* EquipmentConfig::release_ralate_stage() {
  clear_has_ralate_stage();
  if (ralate_stage_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ralate_stage_;
    ralate_stage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EquipmentConfig::set_allocated_ralate_stage(::std::string* ralate_stage) {
  if (ralate_stage_ != &::google::protobuf::internal::kEmptyString) {
    delete ralate_stage_;
  }
  if (ralate_stage) {
    set_has_ralate_stage();
    ralate_stage_ = ralate_stage;
  } else {
    clear_has_ralate_stage();
    ralate_stage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 equip_icon = 15;
inline bool EquipmentConfig::has_equip_icon() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void EquipmentConfig::set_has_equip_icon() {
  _has_bits_[0] |= 0x00800000u;
}
inline void EquipmentConfig::clear_has_equip_icon() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void EquipmentConfig::clear_equip_icon() {
  equip_icon_ = 0;
  clear_has_equip_icon();
}
inline ::google::protobuf::int32 EquipmentConfig::equip_icon() const {
  return equip_icon_;
}
inline void EquipmentConfig::set_equip_icon(::google::protobuf::int32 value) {
  set_has_equip_icon();
  equip_icon_ = value;
}

// optional string name = 10;
inline bool EquipmentConfig::has_name() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void EquipmentConfig::set_has_name() {
  _has_bits_[0] |= 0x01000000u;
}
inline void EquipmentConfig::clear_has_name() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void EquipmentConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& EquipmentConfig::name() const {
  return *name_;
}
inline void EquipmentConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void EquipmentConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void EquipmentConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EquipmentConfig::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* EquipmentConfig::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EquipmentConfig::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 smelt_data = 27;
inline int EquipmentConfig::smelt_data_size() const {
  return smelt_data_.size();
}
inline void EquipmentConfig::clear_smelt_data() {
  smelt_data_.Clear();
}
inline ::google::protobuf::int32 EquipmentConfig::smelt_data(int index) const {
  return smelt_data_.Get(index);
}
inline void EquipmentConfig::set_smelt_data(int index, ::google::protobuf::int32 value) {
  smelt_data_.Set(index, value);
}
inline void EquipmentConfig::add_smelt_data(::google::protobuf::int32 value) {
  smelt_data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EquipmentConfig::smelt_data() const {
  return smelt_data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EquipmentConfig::mutable_smelt_data() {
  return &smelt_data_;
}

// optional int32 xilian_prop = 30;
inline bool EquipmentConfig::has_xilian_prop() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void EquipmentConfig::set_has_xilian_prop() {
  _has_bits_[0] |= 0x04000000u;
}
inline void EquipmentConfig::clear_has_xilian_prop() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void EquipmentConfig::clear_xilian_prop() {
  xilian_prop_ = 0;
  clear_has_xilian_prop();
}
inline ::google::protobuf::int32 EquipmentConfig::xilian_prop() const {
  return xilian_prop_;
}
inline void EquipmentConfig::set_xilian_prop(::google::protobuf::int32 value) {
  set_has_xilian_prop();
  xilian_prop_ = value;
}

// optional string relate_unit = 12;
inline bool EquipmentConfig::has_relate_unit() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void EquipmentConfig::set_has_relate_unit() {
  _has_bits_[0] |= 0x08000000u;
}
inline void EquipmentConfig::clear_has_relate_unit() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void EquipmentConfig::clear_relate_unit() {
  if (relate_unit_ != &::google::protobuf::internal::kEmptyString) {
    relate_unit_->clear();
  }
  clear_has_relate_unit();
}
inline const ::std::string& EquipmentConfig::relate_unit() const {
  return *relate_unit_;
}
inline void EquipmentConfig::set_relate_unit(const ::std::string& value) {
  set_has_relate_unit();
  if (relate_unit_ == &::google::protobuf::internal::kEmptyString) {
    relate_unit_ = new ::std::string;
  }
  relate_unit_->assign(value);
}
inline void EquipmentConfig::set_relate_unit(const char* value) {
  set_has_relate_unit();
  if (relate_unit_ == &::google::protobuf::internal::kEmptyString) {
    relate_unit_ = new ::std::string;
  }
  relate_unit_->assign(value);
}
inline void EquipmentConfig::set_relate_unit(const char* value, size_t size) {
  set_has_relate_unit();
  if (relate_unit_ == &::google::protobuf::internal::kEmptyString) {
    relate_unit_ = new ::std::string;
  }
  relate_unit_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EquipmentConfig::mutable_relate_unit() {
  set_has_relate_unit();
  if (relate_unit_ == &::google::protobuf::internal::kEmptyString) {
    relate_unit_ = new ::std::string;
  }
  return relate_unit_;
}
inline ::std::string* EquipmentConfig::release_relate_unit() {
  clear_has_relate_unit();
  if (relate_unit_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = relate_unit_;
    relate_unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EquipmentConfig::set_allocated_relate_unit(::std::string* relate_unit) {
  if (relate_unit_ != &::google::protobuf::internal::kEmptyString) {
    delete relate_unit_;
  }
  if (relate_unit) {
    set_has_relate_unit();
    relate_unit_ = relate_unit;
  } else {
    clear_has_relate_unit();
    relate_unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 isbase = 2;
inline bool EquipmentConfig::has_isbase() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void EquipmentConfig::set_has_isbase() {
  _has_bits_[0] |= 0x10000000u;
}
inline void EquipmentConfig::clear_has_isbase() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void EquipmentConfig::clear_isbase() {
  isbase_ = 0;
  clear_has_isbase();
}
inline ::google::protobuf::int32 EquipmentConfig::isbase() const {
  return isbase_;
}
inline void EquipmentConfig::set_isbase(::google::protobuf::int32 value) {
  set_has_isbase();
  isbase_ = value;
}

// optional int32 random_prop = 20;
inline bool EquipmentConfig::has_random_prop() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void EquipmentConfig::set_has_random_prop() {
  _has_bits_[0] |= 0x20000000u;
}
inline void EquipmentConfig::clear_has_random_prop() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void EquipmentConfig::clear_random_prop() {
  random_prop_ = 0;
  clear_has_random_prop();
}
inline ::google::protobuf::int32 EquipmentConfig::random_prop() const {
  return random_prop_;
}
inline void EquipmentConfig::set_random_prop(::google::protobuf::int32 value) {
  set_has_random_prop();
  random_prop_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_EquipmentConfig_2eproto__INCLUDED

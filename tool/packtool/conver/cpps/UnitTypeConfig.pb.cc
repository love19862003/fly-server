// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UnitTypeConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UnitTypeConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* UnitTypeConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitTypeConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_UnitTypeConfig_2eproto() {
  protobuf_AddDesc_UnitTypeConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UnitTypeConfig.proto");
  GOOGLE_CHECK(file != NULL);
  UnitTypeConfig_descriptor_ = file->message_type(0);
  static const int UnitTypeConfig_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeConfig, melee_damage_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeConfig, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeConfig, branch_target_damage_per_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeConfig, target_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeConfig, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeConfig, atk_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeConfig, atk_range_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeConfig, avoid_melee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeConfig, priority_target_rule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeConfig, move_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeConfig, talent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeConfig, hp_revise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeConfig, atk_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeConfig, atk_revise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeConfig, main_target_damage_per_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeConfig, gate_damage_per_),
  };
  UnitTypeConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnitTypeConfig_descriptor_,
      UnitTypeConfig::default_instance_,
      UnitTypeConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitTypeConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UnitTypeConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitTypeConfig_descriptor_, &UnitTypeConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UnitTypeConfig_2eproto() {
  delete UnitTypeConfig::default_instance_;
  delete UnitTypeConfig_reflection_;
}

void protobuf_AddDesc_UnitTypeConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024UnitTypeConfig.proto\022\022DianShiTech.Conf"
    "ig\032\025ConfigTypeGroup.proto\"\270\003\n\016UnitTypeCo"
    "nfig\022\034\n\024melee_damage_percent\030\n \001(\005\022\020\n\010re"
    "source\030\020 \001(\005\022 \n\030branch_target_damage_per"
    "\030\014 \001(\005\022\024\n\014target_count\030\005 \001(\005\022\016\n\006target\030\004"
    " \001(\005\022\024\n\014atk_distance\030\t \001(\005\022\026\n\016atk_range_"
    "type\030\010 \001(\005\022\023\n\013avoid_melee\030\007 \001(\005\022\034\n\024prior"
    "ity_target_rule\030\003 \001(\005\022\014\n\004move\030\017 \001(\005\0223\n\006t"
    "alent\030\016 \003(\0132#.DianShiTech.Config.ConfigT"
    "ypeGroup\022\n\n\002id\030\001 \001(\005\022\021\n\thp_revise\030\022 \001(\005\022"
    "\020\n\010atk_type\030\006 \001(\005\022\014\n\004name\030\002 \001(\t\022\022\n\natk_r"
    "evise\030\021 \001(\005\022\036\n\026main_target_damage_per\030\013 "
    "\001(\005\022\027\n\017gate_damage_per\030\r \001(\005", 508);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UnitTypeConfig.proto", &protobuf_RegisterTypes);
  UnitTypeConfig::default_instance_ = new UnitTypeConfig();
  UnitTypeConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UnitTypeConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UnitTypeConfig_2eproto {
  StaticDescriptorInitializer_UnitTypeConfig_2eproto() {
    protobuf_AddDesc_UnitTypeConfig_2eproto();
  }
} static_descriptor_initializer_UnitTypeConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UnitTypeConfig::kMeleeDamagePercentFieldNumber;
const int UnitTypeConfig::kResourceFieldNumber;
const int UnitTypeConfig::kBranchTargetDamagePerFieldNumber;
const int UnitTypeConfig::kTargetCountFieldNumber;
const int UnitTypeConfig::kTargetFieldNumber;
const int UnitTypeConfig::kAtkDistanceFieldNumber;
const int UnitTypeConfig::kAtkRangeTypeFieldNumber;
const int UnitTypeConfig::kAvoidMeleeFieldNumber;
const int UnitTypeConfig::kPriorityTargetRuleFieldNumber;
const int UnitTypeConfig::kMoveFieldNumber;
const int UnitTypeConfig::kTalentFieldNumber;
const int UnitTypeConfig::kIdFieldNumber;
const int UnitTypeConfig::kHpReviseFieldNumber;
const int UnitTypeConfig::kAtkTypeFieldNumber;
const int UnitTypeConfig::kNameFieldNumber;
const int UnitTypeConfig::kAtkReviseFieldNumber;
const int UnitTypeConfig::kMainTargetDamagePerFieldNumber;
const int UnitTypeConfig::kGateDamagePerFieldNumber;
#endif  // !_MSC_VER

UnitTypeConfig::UnitTypeConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnitTypeConfig::InitAsDefaultInstance() {
}

UnitTypeConfig::UnitTypeConfig(const UnitTypeConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnitTypeConfig::SharedCtor() {
  _cached_size_ = 0;
  melee_damage_percent_ = 0;
  resource_ = 0;
  branch_target_damage_per_ = 0;
  target_count_ = 0;
  target_ = 0;
  atk_distance_ = 0;
  atk_range_type_ = 0;
  avoid_melee_ = 0;
  priority_target_rule_ = 0;
  move_ = 0;
  id_ = 0;
  hp_revise_ = 0;
  atk_type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  atk_revise_ = 0;
  main_target_damage_per_ = 0;
  gate_damage_per_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitTypeConfig::~UnitTypeConfig() {
  SharedDtor();
}

void UnitTypeConfig::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void UnitTypeConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnitTypeConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitTypeConfig_descriptor_;
}

const UnitTypeConfig& UnitTypeConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UnitTypeConfig_2eproto();
  return *default_instance_;
}

UnitTypeConfig* UnitTypeConfig::default_instance_ = NULL;

UnitTypeConfig* UnitTypeConfig::New() const {
  return new UnitTypeConfig;
}

void UnitTypeConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    melee_damage_percent_ = 0;
    resource_ = 0;
    branch_target_damage_per_ = 0;
    target_count_ = 0;
    target_ = 0;
    atk_distance_ = 0;
    atk_range_type_ = 0;
    avoid_melee_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    priority_target_rule_ = 0;
    move_ = 0;
    id_ = 0;
    hp_revise_ = 0;
    atk_type_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    atk_revise_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    main_target_damage_per_ = 0;
    gate_damage_per_ = 0;
  }
  talent_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitTypeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_priority_target_rule;
        break;
      }

      // optional int32 priority_target_rule = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority_target_rule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_target_rule_)));
          set_has_priority_target_rule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_target;
        break;
      }

      // optional int32 target = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_target_count;
        break;
      }

      // optional int32 target_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_count_)));
          set_has_target_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_atk_type;
        break;
      }

      // optional int32 atk_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atk_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atk_type_)));
          set_has_atk_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_avoid_melee;
        break;
      }

      // optional int32 avoid_melee = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avoid_melee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avoid_melee_)));
          set_has_avoid_melee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_atk_range_type;
        break;
      }

      // optional int32 atk_range_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atk_range_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atk_range_type_)));
          set_has_atk_range_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_atk_distance;
        break;
      }

      // optional int32 atk_distance = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atk_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atk_distance_)));
          set_has_atk_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_melee_damage_percent;
        break;
      }

      // optional int32 melee_damage_percent = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_melee_damage_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &melee_damage_percent_)));
          set_has_melee_damage_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_main_target_damage_per;
        break;
      }

      // optional int32 main_target_damage_per = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_main_target_damage_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_target_damage_per_)));
          set_has_main_target_damage_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_branch_target_damage_per;
        break;
      }

      // optional int32 branch_target_damage_per = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_branch_target_damage_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &branch_target_damage_per_)));
          set_has_branch_target_damage_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_gate_damage_per;
        break;
      }

      // optional int32 gate_damage_per = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_damage_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gate_damage_per_)));
          set_has_gate_damage_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_talent;
        break;
      }

      // repeated .DianShiTech.Config.ConfigTypeGroup talent = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_talent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_talent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_talent;
        if (input->ExpectTag(120)) goto parse_move;
        break;
      }

      // optional int32 move = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_)));
          set_has_move();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_resource;
        break;
      }

      // optional int32 resource = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource_)));
          set_has_resource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_atk_revise;
        break;
      }

      // optional int32 atk_revise = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atk_revise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atk_revise_)));
          set_has_atk_revise();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_hp_revise;
        break;
      }

      // optional int32 hp_revise = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp_revise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_revise_)));
          set_has_hp_revise();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnitTypeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 priority_target_rule = 3;
  if (has_priority_target_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->priority_target_rule(), output);
  }

  // optional int32 target = 4;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->target(), output);
  }

  // optional int32 target_count = 5;
  if (has_target_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->target_count(), output);
  }

  // optional int32 atk_type = 6;
  if (has_atk_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->atk_type(), output);
  }

  // optional int32 avoid_melee = 7;
  if (has_avoid_melee()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->avoid_melee(), output);
  }

  // optional int32 atk_range_type = 8;
  if (has_atk_range_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->atk_range_type(), output);
  }

  // optional int32 atk_distance = 9;
  if (has_atk_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->atk_distance(), output);
  }

  // optional int32 melee_damage_percent = 10;
  if (has_melee_damage_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->melee_damage_percent(), output);
  }

  // optional int32 main_target_damage_per = 11;
  if (has_main_target_damage_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->main_target_damage_per(), output);
  }

  // optional int32 branch_target_damage_per = 12;
  if (has_branch_target_damage_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->branch_target_damage_per(), output);
  }

  // optional int32 gate_damage_per = 13;
  if (has_gate_damage_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->gate_damage_per(), output);
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup talent = 14;
  for (int i = 0; i < this->talent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->talent(i), output);
  }

  // optional int32 move = 15;
  if (has_move()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->move(), output);
  }

  // optional int32 resource = 16;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->resource(), output);
  }

  // optional int32 atk_revise = 17;
  if (has_atk_revise()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->atk_revise(), output);
  }

  // optional int32 hp_revise = 18;
  if (has_hp_revise()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->hp_revise(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnitTypeConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 priority_target_rule = 3;
  if (has_priority_target_rule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->priority_target_rule(), target);
  }

  // optional int32 target = 4;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->target(), target);
  }

  // optional int32 target_count = 5;
  if (has_target_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->target_count(), target);
  }

  // optional int32 atk_type = 6;
  if (has_atk_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->atk_type(), target);
  }

  // optional int32 avoid_melee = 7;
  if (has_avoid_melee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->avoid_melee(), target);
  }

  // optional int32 atk_range_type = 8;
  if (has_atk_range_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->atk_range_type(), target);
  }

  // optional int32 atk_distance = 9;
  if (has_atk_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->atk_distance(), target);
  }

  // optional int32 melee_damage_percent = 10;
  if (has_melee_damage_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->melee_damage_percent(), target);
  }

  // optional int32 main_target_damage_per = 11;
  if (has_main_target_damage_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->main_target_damage_per(), target);
  }

  // optional int32 branch_target_damage_per = 12;
  if (has_branch_target_damage_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->branch_target_damage_per(), target);
  }

  // optional int32 gate_damage_per = 13;
  if (has_gate_damage_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->gate_damage_per(), target);
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup talent = 14;
  for (int i = 0; i < this->talent_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->talent(i), target);
  }

  // optional int32 move = 15;
  if (has_move()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->move(), target);
  }

  // optional int32 resource = 16;
  if (has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->resource(), target);
  }

  // optional int32 atk_revise = 17;
  if (has_atk_revise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->atk_revise(), target);
  }

  // optional int32 hp_revise = 18;
  if (has_hp_revise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->hp_revise(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnitTypeConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 melee_damage_percent = 10;
    if (has_melee_damage_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->melee_damage_percent());
    }

    // optional int32 resource = 16;
    if (has_resource()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resource());
    }

    // optional int32 branch_target_damage_per = 12;
    if (has_branch_target_damage_per()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->branch_target_damage_per());
    }

    // optional int32 target_count = 5;
    if (has_target_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_count());
    }

    // optional int32 target = 4;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target());
    }

    // optional int32 atk_distance = 9;
    if (has_atk_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atk_distance());
    }

    // optional int32 atk_range_type = 8;
    if (has_atk_range_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atk_range_type());
    }

    // optional int32 avoid_melee = 7;
    if (has_avoid_melee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avoid_melee());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 priority_target_rule = 3;
    if (has_priority_target_rule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority_target_rule());
    }

    // optional int32 move = 15;
    if (has_move()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 hp_revise = 18;
    if (has_hp_revise()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp_revise());
    }

    // optional int32 atk_type = 6;
    if (has_atk_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atk_type());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 atk_revise = 17;
    if (has_atk_revise()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atk_revise());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 main_target_damage_per = 11;
    if (has_main_target_damage_per()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->main_target_damage_per());
    }

    // optional int32 gate_damage_per = 13;
    if (has_gate_damage_per()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gate_damage_per());
    }

  }
  // repeated .DianShiTech.Config.ConfigTypeGroup talent = 14;
  total_size += 1 * this->talent_size();
  for (int i = 0; i < this->talent_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->talent(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitTypeConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitTypeConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnitTypeConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitTypeConfig::MergeFrom(const UnitTypeConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  talent_.MergeFrom(from.talent_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_melee_damage_percent()) {
      set_melee_damage_percent(from.melee_damage_percent());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_branch_target_damage_per()) {
      set_branch_target_damage_per(from.branch_target_damage_per());
    }
    if (from.has_target_count()) {
      set_target_count(from.target_count());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_atk_distance()) {
      set_atk_distance(from.atk_distance());
    }
    if (from.has_atk_range_type()) {
      set_atk_range_type(from.atk_range_type());
    }
    if (from.has_avoid_melee()) {
      set_avoid_melee(from.avoid_melee());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_priority_target_rule()) {
      set_priority_target_rule(from.priority_target_rule());
    }
    if (from.has_move()) {
      set_move(from.move());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hp_revise()) {
      set_hp_revise(from.hp_revise());
    }
    if (from.has_atk_type()) {
      set_atk_type(from.atk_type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_atk_revise()) {
      set_atk_revise(from.atk_revise());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_main_target_damage_per()) {
      set_main_target_damage_per(from.main_target_damage_per());
    }
    if (from.has_gate_damage_per()) {
      set_gate_damage_per(from.gate_damage_per());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitTypeConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitTypeConfig::CopyFrom(const UnitTypeConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitTypeConfig::IsInitialized() const {

  return true;
}

void UnitTypeConfig::Swap(UnitTypeConfig* other) {
  if (other != this) {
    std::swap(melee_damage_percent_, other->melee_damage_percent_);
    std::swap(resource_, other->resource_);
    std::swap(branch_target_damage_per_, other->branch_target_damage_per_);
    std::swap(target_count_, other->target_count_);
    std::swap(target_, other->target_);
    std::swap(atk_distance_, other->atk_distance_);
    std::swap(atk_range_type_, other->atk_range_type_);
    std::swap(avoid_melee_, other->avoid_melee_);
    std::swap(priority_target_rule_, other->priority_target_rule_);
    std::swap(move_, other->move_);
    talent_.Swap(&other->talent_);
    std::swap(id_, other->id_);
    std::swap(hp_revise_, other->hp_revise_);
    std::swap(atk_type_, other->atk_type_);
    std::swap(name_, other->name_);
    std::swap(atk_revise_, other->atk_revise_);
    std::swap(main_target_damage_per_, other->main_target_damage_per_);
    std::swap(gate_damage_per_, other->gate_damage_per_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnitTypeConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitTypeConfig_descriptor_;
  metadata.reflection = UnitTypeConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

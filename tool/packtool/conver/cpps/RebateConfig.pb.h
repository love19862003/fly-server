// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RebateConfig.proto

#ifndef PROTOBUF_RebateConfig_2eproto__INCLUDED
#define PROTOBUF_RebateConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RebateConfig_2eproto();
void protobuf_AssignDesc_RebateConfig_2eproto();
void protobuf_ShutdownFile_RebateConfig_2eproto();

class RebateConfig;

// ===================================================================

class RebateConfig : public ::google::protobuf::Message {
 public:
  RebateConfig();
  virtual ~RebateConfig();

  RebateConfig(const RebateConfig& from);

  inline RebateConfig& operator=(const RebateConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RebateConfig& default_instance();

  void Swap(RebateConfig* other);

  // implements Message ----------------------------------------------

  RebateConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RebateConfig& from);
  void MergeFrom(const RebateConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 icon_pic = 4;
  inline bool has_icon_pic() const;
  inline void clear_icon_pic();
  static const int kIconPicFieldNumber = 4;
  inline ::google::protobuf::int32 icon_pic() const;
  inline void set_icon_pic(::google::protobuf::int32 value);

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 gain_gold = 6;
  inline bool has_gain_gold() const;
  inline void clear_gain_gold();
  static const int kGainGoldFieldNumber = 6;
  inline ::google::protobuf::int32 gain_gold() const;
  inline void set_gain_gold(::google::protobuf::int32 value);

  // optional int32 active_level = 5;
  inline bool has_active_level() const;
  inline void clear_active_level();
  static const int kActiveLevelFieldNumber = 5;
  inline ::google::protobuf::int32 active_level() const;
  inline void set_active_level(::google::protobuf::int32 value);

  // optional string desciption = 3;
  inline bool has_desciption() const;
  inline void clear_desciption();
  static const int kDesciptionFieldNumber = 3;
  inline const ::std::string& desciption() const;
  inline void set_desciption(const ::std::string& value);
  inline void set_desciption(const char* value);
  inline void set_desciption(const char* value, size_t size);
  inline ::std::string* mutable_desciption();
  inline ::std::string* release_desciption();
  inline void set_allocated_desciption(::std::string* desciption);

  // @@protoc_insertion_point(class_scope:DianShiTech.Config.RebateConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_icon_pic();
  inline void clear_has_icon_pic();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_gain_gold();
  inline void clear_has_gain_gold();
  inline void set_has_active_level();
  inline void clear_has_active_level();
  inline void set_has_desciption();
  inline void clear_has_desciption();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 icon_pic_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 gain_gold_;
  ::google::protobuf::int32 active_level_;
  ::std::string* desciption_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_RebateConfig_2eproto();
  friend void protobuf_AssignDesc_RebateConfig_2eproto();
  friend void protobuf_ShutdownFile_RebateConfig_2eproto();

  void InitAsDefaultInstance();
  static RebateConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// RebateConfig

// optional string name = 2;
inline bool RebateConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RebateConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RebateConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RebateConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RebateConfig::name() const {
  return *name_;
}
inline void RebateConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RebateConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RebateConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RebateConfig::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RebateConfig::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RebateConfig::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 icon_pic = 4;
inline bool RebateConfig::has_icon_pic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RebateConfig::set_has_icon_pic() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RebateConfig::clear_has_icon_pic() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RebateConfig::clear_icon_pic() {
  icon_pic_ = 0;
  clear_has_icon_pic();
}
inline ::google::protobuf::int32 RebateConfig::icon_pic() const {
  return icon_pic_;
}
inline void RebateConfig::set_icon_pic(::google::protobuf::int32 value) {
  set_has_icon_pic();
  icon_pic_ = value;
}

// optional int32 id = 1;
inline bool RebateConfig::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RebateConfig::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RebateConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RebateConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RebateConfig::id() const {
  return id_;
}
inline void RebateConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 gain_gold = 6;
inline bool RebateConfig::has_gain_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RebateConfig::set_has_gain_gold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RebateConfig::clear_has_gain_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RebateConfig::clear_gain_gold() {
  gain_gold_ = 0;
  clear_has_gain_gold();
}
inline ::google::protobuf::int32 RebateConfig::gain_gold() const {
  return gain_gold_;
}
inline void RebateConfig::set_gain_gold(::google::protobuf::int32 value) {
  set_has_gain_gold();
  gain_gold_ = value;
}

// optional int32 active_level = 5;
inline bool RebateConfig::has_active_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RebateConfig::set_has_active_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RebateConfig::clear_has_active_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RebateConfig::clear_active_level() {
  active_level_ = 0;
  clear_has_active_level();
}
inline ::google::protobuf::int32 RebateConfig::active_level() const {
  return active_level_;
}
inline void RebateConfig::set_active_level(::google::protobuf::int32 value) {
  set_has_active_level();
  active_level_ = value;
}

// optional string desciption = 3;
inline bool RebateConfig::has_desciption() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RebateConfig::set_has_desciption() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RebateConfig::clear_has_desciption() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RebateConfig::clear_desciption() {
  if (desciption_ != &::google::protobuf::internal::kEmptyString) {
    desciption_->clear();
  }
  clear_has_desciption();
}
inline const ::std::string& RebateConfig::desciption() const {
  return *desciption_;
}
inline void RebateConfig::set_desciption(const ::std::string& value) {
  set_has_desciption();
  if (desciption_ == &::google::protobuf::internal::kEmptyString) {
    desciption_ = new ::std::string;
  }
  desciption_->assign(value);
}
inline void RebateConfig::set_desciption(const char* value) {
  set_has_desciption();
  if (desciption_ == &::google::protobuf::internal::kEmptyString) {
    desciption_ = new ::std::string;
  }
  desciption_->assign(value);
}
inline void RebateConfig::set_desciption(const char* value, size_t size) {
  set_has_desciption();
  if (desciption_ == &::google::protobuf::internal::kEmptyString) {
    desciption_ = new ::std::string;
  }
  desciption_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RebateConfig::mutable_desciption() {
  set_has_desciption();
  if (desciption_ == &::google::protobuf::internal::kEmptyString) {
    desciption_ = new ::std::string;
  }
  return desciption_;
}
inline ::std::string* RebateConfig::release_desciption() {
  clear_has_desciption();
  if (desciption_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desciption_;
    desciption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RebateConfig::set_allocated_desciption(::std::string* desciption) {
  if (desciption_ != &::google::protobuf::internal::kEmptyString) {
    delete desciption_;
  }
  if (desciption) {
    set_has_desciption();
    desciption_ = desciption;
  } else {
    clear_has_desciption();
    desciption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RebateConfig_2eproto__INCLUDED

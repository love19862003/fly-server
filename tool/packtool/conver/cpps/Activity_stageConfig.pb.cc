// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Activity_stageConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Activity_stageConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* Activity_stageConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_stageConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Activity_5fstageConfig_2eproto() {
  protobuf_AddDesc_Activity_5fstageConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Activity_stageConfig.proto");
  GOOGLE_CHECK(file != NULL);
  Activity_stageConfig_descriptor_ = file->message_type(0);
  static const int Activity_stageConfig_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_stageConfig, stage_id_hard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_stageConfig, close_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_stageConfig, stage_id_eary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_stageConfig, open_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_stageConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_stageConfig, open_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_stageConfig, resource_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_stageConfig, close_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_stageConfig, week_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_stageConfig, stage_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_stageConfig, stage_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_stageConfig, stage_id_normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_stageConfig, open_week_show_),
  };
  Activity_stageConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_stageConfig_descriptor_,
      Activity_stageConfig::default_instance_,
      Activity_stageConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_stageConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_stageConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_stageConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Activity_5fstageConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_stageConfig_descriptor_, &Activity_stageConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Activity_5fstageConfig_2eproto() {
  delete Activity_stageConfig::default_instance_;
  delete Activity_stageConfig_reflection_;
}

void protobuf_AddDesc_Activity_5fstageConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032Activity_stageConfig.proto\022\022DianShiTec"
    "h.Config\032\025ConfigTypeGroup.proto\"\237\002\n\024Acti"
    "vity_stageConfig\022\025\n\rstage_id_hard\030\004 \001(\005\022"
    "\022\n\nclose_date\030\010 \001(\005\022\025\n\rstage_id_eary\030\002 \001"
    "(\005\022\021\n\topen_time\030\013 \001(\005\022\n\n\002id\030\001 \001(\005\022\021\n\tope"
    "n_date\030\007 \001(\005\022\023\n\013resource_id\030\005 \001(\005\022\022\n\nclo"
    "se_time\030\014 \001(\005\022\021\n\tweek_date\030\t \003(\005\022\022\n\nstag"
    "e_type\030\n \001(\005\022\022\n\nstage_name\030\006 \001(\005\022\027\n\017stag"
    "e_id_normal\030\003 \001(\005\022\026\n\016open_week_show\030\r \001("
    "\t", 361);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Activity_stageConfig.proto", &protobuf_RegisterTypes);
  Activity_stageConfig::default_instance_ = new Activity_stageConfig();
  Activity_stageConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Activity_5fstageConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Activity_5fstageConfig_2eproto {
  StaticDescriptorInitializer_Activity_5fstageConfig_2eproto() {
    protobuf_AddDesc_Activity_5fstageConfig_2eproto();
  }
} static_descriptor_initializer_Activity_5fstageConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Activity_stageConfig::kStageIdHardFieldNumber;
const int Activity_stageConfig::kCloseDateFieldNumber;
const int Activity_stageConfig::kStageIdEaryFieldNumber;
const int Activity_stageConfig::kOpenTimeFieldNumber;
const int Activity_stageConfig::kIdFieldNumber;
const int Activity_stageConfig::kOpenDateFieldNumber;
const int Activity_stageConfig::kResourceIdFieldNumber;
const int Activity_stageConfig::kCloseTimeFieldNumber;
const int Activity_stageConfig::kWeekDateFieldNumber;
const int Activity_stageConfig::kStageTypeFieldNumber;
const int Activity_stageConfig::kStageNameFieldNumber;
const int Activity_stageConfig::kStageIdNormalFieldNumber;
const int Activity_stageConfig::kOpenWeekShowFieldNumber;
#endif  // !_MSC_VER

Activity_stageConfig::Activity_stageConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_stageConfig::InitAsDefaultInstance() {
}

Activity_stageConfig::Activity_stageConfig(const Activity_stageConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_stageConfig::SharedCtor() {
  _cached_size_ = 0;
  stage_id_hard_ = 0;
  close_date_ = 0;
  stage_id_eary_ = 0;
  open_time_ = 0;
  id_ = 0;
  open_date_ = 0;
  resource_id_ = 0;
  close_time_ = 0;
  stage_type_ = 0;
  stage_name_ = 0;
  stage_id_normal_ = 0;
  open_week_show_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_stageConfig::~Activity_stageConfig() {
  SharedDtor();
}

void Activity_stageConfig::SharedDtor() {
  if (open_week_show_ != &::google::protobuf::internal::kEmptyString) {
    delete open_week_show_;
  }
  if (this != default_instance_) {
  }
}

void Activity_stageConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_stageConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_stageConfig_descriptor_;
}

const Activity_stageConfig& Activity_stageConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_5fstageConfig_2eproto();
  return *default_instance_;
}

Activity_stageConfig* Activity_stageConfig::default_instance_ = NULL;

Activity_stageConfig* Activity_stageConfig::New() const {
  return new Activity_stageConfig;
}

void Activity_stageConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_id_hard_ = 0;
    close_date_ = 0;
    stage_id_eary_ = 0;
    open_time_ = 0;
    id_ = 0;
    open_date_ = 0;
    resource_id_ = 0;
    close_time_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    stage_type_ = 0;
    stage_name_ = 0;
    stage_id_normal_ = 0;
    if (has_open_week_show()) {
      if (open_week_show_ != &::google::protobuf::internal::kEmptyString) {
        open_week_show_->clear();
      }
    }
  }
  week_date_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_stageConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stage_id_eary;
        break;
      }

      // optional int32 stage_id_eary = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_id_eary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_id_eary_)));
          set_has_stage_id_eary();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stage_id_normal;
        break;
      }

      // optional int32 stage_id_normal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_id_normal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_id_normal_)));
          set_has_stage_id_normal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stage_id_hard;
        break;
      }

      // optional int32 stage_id_hard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_id_hard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_id_hard_)));
          set_has_stage_id_hard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_resource_id;
        break;
      }

      // optional int32 resource_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource_id_)));
          set_has_resource_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_stage_name;
        break;
      }

      // optional int32 stage_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_name_)));
          set_has_stage_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_open_date;
        break;
      }

      // optional int32 open_date = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_date_)));
          set_has_open_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_close_date;
        break;
      }

      // optional int32 close_date = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_close_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &close_date_)));
          set_has_close_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_week_date;
        break;
      }

      // repeated int32 week_date = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_week_date())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_week_date())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_week_date;
        if (input->ExpectTag(80)) goto parse_stage_type;
        break;
      }

      // optional int32 stage_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_type_)));
          set_has_stage_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_open_time;
        break;
      }

      // optional int32 open_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_time_)));
          set_has_open_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_close_time;
        break;
      }

      // optional int32 close_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_close_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &close_time_)));
          set_has_close_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_open_week_show;
        break;
      }

      // optional string open_week_show = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_open_week_show:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_open_week_show()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->open_week_show().data(), this->open_week_show().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_stageConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 stage_id_eary = 2;
  if (has_stage_id_eary()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stage_id_eary(), output);
  }

  // optional int32 stage_id_normal = 3;
  if (has_stage_id_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stage_id_normal(), output);
  }

  // optional int32 stage_id_hard = 4;
  if (has_stage_id_hard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->stage_id_hard(), output);
  }

  // optional int32 resource_id = 5;
  if (has_resource_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->resource_id(), output);
  }

  // optional int32 stage_name = 6;
  if (has_stage_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->stage_name(), output);
  }

  // optional int32 open_date = 7;
  if (has_open_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->open_date(), output);
  }

  // optional int32 close_date = 8;
  if (has_close_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->close_date(), output);
  }

  // repeated int32 week_date = 9;
  for (int i = 0; i < this->week_date_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->week_date(i), output);
  }

  // optional int32 stage_type = 10;
  if (has_stage_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->stage_type(), output);
  }

  // optional int32 open_time = 11;
  if (has_open_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->open_time(), output);
  }

  // optional int32 close_time = 12;
  if (has_close_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->close_time(), output);
  }

  // optional string open_week_show = 13;
  if (has_open_week_show()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->open_week_show().data(), this->open_week_show().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->open_week_show(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_stageConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 stage_id_eary = 2;
  if (has_stage_id_eary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stage_id_eary(), target);
  }

  // optional int32 stage_id_normal = 3;
  if (has_stage_id_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stage_id_normal(), target);
  }

  // optional int32 stage_id_hard = 4;
  if (has_stage_id_hard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->stage_id_hard(), target);
  }

  // optional int32 resource_id = 5;
  if (has_resource_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->resource_id(), target);
  }

  // optional int32 stage_name = 6;
  if (has_stage_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->stage_name(), target);
  }

  // optional int32 open_date = 7;
  if (has_open_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->open_date(), target);
  }

  // optional int32 close_date = 8;
  if (has_close_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->close_date(), target);
  }

  // repeated int32 week_date = 9;
  for (int i = 0; i < this->week_date_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->week_date(i), target);
  }

  // optional int32 stage_type = 10;
  if (has_stage_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->stage_type(), target);
  }

  // optional int32 open_time = 11;
  if (has_open_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->open_time(), target);
  }

  // optional int32 close_time = 12;
  if (has_close_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->close_time(), target);
  }

  // optional string open_week_show = 13;
  if (has_open_week_show()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->open_week_show().data(), this->open_week_show().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->open_week_show(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_stageConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 stage_id_hard = 4;
    if (has_stage_id_hard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_id_hard());
    }

    // optional int32 close_date = 8;
    if (has_close_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->close_date());
    }

    // optional int32 stage_id_eary = 2;
    if (has_stage_id_eary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_id_eary());
    }

    // optional int32 open_time = 11;
    if (has_open_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_time());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 open_date = 7;
    if (has_open_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_date());
    }

    // optional int32 resource_id = 5;
    if (has_resource_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resource_id());
    }

    // optional int32 close_time = 12;
    if (has_close_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->close_time());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 stage_type = 10;
    if (has_stage_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_type());
    }

    // optional int32 stage_name = 6;
    if (has_stage_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_name());
    }

    // optional int32 stage_id_normal = 3;
    if (has_stage_id_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_id_normal());
    }

    // optional string open_week_show = 13;
    if (has_open_week_show()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->open_week_show());
    }

  }
  // repeated int32 week_date = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->week_date_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->week_date(i));
    }
    total_size += 1 * this->week_date_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_stageConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_stageConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_stageConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_stageConfig::MergeFrom(const Activity_stageConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  week_date_.MergeFrom(from.week_date_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage_id_hard()) {
      set_stage_id_hard(from.stage_id_hard());
    }
    if (from.has_close_date()) {
      set_close_date(from.close_date());
    }
    if (from.has_stage_id_eary()) {
      set_stage_id_eary(from.stage_id_eary());
    }
    if (from.has_open_time()) {
      set_open_time(from.open_time());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_open_date()) {
      set_open_date(from.open_date());
    }
    if (from.has_resource_id()) {
      set_resource_id(from.resource_id());
    }
    if (from.has_close_time()) {
      set_close_time(from.close_time());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_stage_type()) {
      set_stage_type(from.stage_type());
    }
    if (from.has_stage_name()) {
      set_stage_name(from.stage_name());
    }
    if (from.has_stage_id_normal()) {
      set_stage_id_normal(from.stage_id_normal());
    }
    if (from.has_open_week_show()) {
      set_open_week_show(from.open_week_show());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_stageConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_stageConfig::CopyFrom(const Activity_stageConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_stageConfig::IsInitialized() const {

  return true;
}

void Activity_stageConfig::Swap(Activity_stageConfig* other) {
  if (other != this) {
    std::swap(stage_id_hard_, other->stage_id_hard_);
    std::swap(close_date_, other->close_date_);
    std::swap(stage_id_eary_, other->stage_id_eary_);
    std::swap(open_time_, other->open_time_);
    std::swap(id_, other->id_);
    std::swap(open_date_, other->open_date_);
    std::swap(resource_id_, other->resource_id_);
    std::swap(close_time_, other->close_time_);
    week_date_.Swap(&other->week_date_);
    std::swap(stage_type_, other->stage_type_);
    std::swap(stage_name_, other->stage_name_);
    std::swap(stage_id_normal_, other->stage_id_normal_);
    std::swap(open_week_show_, other->open_week_show_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_stageConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_stageConfig_descriptor_;
  metadata.reflection = Activity_stageConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

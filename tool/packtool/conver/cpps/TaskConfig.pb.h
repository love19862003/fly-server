// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TaskConfig.proto

#ifndef PROTOBUF_TaskConfig_2eproto__INCLUDED
#define PROTOBUF_TaskConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TaskConfig_2eproto();
void protobuf_AssignDesc_TaskConfig_2eproto();
void protobuf_ShutdownFile_TaskConfig_2eproto();

class TaskConfig;

// ===================================================================

class TaskConfig : public ::google::protobuf::Message {
 public:
  TaskConfig();
  virtual ~TaskConfig();

  TaskConfig(const TaskConfig& from);

  inline TaskConfig& operator=(const TaskConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskConfig& default_instance();

  void Swap(TaskConfig* other);

  // implements Message ----------------------------------------------

  TaskConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskConfig& from);
  void MergeFrom(const TaskConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 open_task = 10;
  inline int open_task_size() const;
  inline void clear_open_task();
  static const int kOpenTaskFieldNumber = 10;
  inline ::google::protobuf::int32 open_task(int index) const;
  inline void set_open_task(int index, ::google::protobuf::int32 value);
  inline void add_open_task(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      open_task() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_open_task();

  // optional int32 rarity = 4;
  inline bool has_rarity() const;
  inline void clear_rarity();
  static const int kRarityFieldNumber = 4;
  inline ::google::protobuf::int32 rarity() const;
  inline void set_rarity(::google::protobuf::int32 value);

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 task_id = 2;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 2;
  inline ::google::protobuf::int32 task_id() const;
  inline void set_task_id(::google::protobuf::int32 value);

  // optional string desciption = 6;
  inline bool has_desciption() const;
  inline void clear_desciption();
  static const int kDesciptionFieldNumber = 6;
  inline const ::std::string& desciption() const;
  inline void set_desciption(const ::std::string& value);
  inline void set_desciption(const char* value);
  inline void set_desciption(const char* value, size_t size);
  inline ::std::string* mutable_desciption();
  inline ::std::string* release_desciption();
  inline void set_allocated_desciption(::std::string* desciption);

  // optional int32 jump_value = 13;
  inline bool has_jump_value() const;
  inline void clear_jump_value();
  static const int kJumpValueFieldNumber = 13;
  inline ::google::protobuf::int32 jump_value() const;
  inline void set_jump_value(::google::protobuf::int32 value);

  // optional int32 task_type = 3;
  inline bool has_task_type() const;
  inline void clear_task_type();
  static const int kTaskTypeFieldNumber = 3;
  inline ::google::protobuf::int32 task_type() const;
  inline void set_task_type(::google::protobuf::int32 value);

  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 jump_type = 12;
  inline bool has_jump_type() const;
  inline void clear_jump_type();
  static const int kJumpTypeFieldNumber = 12;
  inline ::google::protobuf::int32 jump_type() const;
  inline void set_jump_type(::google::protobuf::int32 value);

  // optional int32 last_task = 11;
  inline bool has_last_task() const;
  inline void clear_last_task();
  static const int kLastTaskFieldNumber = 11;
  inline ::google::protobuf::int32 last_task() const;
  inline void set_last_task(::google::protobuf::int32 value);

  // repeated .DianShiTech.Config.ConfigTypeGroup complete_condition = 8;
  inline int complete_condition_size() const;
  inline void clear_complete_condition();
  static const int kCompleteConditionFieldNumber = 8;
  inline const ::DianShiTech::Config::ConfigTypeGroup& complete_condition(int index) const;
  inline ::DianShiTech::Config::ConfigTypeGroup* mutable_complete_condition(int index);
  inline ::DianShiTech::Config::ConfigTypeGroup* add_complete_condition();
  inline const ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >&
      complete_condition() const;
  inline ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >*
      mutable_complete_condition();

  // optional int32 active_level = 7;
  inline bool has_active_level() const;
  inline void clear_active_level();
  static const int kActiveLevelFieldNumber = 7;
  inline ::google::protobuf::int32 active_level() const;
  inline void set_active_level(::google::protobuf::int32 value);

  // repeated .DianShiTech.Config.ConfigTypeGroup bonus = 9;
  inline int bonus_size() const;
  inline void clear_bonus();
  static const int kBonusFieldNumber = 9;
  inline const ::DianShiTech::Config::ConfigTypeGroup& bonus(int index) const;
  inline ::DianShiTech::Config::ConfigTypeGroup* mutable_bonus(int index);
  inline ::DianShiTech::Config::ConfigTypeGroup* add_bonus();
  inline const ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >&
      bonus() const;
  inline ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >*
      mutable_bonus();

  // @@protoc_insertion_point(class_scope:DianShiTech.Config.TaskConfig)
 private:
  inline void set_has_rarity();
  inline void clear_has_rarity();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_desciption();
  inline void clear_has_desciption();
  inline void set_has_jump_value();
  inline void clear_has_jump_value();
  inline void set_has_task_type();
  inline void clear_has_task_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_jump_type();
  inline void clear_has_jump_type();
  inline void set_has_last_task();
  inline void clear_has_last_task();
  inline void set_has_active_level();
  inline void clear_has_active_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > open_task_;
  ::google::protobuf::int32 rarity_;
  ::google::protobuf::int32 id_;
  ::std::string* desciption_;
  ::google::protobuf::int32 task_id_;
  ::google::protobuf::int32 jump_value_;
  ::std::string* name_;
  ::google::protobuf::int32 task_type_;
  ::google::protobuf::int32 jump_type_;
  ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup > complete_condition_;
  ::google::protobuf::int32 last_task_;
  ::google::protobuf::int32 active_level_;
  ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup > bonus_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_TaskConfig_2eproto();
  friend void protobuf_AssignDesc_TaskConfig_2eproto();
  friend void protobuf_ShutdownFile_TaskConfig_2eproto();

  void InitAsDefaultInstance();
  static TaskConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// TaskConfig

// repeated int32 open_task = 10;
inline int TaskConfig::open_task_size() const {
  return open_task_.size();
}
inline void TaskConfig::clear_open_task() {
  open_task_.Clear();
}
inline ::google::protobuf::int32 TaskConfig::open_task(int index) const {
  return open_task_.Get(index);
}
inline void TaskConfig::set_open_task(int index, ::google::protobuf::int32 value) {
  open_task_.Set(index, value);
}
inline void TaskConfig::add_open_task(::google::protobuf::int32 value) {
  open_task_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TaskConfig::open_task() const {
  return open_task_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TaskConfig::mutable_open_task() {
  return &open_task_;
}

// optional int32 rarity = 4;
inline bool TaskConfig::has_rarity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskConfig::set_has_rarity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskConfig::clear_has_rarity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskConfig::clear_rarity() {
  rarity_ = 0;
  clear_has_rarity();
}
inline ::google::protobuf::int32 TaskConfig::rarity() const {
  return rarity_;
}
inline void TaskConfig::set_rarity(::google::protobuf::int32 value) {
  set_has_rarity();
  rarity_ = value;
}

// optional int32 id = 1;
inline bool TaskConfig::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskConfig::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TaskConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TaskConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TaskConfig::id() const {
  return id_;
}
inline void TaskConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 task_id = 2;
inline bool TaskConfig::has_task_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TaskConfig::set_has_task_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TaskConfig::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TaskConfig::clear_task_id() {
  task_id_ = 0;
  clear_has_task_id();
}
inline ::google::protobuf::int32 TaskConfig::task_id() const {
  return task_id_;
}
inline void TaskConfig::set_task_id(::google::protobuf::int32 value) {
  set_has_task_id();
  task_id_ = value;
}

// optional string desciption = 6;
inline bool TaskConfig::has_desciption() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TaskConfig::set_has_desciption() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TaskConfig::clear_has_desciption() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TaskConfig::clear_desciption() {
  if (desciption_ != &::google::protobuf::internal::kEmptyString) {
    desciption_->clear();
  }
  clear_has_desciption();
}
inline const ::std::string& TaskConfig::desciption() const {
  return *desciption_;
}
inline void TaskConfig::set_desciption(const ::std::string& value) {
  set_has_desciption();
  if (desciption_ == &::google::protobuf::internal::kEmptyString) {
    desciption_ = new ::std::string;
  }
  desciption_->assign(value);
}
inline void TaskConfig::set_desciption(const char* value) {
  set_has_desciption();
  if (desciption_ == &::google::protobuf::internal::kEmptyString) {
    desciption_ = new ::std::string;
  }
  desciption_->assign(value);
}
inline void TaskConfig::set_desciption(const char* value, size_t size) {
  set_has_desciption();
  if (desciption_ == &::google::protobuf::internal::kEmptyString) {
    desciption_ = new ::std::string;
  }
  desciption_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TaskConfig::mutable_desciption() {
  set_has_desciption();
  if (desciption_ == &::google::protobuf::internal::kEmptyString) {
    desciption_ = new ::std::string;
  }
  return desciption_;
}
inline ::std::string* TaskConfig::release_desciption() {
  clear_has_desciption();
  if (desciption_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desciption_;
    desciption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TaskConfig::set_allocated_desciption(::std::string* desciption) {
  if (desciption_ != &::google::protobuf::internal::kEmptyString) {
    delete desciption_;
  }
  if (desciption) {
    set_has_desciption();
    desciption_ = desciption;
  } else {
    clear_has_desciption();
    desciption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 jump_value = 13;
inline bool TaskConfig::has_jump_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TaskConfig::set_has_jump_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TaskConfig::clear_has_jump_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TaskConfig::clear_jump_value() {
  jump_value_ = 0;
  clear_has_jump_value();
}
inline ::google::protobuf::int32 TaskConfig::jump_value() const {
  return jump_value_;
}
inline void TaskConfig::set_jump_value(::google::protobuf::int32 value) {
  set_has_jump_value();
  jump_value_ = value;
}

// optional int32 task_type = 3;
inline bool TaskConfig::has_task_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TaskConfig::set_has_task_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TaskConfig::clear_has_task_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TaskConfig::clear_task_type() {
  task_type_ = 0;
  clear_has_task_type();
}
inline ::google::protobuf::int32 TaskConfig::task_type() const {
  return task_type_;
}
inline void TaskConfig::set_task_type(::google::protobuf::int32 value) {
  set_has_task_type();
  task_type_ = value;
}

// optional string name = 5;
inline bool TaskConfig::has_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TaskConfig::set_has_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TaskConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TaskConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TaskConfig::name() const {
  return *name_;
}
inline void TaskConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TaskConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TaskConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TaskConfig::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* TaskConfig::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TaskConfig::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 jump_type = 12;
inline bool TaskConfig::has_jump_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TaskConfig::set_has_jump_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TaskConfig::clear_has_jump_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TaskConfig::clear_jump_type() {
  jump_type_ = 0;
  clear_has_jump_type();
}
inline ::google::protobuf::int32 TaskConfig::jump_type() const {
  return jump_type_;
}
inline void TaskConfig::set_jump_type(::google::protobuf::int32 value) {
  set_has_jump_type();
  jump_type_ = value;
}

// optional int32 last_task = 11;
inline bool TaskConfig::has_last_task() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TaskConfig::set_has_last_task() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TaskConfig::clear_has_last_task() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TaskConfig::clear_last_task() {
  last_task_ = 0;
  clear_has_last_task();
}
inline ::google::protobuf::int32 TaskConfig::last_task() const {
  return last_task_;
}
inline void TaskConfig::set_last_task(::google::protobuf::int32 value) {
  set_has_last_task();
  last_task_ = value;
}

// repeated .DianShiTech.Config.ConfigTypeGroup complete_condition = 8;
inline int TaskConfig::complete_condition_size() const {
  return complete_condition_.size();
}
inline void TaskConfig::clear_complete_condition() {
  complete_condition_.Clear();
}
inline const ::DianShiTech::Config::ConfigTypeGroup& TaskConfig::complete_condition(int index) const {
  return complete_condition_.Get(index);
}
inline ::DianShiTech::Config::ConfigTypeGroup* TaskConfig::mutable_complete_condition(int index) {
  return complete_condition_.Mutable(index);
}
inline ::DianShiTech::Config::ConfigTypeGroup* TaskConfig::add_complete_condition() {
  return complete_condition_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >&
TaskConfig::complete_condition() const {
  return complete_condition_;
}
inline ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >*
TaskConfig::mutable_complete_condition() {
  return &complete_condition_;
}

// optional int32 active_level = 7;
inline bool TaskConfig::has_active_level() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TaskConfig::set_has_active_level() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TaskConfig::clear_has_active_level() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TaskConfig::clear_active_level() {
  active_level_ = 0;
  clear_has_active_level();
}
inline ::google::protobuf::int32 TaskConfig::active_level() const {
  return active_level_;
}
inline void TaskConfig::set_active_level(::google::protobuf::int32 value) {
  set_has_active_level();
  active_level_ = value;
}

// repeated .DianShiTech.Config.ConfigTypeGroup bonus = 9;
inline int TaskConfig::bonus_size() const {
  return bonus_.size();
}
inline void TaskConfig::clear_bonus() {
  bonus_.Clear();
}
inline const ::DianShiTech::Config::ConfigTypeGroup& TaskConfig::bonus(int index) const {
  return bonus_.Get(index);
}
inline ::DianShiTech::Config::ConfigTypeGroup* TaskConfig::mutable_bonus(int index) {
  return bonus_.Mutable(index);
}
inline ::DianShiTech::Config::ConfigTypeGroup* TaskConfig::add_bonus() {
  return bonus_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >&
TaskConfig::bonus() const {
  return bonus_;
}
inline ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >*
TaskConfig::mutable_bonus() {
  return &bonus_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TaskConfig_2eproto__INCLUDED

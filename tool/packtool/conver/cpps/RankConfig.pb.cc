// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RankConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RankConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* RankConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RankConfig_2eproto() {
  protobuf_AddDesc_RankConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RankConfig.proto");
  GOOGLE_CHECK(file != NULL);
  RankConfig_descriptor_ = file->message_type(0);
  static const int RankConfig_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankConfig, sub_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankConfig, rank_pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankConfig, drop_show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankConfig, drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankConfig, rank_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankConfig, min_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankConfig, max_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankConfig, first_get_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankConfig, rob_coin_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankConfig, rob_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankConfig, rank_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankConfig, sub_rank_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankConfig, max_rob_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankConfig, rank_),
  };
  RankConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankConfig_descriptor_,
      RankConfig::default_instance_,
      RankConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RankConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankConfig_descriptor_, &RankConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RankConfig_2eproto() {
  delete RankConfig::default_instance_;
  delete RankConfig_reflection_;
}

void protobuf_AddDesc_RankConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020RankConfig.proto\022\022DianShiTech.Config\032\025"
    "ConfigTypeGroup.proto\"\315\002\n\nRankConfig\022\020\n\010"
    "sub_rank\030\006 \001(\005\022\020\n\010rank_pic\030\004 \001(\005\022\021\n\tdrop"
    "_show\030\016 \003(\005\022\n\n\002id\030\001 \001(\005\022\014\n\004drop\030\r \003(\005\022\021\n"
    "\trank_name\030\003 \001(\t\022\021\n\tmin_point\030\010 \001(\005\022\021\n\tm"
    "ax_point\030\t \001(\005\022<\n\017first_get_bonus\030\n \003(\0132"
    "#.DianShiTech.Config.ConfigTypeGroup\022\025\n\r"
    "rob_coin_rate\030\013 \001(\005\022\020\n\010rob_desc\030\014 \001(\t\022\023\n"
    "\013rank_number\030\005 \001(\005\022\025\n\rsub_rank_name\030\007 \001("
    "\t\022\024\n\014max_rob_coin\030\017 \001(\005\022\014\n\004rank\030\002 \001(\005", 397);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RankConfig.proto", &protobuf_RegisterTypes);
  RankConfig::default_instance_ = new RankConfig();
  RankConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RankConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RankConfig_2eproto {
  StaticDescriptorInitializer_RankConfig_2eproto() {
    protobuf_AddDesc_RankConfig_2eproto();
  }
} static_descriptor_initializer_RankConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RankConfig::kSubRankFieldNumber;
const int RankConfig::kRankPicFieldNumber;
const int RankConfig::kDropShowFieldNumber;
const int RankConfig::kIdFieldNumber;
const int RankConfig::kDropFieldNumber;
const int RankConfig::kRankNameFieldNumber;
const int RankConfig::kMinPointFieldNumber;
const int RankConfig::kMaxPointFieldNumber;
const int RankConfig::kFirstGetBonusFieldNumber;
const int RankConfig::kRobCoinRateFieldNumber;
const int RankConfig::kRobDescFieldNumber;
const int RankConfig::kRankNumberFieldNumber;
const int RankConfig::kSubRankNameFieldNumber;
const int RankConfig::kMaxRobCoinFieldNumber;
const int RankConfig::kRankFieldNumber;
#endif  // !_MSC_VER

RankConfig::RankConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankConfig::InitAsDefaultInstance() {
}

RankConfig::RankConfig(const RankConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankConfig::SharedCtor() {
  _cached_size_ = 0;
  sub_rank_ = 0;
  rank_pic_ = 0;
  id_ = 0;
  rank_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  min_point_ = 0;
  max_point_ = 0;
  rob_coin_rate_ = 0;
  rob_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_number_ = 0;
  sub_rank_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_rob_coin_ = 0;
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankConfig::~RankConfig() {
  SharedDtor();
}

void RankConfig::SharedDtor() {
  if (rank_name_ != &::google::protobuf::internal::kEmptyString) {
    delete rank_name_;
  }
  if (rob_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete rob_desc_;
  }
  if (sub_rank_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sub_rank_name_;
  }
  if (this != default_instance_) {
  }
}

void RankConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankConfig_descriptor_;
}

const RankConfig& RankConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RankConfig_2eproto();
  return *default_instance_;
}

RankConfig* RankConfig::default_instance_ = NULL;

RankConfig* RankConfig::New() const {
  return new RankConfig;
}

void RankConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sub_rank_ = 0;
    rank_pic_ = 0;
    id_ = 0;
    if (has_rank_name()) {
      if (rank_name_ != &::google::protobuf::internal::kEmptyString) {
        rank_name_->clear();
      }
    }
    min_point_ = 0;
    max_point_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    rob_coin_rate_ = 0;
    if (has_rob_desc()) {
      if (rob_desc_ != &::google::protobuf::internal::kEmptyString) {
        rob_desc_->clear();
      }
    }
    rank_number_ = 0;
    if (has_sub_rank_name()) {
      if (sub_rank_name_ != &::google::protobuf::internal::kEmptyString) {
        sub_rank_name_->clear();
      }
    }
    max_rob_coin_ = 0;
    rank_ = 0;
  }
  drop_show_.Clear();
  drop_.Clear();
  first_get_bonus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional int32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rank_name;
        break;
      }

      // optional string rank_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rank_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rank_name().data(), this->rank_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank_pic;
        break;
      }

      // optional int32 rank_pic = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_pic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_pic_)));
          set_has_rank_pic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rank_number;
        break;
      }

      // optional int32 rank_number = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_number_)));
          set_has_rank_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sub_rank;
        break;
      }

      // optional int32 sub_rank = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_rank_)));
          set_has_sub_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_sub_rank_name;
        break;
      }

      // optional string sub_rank_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sub_rank_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sub_rank_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sub_rank_name().data(), this->sub_rank_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_min_point;
        break;
      }

      // optional int32 min_point = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_point_)));
          set_has_min_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_max_point;
        break;
      }

      // optional int32 max_point = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_point_)));
          set_has_max_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_first_get_bonus;
        break;
      }

      // repeated .DianShiTech.Config.ConfigTypeGroup first_get_bonus = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_first_get_bonus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_first_get_bonus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_first_get_bonus;
        if (input->ExpectTag(88)) goto parse_rob_coin_rate;
        break;
      }

      // optional int32 rob_coin_rate = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rob_coin_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rob_coin_rate_)));
          set_has_rob_coin_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_rob_desc;
        break;
      }

      // optional string rob_desc = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rob_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rob_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rob_desc().data(), this->rob_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_drop;
        break;
      }

      // repeated int32 drop = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_drop())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_drop())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_drop;
        if (input->ExpectTag(112)) goto parse_drop_show;
        break;
      }

      // repeated int32 drop_show = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112, input, this->mutable_drop_show())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_drop_show())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_drop_show;
        if (input->ExpectTag(120)) goto parse_max_rob_coin;
        break;
      }

      // optional int32 max_rob_coin = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_rob_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_rob_coin_)));
          set_has_max_rob_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  // optional string rank_name = 3;
  if (has_rank_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rank_name().data(), this->rank_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rank_name(), output);
  }

  // optional int32 rank_pic = 4;
  if (has_rank_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank_pic(), output);
  }

  // optional int32 rank_number = 5;
  if (has_rank_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rank_number(), output);
  }

  // optional int32 sub_rank = 6;
  if (has_sub_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sub_rank(), output);
  }

  // optional string sub_rank_name = 7;
  if (has_sub_rank_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sub_rank_name().data(), this->sub_rank_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->sub_rank_name(), output);
  }

  // optional int32 min_point = 8;
  if (has_min_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->min_point(), output);
  }

  // optional int32 max_point = 9;
  if (has_max_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->max_point(), output);
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup first_get_bonus = 10;
  for (int i = 0; i < this->first_get_bonus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->first_get_bonus(i), output);
  }

  // optional int32 rob_coin_rate = 11;
  if (has_rob_coin_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->rob_coin_rate(), output);
  }

  // optional string rob_desc = 12;
  if (has_rob_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rob_desc().data(), this->rob_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->rob_desc(), output);
  }

  // repeated int32 drop = 13;
  for (int i = 0; i < this->drop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->drop(i), output);
  }

  // repeated int32 drop_show = 14;
  for (int i = 0; i < this->drop_show_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->drop_show(i), output);
  }

  // optional int32 max_rob_coin = 15;
  if (has_max_rob_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->max_rob_coin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }

  // optional string rank_name = 3;
  if (has_rank_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rank_name().data(), this->rank_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rank_name(), target);
  }

  // optional int32 rank_pic = 4;
  if (has_rank_pic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank_pic(), target);
  }

  // optional int32 rank_number = 5;
  if (has_rank_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rank_number(), target);
  }

  // optional int32 sub_rank = 6;
  if (has_sub_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sub_rank(), target);
  }

  // optional string sub_rank_name = 7;
  if (has_sub_rank_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sub_rank_name().data(), this->sub_rank_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sub_rank_name(), target);
  }

  // optional int32 min_point = 8;
  if (has_min_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->min_point(), target);
  }

  // optional int32 max_point = 9;
  if (has_max_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->max_point(), target);
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup first_get_bonus = 10;
  for (int i = 0; i < this->first_get_bonus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->first_get_bonus(i), target);
  }

  // optional int32 rob_coin_rate = 11;
  if (has_rob_coin_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->rob_coin_rate(), target);
  }

  // optional string rob_desc = 12;
  if (has_rob_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rob_desc().data(), this->rob_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->rob_desc(), target);
  }

  // repeated int32 drop = 13;
  for (int i = 0; i < this->drop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->drop(i), target);
  }

  // repeated int32 drop_show = 14;
  for (int i = 0; i < this->drop_show_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(14, this->drop_show(i), target);
  }

  // optional int32 max_rob_coin = 15;
  if (has_max_rob_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->max_rob_coin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sub_rank = 6;
    if (has_sub_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_rank());
    }

    // optional int32 rank_pic = 4;
    if (has_rank_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_pic());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string rank_name = 3;
    if (has_rank_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rank_name());
    }

    // optional int32 min_point = 8;
    if (has_min_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_point());
    }

    // optional int32 max_point = 9;
    if (has_max_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_point());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 rob_coin_rate = 11;
    if (has_rob_coin_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rob_coin_rate());
    }

    // optional string rob_desc = 12;
    if (has_rob_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rob_desc());
    }

    // optional int32 rank_number = 5;
    if (has_rank_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_number());
    }

    // optional string sub_rank_name = 7;
    if (has_sub_rank_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sub_rank_name());
    }

    // optional int32 max_rob_coin = 15;
    if (has_max_rob_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_rob_coin());
    }

    // optional int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  // repeated int32 drop_show = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->drop_show_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->drop_show(i));
    }
    total_size += 1 * this->drop_show_size() + data_size;
  }

  // repeated int32 drop = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->drop_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->drop(i));
    }
    total_size += 1 * this->drop_size() + data_size;
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup first_get_bonus = 10;
  total_size += 1 * this->first_get_bonus_size();
  for (int i = 0; i < this->first_get_bonus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->first_get_bonus(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankConfig::MergeFrom(const RankConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  drop_show_.MergeFrom(from.drop_show_);
  drop_.MergeFrom(from.drop_);
  first_get_bonus_.MergeFrom(from.first_get_bonus_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sub_rank()) {
      set_sub_rank(from.sub_rank());
    }
    if (from.has_rank_pic()) {
      set_rank_pic(from.rank_pic());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rank_name()) {
      set_rank_name(from.rank_name());
    }
    if (from.has_min_point()) {
      set_min_point(from.min_point());
    }
    if (from.has_max_point()) {
      set_max_point(from.max_point());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_rob_coin_rate()) {
      set_rob_coin_rate(from.rob_coin_rate());
    }
    if (from.has_rob_desc()) {
      set_rob_desc(from.rob_desc());
    }
    if (from.has_rank_number()) {
      set_rank_number(from.rank_number());
    }
    if (from.has_sub_rank_name()) {
      set_sub_rank_name(from.sub_rank_name());
    }
    if (from.has_max_rob_coin()) {
      set_max_rob_coin(from.max_rob_coin());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankConfig::CopyFrom(const RankConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankConfig::IsInitialized() const {

  return true;
}

void RankConfig::Swap(RankConfig* other) {
  if (other != this) {
    std::swap(sub_rank_, other->sub_rank_);
    std::swap(rank_pic_, other->rank_pic_);
    drop_show_.Swap(&other->drop_show_);
    std::swap(id_, other->id_);
    drop_.Swap(&other->drop_);
    std::swap(rank_name_, other->rank_name_);
    std::swap(min_point_, other->min_point_);
    std::swap(max_point_, other->max_point_);
    first_get_bonus_.Swap(&other->first_get_bonus_);
    std::swap(rob_coin_rate_, other->rob_coin_rate_);
    std::swap(rob_desc_, other->rob_desc_);
    std::swap(rank_number_, other->rank_number_);
    std::swap(sub_rank_name_, other->sub_rank_name_);
    std::swap(max_rob_coin_, other->max_rob_coin_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankConfig_descriptor_;
  metadata.reflection = RankConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

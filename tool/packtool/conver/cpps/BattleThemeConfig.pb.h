// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleThemeConfig.proto

#ifndef PROTOBUF_BattleThemeConfig_2eproto__INCLUDED
#define PROTOBUF_BattleThemeConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BattleThemeConfig_2eproto();
void protobuf_AssignDesc_BattleThemeConfig_2eproto();
void protobuf_ShutdownFile_BattleThemeConfig_2eproto();

class BattleThemeConfig;

// ===================================================================

class BattleThemeConfig : public ::google::protobuf::Message {
 public:
  BattleThemeConfig();
  virtual ~BattleThemeConfig();

  BattleThemeConfig(const BattleThemeConfig& from);

  inline BattleThemeConfig& operator=(const BattleThemeConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleThemeConfig& default_instance();

  void Swap(BattleThemeConfig* other);

  // implements Message ----------------------------------------------

  BattleThemeConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleThemeConfig& from);
  void MergeFrom(const BattleThemeConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 empty = 13;
  inline bool has_empty() const;
  inline void clear_empty();
  static const int kEmptyFieldNumber = 13;
  inline ::google::protobuf::int32 empty() const;
  inline void set_empty(::google::protobuf::int32 value);

  // optional int32 effect = 14;
  inline bool has_effect() const;
  inline void clear_effect();
  static const int kEffectFieldNumber = 14;
  inline ::google::protobuf::int32 effect() const;
  inline void set_effect(::google::protobuf::int32 value);

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated int32 guard_towner = 12;
  inline int guard_towner_size() const;
  inline void clear_guard_towner();
  static const int kGuardTownerFieldNumber = 12;
  inline ::google::protobuf::int32 guard_towner(int index) const;
  inline void set_guard_towner(int index, ::google::protobuf::int32 value);
  inline void add_guard_towner(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      guard_towner() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_guard_towner();

  // repeated int32 wall = 11;
  inline int wall_size() const;
  inline void clear_wall();
  static const int kWallFieldNumber = 11;
  inline ::google::protobuf::int32 wall(int index) const;
  inline void set_wall(int index, ::google::protobuf::int32 value);
  inline void add_wall(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      wall() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_wall();

  // optional int32 forest = 5;
  inline bool has_forest() const;
  inline void clear_forest();
  static const int kForestFieldNumber = 5;
  inline ::google::protobuf::int32 forest() const;
  inline void set_forest(::google::protobuf::int32 value);

  // optional int32 barracks = 10;
  inline bool has_barracks() const;
  inline void clear_barracks();
  static const int kBarracksFieldNumber = 10;
  inline ::google::protobuf::int32 barracks() const;
  inline void set_barracks(::google::protobuf::int32 value);

  // optional int32 flag = 9;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 9;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 bue_tent = 7;
  inline bool has_bue_tent() const;
  inline void clear_bue_tent();
  static const int kBueTentFieldNumber = 7;
  inline ::google::protobuf::int32 bue_tent() const;
  inline void set_bue_tent(::google::protobuf::int32 value);

  // optional int32 green_tent = 8;
  inline bool has_green_tent() const;
  inline void clear_green_tent();
  static const int kGreenTentFieldNumber = 8;
  inline ::google::protobuf::int32 green_tent() const;
  inline void set_green_tent(::google::protobuf::int32 value);

  // optional int32 hill = 4;
  inline bool has_hill() const;
  inline void clear_hill();
  static const int kHillFieldNumber = 4;
  inline ::google::protobuf::int32 hill() const;
  inline void set_hill(::google::protobuf::int32 value);

  // optional int32 bg = 3;
  inline bool has_bg() const;
  inline void clear_bg();
  static const int kBgFieldNumber = 3;
  inline ::google::protobuf::int32 bg() const;
  inline void set_bg(::google::protobuf::int32 value);

  // optional int32 tower = 6;
  inline bool has_tower() const;
  inline void clear_tower();
  static const int kTowerFieldNumber = 6;
  inline ::google::protobuf::int32 tower() const;
  inline void set_tower(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DianShiTech.Config.BattleThemeConfig)
 private:
  inline void set_has_empty();
  inline void clear_has_empty();
  inline void set_has_effect();
  inline void clear_has_effect();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_forest();
  inline void clear_has_forest();
  inline void set_has_barracks();
  inline void clear_has_barracks();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_bue_tent();
  inline void clear_has_bue_tent();
  inline void set_has_green_tent();
  inline void clear_has_green_tent();
  inline void set_has_hill();
  inline void clear_has_hill();
  inline void set_has_bg();
  inline void clear_has_bg();
  inline void set_has_tower();
  inline void clear_has_tower();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 empty_;
  ::google::protobuf::int32 effect_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > guard_towner_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 forest_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > wall_;
  ::google::protobuf::int32 barracks_;
  ::google::protobuf::int32 flag_;
  ::std::string* name_;
  ::google::protobuf::int32 bue_tent_;
  ::google::protobuf::int32 green_tent_;
  ::google::protobuf::int32 hill_;
  ::google::protobuf::int32 bg_;
  ::google::protobuf::int32 tower_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_BattleThemeConfig_2eproto();
  friend void protobuf_AssignDesc_BattleThemeConfig_2eproto();
  friend void protobuf_ShutdownFile_BattleThemeConfig_2eproto();

  void InitAsDefaultInstance();
  static BattleThemeConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// BattleThemeConfig

// optional int32 empty = 13;
inline bool BattleThemeConfig::has_empty() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleThemeConfig::set_has_empty() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleThemeConfig::clear_has_empty() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleThemeConfig::clear_empty() {
  empty_ = 0;
  clear_has_empty();
}
inline ::google::protobuf::int32 BattleThemeConfig::empty() const {
  return empty_;
}
inline void BattleThemeConfig::set_empty(::google::protobuf::int32 value) {
  set_has_empty();
  empty_ = value;
}

// optional int32 effect = 14;
inline bool BattleThemeConfig::has_effect() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BattleThemeConfig::set_has_effect() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BattleThemeConfig::clear_has_effect() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BattleThemeConfig::clear_effect() {
  effect_ = 0;
  clear_has_effect();
}
inline ::google::protobuf::int32 BattleThemeConfig::effect() const {
  return effect_;
}
inline void BattleThemeConfig::set_effect(::google::protobuf::int32 value) {
  set_has_effect();
  effect_ = value;
}

// optional int32 id = 1;
inline bool BattleThemeConfig::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BattleThemeConfig::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BattleThemeConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BattleThemeConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 BattleThemeConfig::id() const {
  return id_;
}
inline void BattleThemeConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated int32 guard_towner = 12;
inline int BattleThemeConfig::guard_towner_size() const {
  return guard_towner_.size();
}
inline void BattleThemeConfig::clear_guard_towner() {
  guard_towner_.Clear();
}
inline ::google::protobuf::int32 BattleThemeConfig::guard_towner(int index) const {
  return guard_towner_.Get(index);
}
inline void BattleThemeConfig::set_guard_towner(int index, ::google::protobuf::int32 value) {
  guard_towner_.Set(index, value);
}
inline void BattleThemeConfig::add_guard_towner(::google::protobuf::int32 value) {
  guard_towner_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BattleThemeConfig::guard_towner() const {
  return guard_towner_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BattleThemeConfig::mutable_guard_towner() {
  return &guard_towner_;
}

// repeated int32 wall = 11;
inline int BattleThemeConfig::wall_size() const {
  return wall_.size();
}
inline void BattleThemeConfig::clear_wall() {
  wall_.Clear();
}
inline ::google::protobuf::int32 BattleThemeConfig::wall(int index) const {
  return wall_.Get(index);
}
inline void BattleThemeConfig::set_wall(int index, ::google::protobuf::int32 value) {
  wall_.Set(index, value);
}
inline void BattleThemeConfig::add_wall(::google::protobuf::int32 value) {
  wall_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BattleThemeConfig::wall() const {
  return wall_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BattleThemeConfig::mutable_wall() {
  return &wall_;
}

// optional int32 forest = 5;
inline bool BattleThemeConfig::has_forest() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BattleThemeConfig::set_has_forest() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BattleThemeConfig::clear_has_forest() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BattleThemeConfig::clear_forest() {
  forest_ = 0;
  clear_has_forest();
}
inline ::google::protobuf::int32 BattleThemeConfig::forest() const {
  return forest_;
}
inline void BattleThemeConfig::set_forest(::google::protobuf::int32 value) {
  set_has_forest();
  forest_ = value;
}

// optional int32 barracks = 10;
inline bool BattleThemeConfig::has_barracks() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BattleThemeConfig::set_has_barracks() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BattleThemeConfig::clear_has_barracks() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BattleThemeConfig::clear_barracks() {
  barracks_ = 0;
  clear_has_barracks();
}
inline ::google::protobuf::int32 BattleThemeConfig::barracks() const {
  return barracks_;
}
inline void BattleThemeConfig::set_barracks(::google::protobuf::int32 value) {
  set_has_barracks();
  barracks_ = value;
}

// optional int32 flag = 9;
inline bool BattleThemeConfig::has_flag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BattleThemeConfig::set_has_flag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BattleThemeConfig::clear_has_flag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BattleThemeConfig::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 BattleThemeConfig::flag() const {
  return flag_;
}
inline void BattleThemeConfig::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// optional string name = 2;
inline bool BattleThemeConfig::has_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BattleThemeConfig::set_has_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BattleThemeConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BattleThemeConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BattleThemeConfig::name() const {
  return *name_;
}
inline void BattleThemeConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BattleThemeConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BattleThemeConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BattleThemeConfig::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* BattleThemeConfig::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BattleThemeConfig::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 bue_tent = 7;
inline bool BattleThemeConfig::has_bue_tent() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BattleThemeConfig::set_has_bue_tent() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BattleThemeConfig::clear_has_bue_tent() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BattleThemeConfig::clear_bue_tent() {
  bue_tent_ = 0;
  clear_has_bue_tent();
}
inline ::google::protobuf::int32 BattleThemeConfig::bue_tent() const {
  return bue_tent_;
}
inline void BattleThemeConfig::set_bue_tent(::google::protobuf::int32 value) {
  set_has_bue_tent();
  bue_tent_ = value;
}

// optional int32 green_tent = 8;
inline bool BattleThemeConfig::has_green_tent() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BattleThemeConfig::set_has_green_tent() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BattleThemeConfig::clear_has_green_tent() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BattleThemeConfig::clear_green_tent() {
  green_tent_ = 0;
  clear_has_green_tent();
}
inline ::google::protobuf::int32 BattleThemeConfig::green_tent() const {
  return green_tent_;
}
inline void BattleThemeConfig::set_green_tent(::google::protobuf::int32 value) {
  set_has_green_tent();
  green_tent_ = value;
}

// optional int32 hill = 4;
inline bool BattleThemeConfig::has_hill() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BattleThemeConfig::set_has_hill() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BattleThemeConfig::clear_has_hill() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BattleThemeConfig::clear_hill() {
  hill_ = 0;
  clear_has_hill();
}
inline ::google::protobuf::int32 BattleThemeConfig::hill() const {
  return hill_;
}
inline void BattleThemeConfig::set_hill(::google::protobuf::int32 value) {
  set_has_hill();
  hill_ = value;
}

// optional int32 bg = 3;
inline bool BattleThemeConfig::has_bg() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BattleThemeConfig::set_has_bg() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BattleThemeConfig::clear_has_bg() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BattleThemeConfig::clear_bg() {
  bg_ = 0;
  clear_has_bg();
}
inline ::google::protobuf::int32 BattleThemeConfig::bg() const {
  return bg_;
}
inline void BattleThemeConfig::set_bg(::google::protobuf::int32 value) {
  set_has_bg();
  bg_ = value;
}

// optional int32 tower = 6;
inline bool BattleThemeConfig::has_tower() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BattleThemeConfig::set_has_tower() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BattleThemeConfig::clear_has_tower() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BattleThemeConfig::clear_tower() {
  tower_ = 0;
  clear_has_tower();
}
inline ::google::protobuf::int32 BattleThemeConfig::tower() const {
  return tower_;
}
inline void BattleThemeConfig::set_tower(::google::protobuf::int32 value) {
  set_has_tower();
  tower_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BattleThemeConfig_2eproto__INCLUDED

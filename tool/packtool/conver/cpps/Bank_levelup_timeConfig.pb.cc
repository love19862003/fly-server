// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Bank_levelup_timeConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Bank_levelup_timeConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* Bank_levelup_timeConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bank_levelup_timeConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Bank_5flevelup_5ftimeConfig_2eproto() {
  protobuf_AddDesc_Bank_5flevelup_5ftimeConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Bank_levelup_timeConfig.proto");
  GOOGLE_CHECK(file != NULL);
  Bank_levelup_timeConfig_descriptor_ = file->message_type(0);
  static const int Bank_levelup_timeConfig_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bank_levelup_timeConfig, player_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bank_levelup_timeConfig, money_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bank_levelup_timeConfig, clear_cd_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bank_levelup_timeConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bank_levelup_timeConfig, next_level_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bank_levelup_timeConfig, max_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bank_levelup_timeConfig, bank_max_rate_),
  };
  Bank_levelup_timeConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bank_levelup_timeConfig_descriptor_,
      Bank_levelup_timeConfig::default_instance_,
      Bank_levelup_timeConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bank_levelup_timeConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bank_levelup_timeConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bank_levelup_timeConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Bank_5flevelup_5ftimeConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bank_levelup_timeConfig_descriptor_, &Bank_levelup_timeConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Bank_5flevelup_5ftimeConfig_2eproto() {
  delete Bank_levelup_timeConfig::default_instance_;
  delete Bank_levelup_timeConfig_reflection_;
}

void protobuf_AddDesc_Bank_5flevelup_5ftimeConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035Bank_levelup_timeConfig.proto\022\022DianShi"
    "Tech.Config\032\025ConfigTypeGroup.proto\"\246\001\n\027B"
    "ank_levelup_timeConfig\022\021\n\tplayer_lv\030\007 \001("
    "\005\022\022\n\nmoney_cost\030\005 \001(\005\022\025\n\rclear_cd_cost\030\006"
    " \001(\005\022\n\n\002id\030\001 \001(\005\022\027\n\017next_level_time\030\002 \001("
    "\005\022\021\n\tmax_point\030\003 \001(\005\022\025\n\rbank_max_rate\030\004 "
    "\001(\005", 243);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Bank_levelup_timeConfig.proto", &protobuf_RegisterTypes);
  Bank_levelup_timeConfig::default_instance_ = new Bank_levelup_timeConfig();
  Bank_levelup_timeConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Bank_5flevelup_5ftimeConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Bank_5flevelup_5ftimeConfig_2eproto {
  StaticDescriptorInitializer_Bank_5flevelup_5ftimeConfig_2eproto() {
    protobuf_AddDesc_Bank_5flevelup_5ftimeConfig_2eproto();
  }
} static_descriptor_initializer_Bank_5flevelup_5ftimeConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Bank_levelup_timeConfig::kPlayerLvFieldNumber;
const int Bank_levelup_timeConfig::kMoneyCostFieldNumber;
const int Bank_levelup_timeConfig::kClearCdCostFieldNumber;
const int Bank_levelup_timeConfig::kIdFieldNumber;
const int Bank_levelup_timeConfig::kNextLevelTimeFieldNumber;
const int Bank_levelup_timeConfig::kMaxPointFieldNumber;
const int Bank_levelup_timeConfig::kBankMaxRateFieldNumber;
#endif  // !_MSC_VER

Bank_levelup_timeConfig::Bank_levelup_timeConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Bank_levelup_timeConfig::InitAsDefaultInstance() {
}

Bank_levelup_timeConfig::Bank_levelup_timeConfig(const Bank_levelup_timeConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Bank_levelup_timeConfig::SharedCtor() {
  _cached_size_ = 0;
  player_lv_ = 0;
  money_cost_ = 0;
  clear_cd_cost_ = 0;
  id_ = 0;
  next_level_time_ = 0;
  max_point_ = 0;
  bank_max_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bank_levelup_timeConfig::~Bank_levelup_timeConfig() {
  SharedDtor();
}

void Bank_levelup_timeConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Bank_levelup_timeConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bank_levelup_timeConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bank_levelup_timeConfig_descriptor_;
}

const Bank_levelup_timeConfig& Bank_levelup_timeConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Bank_5flevelup_5ftimeConfig_2eproto();
  return *default_instance_;
}

Bank_levelup_timeConfig* Bank_levelup_timeConfig::default_instance_ = NULL;

Bank_levelup_timeConfig* Bank_levelup_timeConfig::New() const {
  return new Bank_levelup_timeConfig;
}

void Bank_levelup_timeConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_lv_ = 0;
    money_cost_ = 0;
    clear_cd_cost_ = 0;
    id_ = 0;
    next_level_time_ = 0;
    max_point_ = 0;
    bank_max_rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bank_levelup_timeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_next_level_time;
        break;
      }

      // optional int32 next_level_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_level_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_level_time_)));
          set_has_next_level_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_point;
        break;
      }

      // optional int32 max_point = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_point_)));
          set_has_max_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bank_max_rate;
        break;
      }

      // optional int32 bank_max_rate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bank_max_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bank_max_rate_)));
          set_has_bank_max_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_money_cost;
        break;
      }

      // optional int32 money_cost = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_cost_)));
          set_has_money_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_clear_cd_cost;
        break;
      }

      // optional int32 clear_cd_cost = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clear_cd_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clear_cd_cost_)));
          set_has_clear_cd_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_player_lv;
        break;
      }

      // optional int32 player_lv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_lv_)));
          set_has_player_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Bank_levelup_timeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 next_level_time = 2;
  if (has_next_level_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->next_level_time(), output);
  }

  // optional int32 max_point = 3;
  if (has_max_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_point(), output);
  }

  // optional int32 bank_max_rate = 4;
  if (has_bank_max_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bank_max_rate(), output);
  }

  // optional int32 money_cost = 5;
  if (has_money_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->money_cost(), output);
  }

  // optional int32 clear_cd_cost = 6;
  if (has_clear_cd_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->clear_cd_cost(), output);
  }

  // optional int32 player_lv = 7;
  if (has_player_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->player_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Bank_levelup_timeConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 next_level_time = 2;
  if (has_next_level_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->next_level_time(), target);
  }

  // optional int32 max_point = 3;
  if (has_max_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_point(), target);
  }

  // optional int32 bank_max_rate = 4;
  if (has_bank_max_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bank_max_rate(), target);
  }

  // optional int32 money_cost = 5;
  if (has_money_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->money_cost(), target);
  }

  // optional int32 clear_cd_cost = 6;
  if (has_clear_cd_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->clear_cd_cost(), target);
  }

  // optional int32 player_lv = 7;
  if (has_player_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->player_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Bank_levelup_timeConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_lv = 7;
    if (has_player_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_lv());
    }

    // optional int32 money_cost = 5;
    if (has_money_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money_cost());
    }

    // optional int32 clear_cd_cost = 6;
    if (has_clear_cd_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clear_cd_cost());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 next_level_time = 2;
    if (has_next_level_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_level_time());
    }

    // optional int32 max_point = 3;
    if (has_max_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_point());
    }

    // optional int32 bank_max_rate = 4;
    if (has_bank_max_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bank_max_rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bank_levelup_timeConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bank_levelup_timeConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bank_levelup_timeConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bank_levelup_timeConfig::MergeFrom(const Bank_levelup_timeConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_lv()) {
      set_player_lv(from.player_lv());
    }
    if (from.has_money_cost()) {
      set_money_cost(from.money_cost());
    }
    if (from.has_clear_cd_cost()) {
      set_clear_cd_cost(from.clear_cd_cost());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_next_level_time()) {
      set_next_level_time(from.next_level_time());
    }
    if (from.has_max_point()) {
      set_max_point(from.max_point());
    }
    if (from.has_bank_max_rate()) {
      set_bank_max_rate(from.bank_max_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bank_levelup_timeConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bank_levelup_timeConfig::CopyFrom(const Bank_levelup_timeConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bank_levelup_timeConfig::IsInitialized() const {

  return true;
}

void Bank_levelup_timeConfig::Swap(Bank_levelup_timeConfig* other) {
  if (other != this) {
    std::swap(player_lv_, other->player_lv_);
    std::swap(money_cost_, other->money_cost_);
    std::swap(clear_cd_cost_, other->clear_cd_cost_);
    std::swap(id_, other->id_);
    std::swap(next_level_time_, other->next_level_time_);
    std::swap(max_point_, other->max_point_);
    std::swap(bank_max_rate_, other->bank_max_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bank_levelup_timeConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bank_levelup_timeConfig_descriptor_;
  metadata.reflection = Bank_levelup_timeConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RebateConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RebateConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* RebateConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RebateConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RebateConfig_2eproto() {
  protobuf_AddDesc_RebateConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RebateConfig.proto");
  GOOGLE_CHECK(file != NULL);
  RebateConfig_descriptor_ = file->message_type(0);
  static const int RebateConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebateConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebateConfig, icon_pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebateConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebateConfig, gain_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebateConfig, active_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebateConfig, desciption_),
  };
  RebateConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RebateConfig_descriptor_,
      RebateConfig::default_instance_,
      RebateConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebateConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebateConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RebateConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RebateConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RebateConfig_descriptor_, &RebateConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RebateConfig_2eproto() {
  delete RebateConfig::default_instance_;
  delete RebateConfig_reflection_;
}

void protobuf_AddDesc_RebateConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022RebateConfig.proto\022\022DianShiTech.Config"
    "\032\025ConfigTypeGroup.proto\"w\n\014RebateConfig\022"
    "\014\n\004name\030\002 \001(\t\022\020\n\010icon_pic\030\004 \001(\005\022\n\n\002id\030\001 "
    "\001(\005\022\021\n\tgain_gold\030\006 \001(\005\022\024\n\014active_level\030\005"
    " \001(\005\022\022\n\ndesciption\030\003 \001(\t", 184);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RebateConfig.proto", &protobuf_RegisterTypes);
  RebateConfig::default_instance_ = new RebateConfig();
  RebateConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RebateConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RebateConfig_2eproto {
  StaticDescriptorInitializer_RebateConfig_2eproto() {
    protobuf_AddDesc_RebateConfig_2eproto();
  }
} static_descriptor_initializer_RebateConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RebateConfig::kNameFieldNumber;
const int RebateConfig::kIconPicFieldNumber;
const int RebateConfig::kIdFieldNumber;
const int RebateConfig::kGainGoldFieldNumber;
const int RebateConfig::kActiveLevelFieldNumber;
const int RebateConfig::kDesciptionFieldNumber;
#endif  // !_MSC_VER

RebateConfig::RebateConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RebateConfig::InitAsDefaultInstance() {
}

RebateConfig::RebateConfig(const RebateConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RebateConfig::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_pic_ = 0;
  id_ = 0;
  gain_gold_ = 0;
  active_level_ = 0;
  desciption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RebateConfig::~RebateConfig() {
  SharedDtor();
}

void RebateConfig::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desciption_ != &::google::protobuf::internal::kEmptyString) {
    delete desciption_;
  }
  if (this != default_instance_) {
  }
}

void RebateConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RebateConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RebateConfig_descriptor_;
}

const RebateConfig& RebateConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RebateConfig_2eproto();
  return *default_instance_;
}

RebateConfig* RebateConfig::default_instance_ = NULL;

RebateConfig* RebateConfig::New() const {
  return new RebateConfig;
}

void RebateConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    icon_pic_ = 0;
    id_ = 0;
    gain_gold_ = 0;
    active_level_ = 0;
    if (has_desciption()) {
      if (desciption_ != &::google::protobuf::internal::kEmptyString) {
        desciption_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RebateConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_desciption;
        break;
      }

      // optional string desciption = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desciption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desciption()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desciption().data(), this->desciption().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_icon_pic;
        break;
      }

      // optional int32 icon_pic = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon_pic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_pic_)));
          set_has_icon_pic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_active_level;
        break;
      }

      // optional int32 active_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_level_)));
          set_has_active_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gain_gold;
        break;
      }

      // optional int32 gain_gold = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gain_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gain_gold_)));
          set_has_gain_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RebateConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string desciption = 3;
  if (has_desciption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desciption().data(), this->desciption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->desciption(), output);
  }

  // optional int32 icon_pic = 4;
  if (has_icon_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->icon_pic(), output);
  }

  // optional int32 active_level = 5;
  if (has_active_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->active_level(), output);
  }

  // optional int32 gain_gold = 6;
  if (has_gain_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gain_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RebateConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string desciption = 3;
  if (has_desciption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desciption().data(), this->desciption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->desciption(), target);
  }

  // optional int32 icon_pic = 4;
  if (has_icon_pic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->icon_pic(), target);
  }

  // optional int32 active_level = 5;
  if (has_active_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->active_level(), target);
  }

  // optional int32 gain_gold = 6;
  if (has_gain_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gain_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RebateConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 icon_pic = 4;
    if (has_icon_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon_pic());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 gain_gold = 6;
    if (has_gain_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gain_gold());
    }

    // optional int32 active_level = 5;
    if (has_active_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_level());
    }

    // optional string desciption = 3;
    if (has_desciption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desciption());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RebateConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RebateConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RebateConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RebateConfig::MergeFrom(const RebateConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_icon_pic()) {
      set_icon_pic(from.icon_pic());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gain_gold()) {
      set_gain_gold(from.gain_gold());
    }
    if (from.has_active_level()) {
      set_active_level(from.active_level());
    }
    if (from.has_desciption()) {
      set_desciption(from.desciption());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RebateConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RebateConfig::CopyFrom(const RebateConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RebateConfig::IsInitialized() const {

  return true;
}

void RebateConfig::Swap(RebateConfig* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(icon_pic_, other->icon_pic_);
    std::swap(id_, other->id_);
    std::swap(gain_gold_, other->gain_gold_);
    std::swap(active_level_, other->active_level_);
    std::swap(desciption_, other->desciption_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RebateConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RebateConfig_descriptor_;
  metadata.reflection = RebateConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: store_itemConfig.proto

#ifndef PROTOBUF_store_5fitemConfig_2eproto__INCLUDED
#define PROTOBUF_store_5fitemConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_store_5fitemConfig_2eproto();
void protobuf_AssignDesc_store_5fitemConfig_2eproto();
void protobuf_ShutdownFile_store_5fitemConfig_2eproto();

class store_itemConfig;

// ===================================================================

class store_itemConfig : public ::google::protobuf::Message {
 public:
  store_itemConfig();
  virtual ~store_itemConfig();

  store_itemConfig(const store_itemConfig& from);

  inline store_itemConfig& operator=(const store_itemConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const store_itemConfig& default_instance();

  void Swap(store_itemConfig* other);

  // implements Message ----------------------------------------------

  store_itemConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const store_itemConfig& from);
  void MergeFrom(const store_itemConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 vip_buy_lv = 3;
  inline bool has_vip_buy_lv() const;
  inline void clear_vip_buy_lv();
  static const int kVipBuyLvFieldNumber = 3;
  inline ::google::protobuf::int32 vip_buy_lv() const;
  inline void set_vip_buy_lv(::google::protobuf::int32 value);

  // optional int32 vip_limit_add = 5;
  inline bool has_vip_limit_add() const;
  inline void clear_vip_limit_add();
  static const int kVipLimitAddFieldNumber = 5;
  inline ::google::protobuf::int32 vip_limit_add() const;
  inline void set_vip_limit_add(::google::protobuf::int32 value);

  // optional int32 show_currency_type = 11;
  inline bool has_show_currency_type() const;
  inline void clear_show_currency_type();
  static const int kShowCurrencyTypeFieldNumber = 11;
  inline ::google::protobuf::int32 show_currency_type() const;
  inline void set_show_currency_type(::google::protobuf::int32 value);

  // optional int32 vip_show_lv = 6;
  inline bool has_vip_show_lv() const;
  inline void clear_vip_show_lv();
  static const int kVipShowLvFieldNumber = 6;
  inline ::google::protobuf::int32 vip_show_lv() const;
  inline void set_vip_show_lv(::google::protobuf::int32 value);

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 weight = 15;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 15;
  inline ::google::protobuf::int32 weight() const;
  inline void set_weight(::google::protobuf::int32 value);

  // optional int32 buy_price = 12;
  inline bool has_buy_price() const;
  inline void clear_buy_price();
  static const int kBuyPriceFieldNumber = 12;
  inline ::google::protobuf::int32 buy_price() const;
  inline void set_buy_price(::google::protobuf::int32 value);

  // optional int32 add_cost = 14;
  inline bool has_add_cost() const;
  inline void clear_add_cost();
  static const int kAddCostFieldNumber = 14;
  inline ::google::protobuf::int32 add_cost() const;
  inline void set_add_cost(::google::protobuf::int32 value);

  // optional int32 buy_currency_type = 13;
  inline bool has_buy_currency_type() const;
  inline void clear_buy_currency_type();
  static const int kBuyCurrencyTypeFieldNumber = 13;
  inline ::google::protobuf::int32 buy_currency_type() const;
  inline void set_buy_currency_type(::google::protobuf::int32 value);

  // optional int32 show_price = 10;
  inline bool has_show_price() const;
  inline void clear_show_price();
  static const int kShowPriceFieldNumber = 10;
  inline ::google::protobuf::int32 show_price() const;
  inline void set_show_price(::google::protobuf::int32 value);

  // optional int32 drop = 9;
  inline bool has_drop() const;
  inline void clear_drop();
  static const int kDropFieldNumber = 9;
  inline ::google::protobuf::int32 drop() const;
  inline void set_drop(::google::protobuf::int32 value);

  // optional int32 min_level = 7;
  inline bool has_min_level() const;
  inline void clear_min_level();
  static const int kMinLevelFieldNumber = 7;
  inline ::google::protobuf::int32 min_level() const;
  inline void set_min_level(::google::protobuf::int32 value);

  // optional int32 buy_daily_limit = 4;
  inline bool has_buy_daily_limit() const;
  inline void clear_buy_daily_limit();
  static const int kBuyDailyLimitFieldNumber = 4;
  inline ::google::protobuf::int32 buy_daily_limit() const;
  inline void set_buy_daily_limit(::google::protobuf::int32 value);

  // optional int32 max_level = 8;
  inline bool has_max_level() const;
  inline void clear_max_level();
  static const int kMaxLevelFieldNumber = 8;
  inline ::google::protobuf::int32 max_level() const;
  inline void set_max_level(::google::protobuf::int32 value);

  // optional int32 store_type = 2;
  inline bool has_store_type() const;
  inline void clear_store_type();
  static const int kStoreTypeFieldNumber = 2;
  inline ::google::protobuf::int32 store_type() const;
  inline void set_store_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DianShiTech.Config.store_itemConfig)
 private:
  inline void set_has_vip_buy_lv();
  inline void clear_has_vip_buy_lv();
  inline void set_has_vip_limit_add();
  inline void clear_has_vip_limit_add();
  inline void set_has_show_currency_type();
  inline void clear_has_show_currency_type();
  inline void set_has_vip_show_lv();
  inline void clear_has_vip_show_lv();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_weight();
  inline void clear_has_weight();
  inline void set_has_buy_price();
  inline void clear_has_buy_price();
  inline void set_has_add_cost();
  inline void clear_has_add_cost();
  inline void set_has_buy_currency_type();
  inline void clear_has_buy_currency_type();
  inline void set_has_show_price();
  inline void clear_has_show_price();
  inline void set_has_drop();
  inline void clear_has_drop();
  inline void set_has_min_level();
  inline void clear_has_min_level();
  inline void set_has_buy_daily_limit();
  inline void clear_has_buy_daily_limit();
  inline void set_has_max_level();
  inline void clear_has_max_level();
  inline void set_has_store_type();
  inline void clear_has_store_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 vip_buy_lv_;
  ::google::protobuf::int32 vip_limit_add_;
  ::google::protobuf::int32 show_currency_type_;
  ::google::protobuf::int32 vip_show_lv_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 weight_;
  ::google::protobuf::int32 buy_price_;
  ::google::protobuf::int32 add_cost_;
  ::google::protobuf::int32 buy_currency_type_;
  ::google::protobuf::int32 show_price_;
  ::google::protobuf::int32 drop_;
  ::google::protobuf::int32 min_level_;
  ::google::protobuf::int32 buy_daily_limit_;
  ::google::protobuf::int32 max_level_;
  ::google::protobuf::int32 store_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_store_5fitemConfig_2eproto();
  friend void protobuf_AssignDesc_store_5fitemConfig_2eproto();
  friend void protobuf_ShutdownFile_store_5fitemConfig_2eproto();

  void InitAsDefaultInstance();
  static store_itemConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// store_itemConfig

// optional int32 vip_buy_lv = 3;
inline bool store_itemConfig::has_vip_buy_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void store_itemConfig::set_has_vip_buy_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void store_itemConfig::clear_has_vip_buy_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void store_itemConfig::clear_vip_buy_lv() {
  vip_buy_lv_ = 0;
  clear_has_vip_buy_lv();
}
inline ::google::protobuf::int32 store_itemConfig::vip_buy_lv() const {
  return vip_buy_lv_;
}
inline void store_itemConfig::set_vip_buy_lv(::google::protobuf::int32 value) {
  set_has_vip_buy_lv();
  vip_buy_lv_ = value;
}

// optional int32 vip_limit_add = 5;
inline bool store_itemConfig::has_vip_limit_add() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void store_itemConfig::set_has_vip_limit_add() {
  _has_bits_[0] |= 0x00000002u;
}
inline void store_itemConfig::clear_has_vip_limit_add() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void store_itemConfig::clear_vip_limit_add() {
  vip_limit_add_ = 0;
  clear_has_vip_limit_add();
}
inline ::google::protobuf::int32 store_itemConfig::vip_limit_add() const {
  return vip_limit_add_;
}
inline void store_itemConfig::set_vip_limit_add(::google::protobuf::int32 value) {
  set_has_vip_limit_add();
  vip_limit_add_ = value;
}

// optional int32 show_currency_type = 11;
inline bool store_itemConfig::has_show_currency_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void store_itemConfig::set_has_show_currency_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void store_itemConfig::clear_has_show_currency_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void store_itemConfig::clear_show_currency_type() {
  show_currency_type_ = 0;
  clear_has_show_currency_type();
}
inline ::google::protobuf::int32 store_itemConfig::show_currency_type() const {
  return show_currency_type_;
}
inline void store_itemConfig::set_show_currency_type(::google::protobuf::int32 value) {
  set_has_show_currency_type();
  show_currency_type_ = value;
}

// optional int32 vip_show_lv = 6;
inline bool store_itemConfig::has_vip_show_lv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void store_itemConfig::set_has_vip_show_lv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void store_itemConfig::clear_has_vip_show_lv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void store_itemConfig::clear_vip_show_lv() {
  vip_show_lv_ = 0;
  clear_has_vip_show_lv();
}
inline ::google::protobuf::int32 store_itemConfig::vip_show_lv() const {
  return vip_show_lv_;
}
inline void store_itemConfig::set_vip_show_lv(::google::protobuf::int32 value) {
  set_has_vip_show_lv();
  vip_show_lv_ = value;
}

// optional int32 id = 1;
inline bool store_itemConfig::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void store_itemConfig::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void store_itemConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void store_itemConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 store_itemConfig::id() const {
  return id_;
}
inline void store_itemConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 weight = 15;
inline bool store_itemConfig::has_weight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void store_itemConfig::set_has_weight() {
  _has_bits_[0] |= 0x00000020u;
}
inline void store_itemConfig::clear_has_weight() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void store_itemConfig::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline ::google::protobuf::int32 store_itemConfig::weight() const {
  return weight_;
}
inline void store_itemConfig::set_weight(::google::protobuf::int32 value) {
  set_has_weight();
  weight_ = value;
}

// optional int32 buy_price = 12;
inline bool store_itemConfig::has_buy_price() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void store_itemConfig::set_has_buy_price() {
  _has_bits_[0] |= 0x00000040u;
}
inline void store_itemConfig::clear_has_buy_price() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void store_itemConfig::clear_buy_price() {
  buy_price_ = 0;
  clear_has_buy_price();
}
inline ::google::protobuf::int32 store_itemConfig::buy_price() const {
  return buy_price_;
}
inline void store_itemConfig::set_buy_price(::google::protobuf::int32 value) {
  set_has_buy_price();
  buy_price_ = value;
}

// optional int32 add_cost = 14;
inline bool store_itemConfig::has_add_cost() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void store_itemConfig::set_has_add_cost() {
  _has_bits_[0] |= 0x00000080u;
}
inline void store_itemConfig::clear_has_add_cost() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void store_itemConfig::clear_add_cost() {
  add_cost_ = 0;
  clear_has_add_cost();
}
inline ::google::protobuf::int32 store_itemConfig::add_cost() const {
  return add_cost_;
}
inline void store_itemConfig::set_add_cost(::google::protobuf::int32 value) {
  set_has_add_cost();
  add_cost_ = value;
}

// optional int32 buy_currency_type = 13;
inline bool store_itemConfig::has_buy_currency_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void store_itemConfig::set_has_buy_currency_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void store_itemConfig::clear_has_buy_currency_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void store_itemConfig::clear_buy_currency_type() {
  buy_currency_type_ = 0;
  clear_has_buy_currency_type();
}
inline ::google::protobuf::int32 store_itemConfig::buy_currency_type() const {
  return buy_currency_type_;
}
inline void store_itemConfig::set_buy_currency_type(::google::protobuf::int32 value) {
  set_has_buy_currency_type();
  buy_currency_type_ = value;
}

// optional int32 show_price = 10;
inline bool store_itemConfig::has_show_price() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void store_itemConfig::set_has_show_price() {
  _has_bits_[0] |= 0x00000200u;
}
inline void store_itemConfig::clear_has_show_price() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void store_itemConfig::clear_show_price() {
  show_price_ = 0;
  clear_has_show_price();
}
inline ::google::protobuf::int32 store_itemConfig::show_price() const {
  return show_price_;
}
inline void store_itemConfig::set_show_price(::google::protobuf::int32 value) {
  set_has_show_price();
  show_price_ = value;
}

// optional int32 drop = 9;
inline bool store_itemConfig::has_drop() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void store_itemConfig::set_has_drop() {
  _has_bits_[0] |= 0x00000400u;
}
inline void store_itemConfig::clear_has_drop() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void store_itemConfig::clear_drop() {
  drop_ = 0;
  clear_has_drop();
}
inline ::google::protobuf::int32 store_itemConfig::drop() const {
  return drop_;
}
inline void store_itemConfig::set_drop(::google::protobuf::int32 value) {
  set_has_drop();
  drop_ = value;
}

// optional int32 min_level = 7;
inline bool store_itemConfig::has_min_level() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void store_itemConfig::set_has_min_level() {
  _has_bits_[0] |= 0x00000800u;
}
inline void store_itemConfig::clear_has_min_level() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void store_itemConfig::clear_min_level() {
  min_level_ = 0;
  clear_has_min_level();
}
inline ::google::protobuf::int32 store_itemConfig::min_level() const {
  return min_level_;
}
inline void store_itemConfig::set_min_level(::google::protobuf::int32 value) {
  set_has_min_level();
  min_level_ = value;
}

// optional int32 buy_daily_limit = 4;
inline bool store_itemConfig::has_buy_daily_limit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void store_itemConfig::set_has_buy_daily_limit() {
  _has_bits_[0] |= 0x00001000u;
}
inline void store_itemConfig::clear_has_buy_daily_limit() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void store_itemConfig::clear_buy_daily_limit() {
  buy_daily_limit_ = 0;
  clear_has_buy_daily_limit();
}
inline ::google::protobuf::int32 store_itemConfig::buy_daily_limit() const {
  return buy_daily_limit_;
}
inline void store_itemConfig::set_buy_daily_limit(::google::protobuf::int32 value) {
  set_has_buy_daily_limit();
  buy_daily_limit_ = value;
}

// optional int32 max_level = 8;
inline bool store_itemConfig::has_max_level() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void store_itemConfig::set_has_max_level() {
  _has_bits_[0] |= 0x00002000u;
}
inline void store_itemConfig::clear_has_max_level() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void store_itemConfig::clear_max_level() {
  max_level_ = 0;
  clear_has_max_level();
}
inline ::google::protobuf::int32 store_itemConfig::max_level() const {
  return max_level_;
}
inline void store_itemConfig::set_max_level(::google::protobuf::int32 value) {
  set_has_max_level();
  max_level_ = value;
}

// optional int32 store_type = 2;
inline bool store_itemConfig::has_store_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void store_itemConfig::set_has_store_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void store_itemConfig::clear_has_store_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void store_itemConfig::clear_store_type() {
  store_type_ = 0;
  clear_has_store_type();
}
inline ::google::protobuf::int32 store_itemConfig::store_type() const {
  return store_type_;
}
inline void store_itemConfig::set_store_type(::google::protobuf::int32 value) {
  set_has_store_type();
  store_type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_store_5fitemConfig_2eproto__INCLUDED

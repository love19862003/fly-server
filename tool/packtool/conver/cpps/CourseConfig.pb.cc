// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CourseConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CourseConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* CourseConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CourseConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CourseConfig_2eproto() {
  protobuf_AddDesc_CourseConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CourseConfig.proto");
  GOOGLE_CHECK(file != NULL);
  CourseConfig_descriptor_ = file->message_type(0);
  static const int CourseConfig_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CourseConfig, newsystem_jump_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CourseConfig, range_pos_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CourseConfig, is_weak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CourseConfig, skip_ui_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CourseConfig, newsystem_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CourseConfig, newsystem_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CourseConfig, global_range_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CourseConfig, newsystem_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CourseConfig, touch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CourseConfig, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CourseConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CourseConfig, range_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CourseConfig, ui_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CourseConfig, frame_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CourseConfig, desciption2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CourseConfig, desciption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CourseConfig, component_id_),
  };
  CourseConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CourseConfig_descriptor_,
      CourseConfig::default_instance_,
      CourseConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CourseConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CourseConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CourseConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CourseConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CourseConfig_descriptor_, &CourseConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CourseConfig_2eproto() {
  delete CourseConfig::default_instance_;
  delete CourseConfig_reflection_;
}

void protobuf_AddDesc_CourseConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022CourseConfig.proto\022\022DianShiTech.Config"
    "\032\025ConfigTypeGroup.proto\"\355\002\n\014CourseConfig"
    "\022\026\n\016newsystem_jump\030\022 \001(\005\022\030\n\020range_pos_of"
    "fset\030\t \003(\005\022\017\n\007is_weak\030\003 \001(\005\022\022\n\nskip_ui_i"
    "d\030\004 \001(\005\022\027\n\017newsystem_title\030\020 \001(\t\022\026\n\016news"
    "ystem_text\030\021 \001(\t\022\027\n\017global_range_id\030\n \001("
    "\005\022\026\n\016newsystem_icon\030\017 \001(\005\022\022\n\ntouch_size\030"
    "\010 \003(\005\022\016\n\006effect\030\005 \001(\005\022\n\n\002id\030\001 \001(\005\022\022\n\nran"
    "ge_type\030\006 \001(\005\022\r\n\005ui_id\030\002 \003(\005\022\022\n\nframe_ty"
    "pe\030\016 \001(\005\022\023\n\013desciption2\030\014 \001(\t\022\022\n\ndescipt"
    "ion\030\013 \001(\t\022\024\n\014component_id\030\007 \001(\005", 431);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CourseConfig.proto", &protobuf_RegisterTypes);
  CourseConfig::default_instance_ = new CourseConfig();
  CourseConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CourseConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CourseConfig_2eproto {
  StaticDescriptorInitializer_CourseConfig_2eproto() {
    protobuf_AddDesc_CourseConfig_2eproto();
  }
} static_descriptor_initializer_CourseConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CourseConfig::kNewsystemJumpFieldNumber;
const int CourseConfig::kRangePosOffsetFieldNumber;
const int CourseConfig::kIsWeakFieldNumber;
const int CourseConfig::kSkipUiIdFieldNumber;
const int CourseConfig::kNewsystemTitleFieldNumber;
const int CourseConfig::kNewsystemTextFieldNumber;
const int CourseConfig::kGlobalRangeIdFieldNumber;
const int CourseConfig::kNewsystemIconFieldNumber;
const int CourseConfig::kTouchSizeFieldNumber;
const int CourseConfig::kEffectFieldNumber;
const int CourseConfig::kIdFieldNumber;
const int CourseConfig::kRangeTypeFieldNumber;
const int CourseConfig::kUiIdFieldNumber;
const int CourseConfig::kFrameTypeFieldNumber;
const int CourseConfig::kDesciption2FieldNumber;
const int CourseConfig::kDesciptionFieldNumber;
const int CourseConfig::kComponentIdFieldNumber;
#endif  // !_MSC_VER

CourseConfig::CourseConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CourseConfig::InitAsDefaultInstance() {
}

CourseConfig::CourseConfig(const CourseConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CourseConfig::SharedCtor() {
  _cached_size_ = 0;
  newsystem_jump_ = 0;
  is_weak_ = 0;
  skip_ui_id_ = 0;
  newsystem_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  newsystem_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  global_range_id_ = 0;
  newsystem_icon_ = 0;
  effect_ = 0;
  id_ = 0;
  range_type_ = 0;
  frame_type_ = 0;
  desciption2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desciption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  component_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CourseConfig::~CourseConfig() {
  SharedDtor();
}

void CourseConfig::SharedDtor() {
  if (newsystem_title_ != &::google::protobuf::internal::kEmptyString) {
    delete newsystem_title_;
  }
  if (newsystem_text_ != &::google::protobuf::internal::kEmptyString) {
    delete newsystem_text_;
  }
  if (desciption2_ != &::google::protobuf::internal::kEmptyString) {
    delete desciption2_;
  }
  if (desciption_ != &::google::protobuf::internal::kEmptyString) {
    delete desciption_;
  }
  if (this != default_instance_) {
  }
}

void CourseConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CourseConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CourseConfig_descriptor_;
}

const CourseConfig& CourseConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CourseConfig_2eproto();
  return *default_instance_;
}

CourseConfig* CourseConfig::default_instance_ = NULL;

CourseConfig* CourseConfig::New() const {
  return new CourseConfig;
}

void CourseConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    newsystem_jump_ = 0;
    is_weak_ = 0;
    skip_ui_id_ = 0;
    if (has_newsystem_title()) {
      if (newsystem_title_ != &::google::protobuf::internal::kEmptyString) {
        newsystem_title_->clear();
      }
    }
    if (has_newsystem_text()) {
      if (newsystem_text_ != &::google::protobuf::internal::kEmptyString) {
        newsystem_text_->clear();
      }
    }
    global_range_id_ = 0;
    newsystem_icon_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    effect_ = 0;
    id_ = 0;
    range_type_ = 0;
    frame_type_ = 0;
    if (has_desciption2()) {
      if (desciption2_ != &::google::protobuf::internal::kEmptyString) {
        desciption2_->clear();
      }
    }
    if (has_desciption()) {
      if (desciption_ != &::google::protobuf::internal::kEmptyString) {
        desciption_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    component_id_ = 0;
  }
  range_pos_offset_.Clear();
  touch_size_.Clear();
  ui_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CourseConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ui_id;
        break;
      }

      // repeated int32 ui_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ui_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_ui_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ui_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ui_id;
        if (input->ExpectTag(24)) goto parse_is_weak;
        break;
      }

      // optional int32 is_weak = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_weak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_weak_)));
          set_has_is_weak();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skip_ui_id;
        break;
      }

      // optional int32 skip_ui_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skip_ui_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skip_ui_id_)));
          set_has_skip_ui_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_effect;
        break;
      }

      // optional int32 effect = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_)));
          set_has_effect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_range_type;
        break;
      }

      // optional int32 range_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_range_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_type_)));
          set_has_range_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_component_id;
        break;
      }

      // optional int32 component_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_component_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &component_id_)));
          set_has_component_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_touch_size;
        break;
      }

      // repeated int32 touch_size = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_touch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_touch_size())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_touch_size())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_touch_size;
        if (input->ExpectTag(72)) goto parse_range_pos_offset;
        break;
      }

      // repeated int32 range_pos_offset = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_range_pos_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_range_pos_offset())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_range_pos_offset())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_range_pos_offset;
        if (input->ExpectTag(80)) goto parse_global_range_id;
        break;
      }

      // optional int32 global_range_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_global_range_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &global_range_id_)));
          set_has_global_range_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_desciption;
        break;
      }

      // optional string desciption = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desciption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desciption()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desciption().data(), this->desciption().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_desciption2;
        break;
      }

      // optional string desciption2 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desciption2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desciption2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desciption2().data(), this->desciption2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_frame_type;
        break;
      }

      // optional int32 frame_type = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frame_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_type_)));
          set_has_frame_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_newsystem_icon;
        break;
      }

      // optional int32 newsystem_icon = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newsystem_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newsystem_icon_)));
          set_has_newsystem_icon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_newsystem_title;
        break;
      }

      // optional string newsystem_title = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newsystem_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newsystem_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newsystem_title().data(), this->newsystem_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_newsystem_text;
        break;
      }

      // optional string newsystem_text = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newsystem_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newsystem_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newsystem_text().data(), this->newsystem_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_newsystem_jump;
        break;
      }

      // optional int32 newsystem_jump = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newsystem_jump:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newsystem_jump_)));
          set_has_newsystem_jump();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CourseConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated int32 ui_id = 2;
  for (int i = 0; i < this->ui_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->ui_id(i), output);
  }

  // optional int32 is_weak = 3;
  if (has_is_weak()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_weak(), output);
  }

  // optional int32 skip_ui_id = 4;
  if (has_skip_ui_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skip_ui_id(), output);
  }

  // optional int32 effect = 5;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->effect(), output);
  }

  // optional int32 range_type = 6;
  if (has_range_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->range_type(), output);
  }

  // optional int32 component_id = 7;
  if (has_component_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->component_id(), output);
  }

  // repeated int32 touch_size = 8;
  for (int i = 0; i < this->touch_size_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->touch_size(i), output);
  }

  // repeated int32 range_pos_offset = 9;
  for (int i = 0; i < this->range_pos_offset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->range_pos_offset(i), output);
  }

  // optional int32 global_range_id = 10;
  if (has_global_range_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->global_range_id(), output);
  }

  // optional string desciption = 11;
  if (has_desciption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desciption().data(), this->desciption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->desciption(), output);
  }

  // optional string desciption2 = 12;
  if (has_desciption2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desciption2().data(), this->desciption2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->desciption2(), output);
  }

  // optional int32 frame_type = 14;
  if (has_frame_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->frame_type(), output);
  }

  // optional int32 newsystem_icon = 15;
  if (has_newsystem_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->newsystem_icon(), output);
  }

  // optional string newsystem_title = 16;
  if (has_newsystem_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newsystem_title().data(), this->newsystem_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->newsystem_title(), output);
  }

  // optional string newsystem_text = 17;
  if (has_newsystem_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newsystem_text().data(), this->newsystem_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->newsystem_text(), output);
  }

  // optional int32 newsystem_jump = 18;
  if (has_newsystem_jump()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->newsystem_jump(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CourseConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated int32 ui_id = 2;
  for (int i = 0; i < this->ui_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->ui_id(i), target);
  }

  // optional int32 is_weak = 3;
  if (has_is_weak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_weak(), target);
  }

  // optional int32 skip_ui_id = 4;
  if (has_skip_ui_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skip_ui_id(), target);
  }

  // optional int32 effect = 5;
  if (has_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->effect(), target);
  }

  // optional int32 range_type = 6;
  if (has_range_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->range_type(), target);
  }

  // optional int32 component_id = 7;
  if (has_component_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->component_id(), target);
  }

  // repeated int32 touch_size = 8;
  for (int i = 0; i < this->touch_size_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->touch_size(i), target);
  }

  // repeated int32 range_pos_offset = 9;
  for (int i = 0; i < this->range_pos_offset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->range_pos_offset(i), target);
  }

  // optional int32 global_range_id = 10;
  if (has_global_range_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->global_range_id(), target);
  }

  // optional string desciption = 11;
  if (has_desciption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desciption().data(), this->desciption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->desciption(), target);
  }

  // optional string desciption2 = 12;
  if (has_desciption2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desciption2().data(), this->desciption2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->desciption2(), target);
  }

  // optional int32 frame_type = 14;
  if (has_frame_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->frame_type(), target);
  }

  // optional int32 newsystem_icon = 15;
  if (has_newsystem_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->newsystem_icon(), target);
  }

  // optional string newsystem_title = 16;
  if (has_newsystem_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newsystem_title().data(), this->newsystem_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->newsystem_title(), target);
  }

  // optional string newsystem_text = 17;
  if (has_newsystem_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newsystem_text().data(), this->newsystem_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->newsystem_text(), target);
  }

  // optional int32 newsystem_jump = 18;
  if (has_newsystem_jump()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->newsystem_jump(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CourseConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 newsystem_jump = 18;
    if (has_newsystem_jump()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newsystem_jump());
    }

    // optional int32 is_weak = 3;
    if (has_is_weak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_weak());
    }

    // optional int32 skip_ui_id = 4;
    if (has_skip_ui_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skip_ui_id());
    }

    // optional string newsystem_title = 16;
    if (has_newsystem_title()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newsystem_title());
    }

    // optional string newsystem_text = 17;
    if (has_newsystem_text()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newsystem_text());
    }

    // optional int32 global_range_id = 10;
    if (has_global_range_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->global_range_id());
    }

    // optional int32 newsystem_icon = 15;
    if (has_newsystem_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newsystem_icon());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 effect = 5;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effect());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 range_type = 6;
    if (has_range_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range_type());
    }

    // optional int32 frame_type = 14;
    if (has_frame_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frame_type());
    }

    // optional string desciption2 = 12;
    if (has_desciption2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desciption2());
    }

    // optional string desciption = 11;
    if (has_desciption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desciption());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 component_id = 7;
    if (has_component_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->component_id());
    }

  }
  // repeated int32 range_pos_offset = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->range_pos_offset_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->range_pos_offset(i));
    }
    total_size += 1 * this->range_pos_offset_size() + data_size;
  }

  // repeated int32 touch_size = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->touch_size_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->touch_size(i));
    }
    total_size += 1 * this->touch_size_size() + data_size;
  }

  // repeated int32 ui_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->ui_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ui_id(i));
    }
    total_size += 1 * this->ui_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CourseConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CourseConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CourseConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CourseConfig::MergeFrom(const CourseConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  range_pos_offset_.MergeFrom(from.range_pos_offset_);
  touch_size_.MergeFrom(from.touch_size_);
  ui_id_.MergeFrom(from.ui_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newsystem_jump()) {
      set_newsystem_jump(from.newsystem_jump());
    }
    if (from.has_is_weak()) {
      set_is_weak(from.is_weak());
    }
    if (from.has_skip_ui_id()) {
      set_skip_ui_id(from.skip_ui_id());
    }
    if (from.has_newsystem_title()) {
      set_newsystem_title(from.newsystem_title());
    }
    if (from.has_newsystem_text()) {
      set_newsystem_text(from.newsystem_text());
    }
    if (from.has_global_range_id()) {
      set_global_range_id(from.global_range_id());
    }
    if (from.has_newsystem_icon()) {
      set_newsystem_icon(from.newsystem_icon());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_effect()) {
      set_effect(from.effect());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_range_type()) {
      set_range_type(from.range_type());
    }
    if (from.has_frame_type()) {
      set_frame_type(from.frame_type());
    }
    if (from.has_desciption2()) {
      set_desciption2(from.desciption2());
    }
    if (from.has_desciption()) {
      set_desciption(from.desciption());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_component_id()) {
      set_component_id(from.component_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CourseConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CourseConfig::CopyFrom(const CourseConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CourseConfig::IsInitialized() const {

  return true;
}

void CourseConfig::Swap(CourseConfig* other) {
  if (other != this) {
    std::swap(newsystem_jump_, other->newsystem_jump_);
    range_pos_offset_.Swap(&other->range_pos_offset_);
    std::swap(is_weak_, other->is_weak_);
    std::swap(skip_ui_id_, other->skip_ui_id_);
    std::swap(newsystem_title_, other->newsystem_title_);
    std::swap(newsystem_text_, other->newsystem_text_);
    std::swap(global_range_id_, other->global_range_id_);
    std::swap(newsystem_icon_, other->newsystem_icon_);
    touch_size_.Swap(&other->touch_size_);
    std::swap(effect_, other->effect_);
    std::swap(id_, other->id_);
    std::swap(range_type_, other->range_type_);
    ui_id_.Swap(&other->ui_id_);
    std::swap(frame_type_, other->frame_type_);
    std::swap(desciption2_, other->desciption2_);
    std::swap(desciption_, other->desciption_);
    std::swap(component_id_, other->component_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CourseConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CourseConfig_descriptor_;
  metadata.reflection = CourseConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

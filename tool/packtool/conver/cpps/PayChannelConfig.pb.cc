// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PayChannelConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PayChannelConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* PayChannelConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayChannelConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PayChannelConfig_2eproto() {
  protobuf_AddDesc_PayChannelConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PayChannelConfig.proto");
  GOOGLE_CHECK(file != NULL);
  PayChannelConfig_descriptor_ = file->message_type(0);
  static const int PayChannelConfig_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayChannelConfig, erpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayChannelConfig, service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayChannelConfig, cuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayChannelConfig, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayChannelConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayChannelConfig, array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayChannelConfig, channel_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayChannelConfig, area_),
  };
  PayChannelConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayChannelConfig_descriptor_,
      PayChannelConfig::default_instance_,
      PayChannelConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayChannelConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayChannelConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayChannelConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PayChannelConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayChannelConfig_descriptor_, &PayChannelConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PayChannelConfig_2eproto() {
  delete PayChannelConfig::default_instance_;
  delete PayChannelConfig_reflection_;
}

void protobuf_AddDesc_PayChannelConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026PayChannelConfig.proto\022\022DianShiTech.Co"
    "nfig\032\025ConfigTypeGroup.proto\"\220\001\n\020PayChann"
    "elConfig\022\r\n\005erpid\030\010 \001(\t\022\017\n\007service\030\007 \001(\t"
    "\022\014\n\004cuid\030\006 \001(\t\022\017\n\007channel\030\002 \001(\t\022\n\n\002id\030\001 "
    "\001(\005\022\r\n\005array\030\005 \001(\t\022\024\n\014channel_name\030\004 \001(\t"
    "\022\014\n\004area\030\003 \001(\t", 214);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PayChannelConfig.proto", &protobuf_RegisterTypes);
  PayChannelConfig::default_instance_ = new PayChannelConfig();
  PayChannelConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PayChannelConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PayChannelConfig_2eproto {
  StaticDescriptorInitializer_PayChannelConfig_2eproto() {
    protobuf_AddDesc_PayChannelConfig_2eproto();
  }
} static_descriptor_initializer_PayChannelConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PayChannelConfig::kErpidFieldNumber;
const int PayChannelConfig::kServiceFieldNumber;
const int PayChannelConfig::kCuidFieldNumber;
const int PayChannelConfig::kChannelFieldNumber;
const int PayChannelConfig::kIdFieldNumber;
const int PayChannelConfig::kArrayFieldNumber;
const int PayChannelConfig::kChannelNameFieldNumber;
const int PayChannelConfig::kAreaFieldNumber;
#endif  // !_MSC_VER

PayChannelConfig::PayChannelConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PayChannelConfig::InitAsDefaultInstance() {
}

PayChannelConfig::PayChannelConfig(const PayChannelConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PayChannelConfig::SharedCtor() {
  _cached_size_ = 0;
  erpid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  service_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  array_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  area_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayChannelConfig::~PayChannelConfig() {
  SharedDtor();
}

void PayChannelConfig::SharedDtor() {
  if (erpid_ != &::google::protobuf::internal::kEmptyString) {
    delete erpid_;
  }
  if (service_ != &::google::protobuf::internal::kEmptyString) {
    delete service_;
  }
  if (cuid_ != &::google::protobuf::internal::kEmptyString) {
    delete cuid_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (array_ != &::google::protobuf::internal::kEmptyString) {
    delete array_;
  }
  if (channel_name_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_name_;
  }
  if (area_ != &::google::protobuf::internal::kEmptyString) {
    delete area_;
  }
  if (this != default_instance_) {
  }
}

void PayChannelConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayChannelConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayChannelConfig_descriptor_;
}

const PayChannelConfig& PayChannelConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PayChannelConfig_2eproto();
  return *default_instance_;
}

PayChannelConfig* PayChannelConfig::default_instance_ = NULL;

PayChannelConfig* PayChannelConfig::New() const {
  return new PayChannelConfig;
}

void PayChannelConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_erpid()) {
      if (erpid_ != &::google::protobuf::internal::kEmptyString) {
        erpid_->clear();
      }
    }
    if (has_service()) {
      if (service_ != &::google::protobuf::internal::kEmptyString) {
        service_->clear();
      }
    }
    if (has_cuid()) {
      if (cuid_ != &::google::protobuf::internal::kEmptyString) {
        cuid_->clear();
      }
    }
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
    id_ = 0;
    if (has_array()) {
      if (array_ != &::google::protobuf::internal::kEmptyString) {
        array_->clear();
      }
    }
    if (has_channel_name()) {
      if (channel_name_ != &::google::protobuf::internal::kEmptyString) {
        channel_name_->clear();
      }
    }
    if (has_area()) {
      if (area_ != &::google::protobuf::internal::kEmptyString) {
        area_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayChannelConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_channel;
        break;
      }

      // optional string channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_area;
        break;
      }

      // optional string area = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_area()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->area().data(), this->area().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_channel_name;
        break;
      }

      // optional string channel_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_name().data(), this->channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_array;
        break;
      }

      // optional string array = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_array:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_array()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->array().data(), this->array().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cuid;
        break;
      }

      // optional string cuid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cuid().data(), this->cuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_service;
        break;
      }

      // optional string service = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service().data(), this->service().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_erpid;
        break;
      }

      // optional string erpid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_erpid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_erpid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->erpid().data(), this->erpid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PayChannelConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->channel(), output);
  }

  // optional string area = 3;
  if (has_area()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->area().data(), this->area().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->area(), output);
  }

  // optional string channel_name = 4;
  if (has_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->channel_name(), output);
  }

  // optional string array = 5;
  if (has_array()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->array().data(), this->array().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->array(), output);
  }

  // optional string cuid = 6;
  if (has_cuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cuid().data(), this->cuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->cuid(), output);
  }

  // optional string service = 7;
  if (has_service()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->service(), output);
  }

  // optional string erpid = 8;
  if (has_erpid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->erpid().data(), this->erpid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->erpid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PayChannelConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel(), target);
  }

  // optional string area = 3;
  if (has_area()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->area().data(), this->area().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->area(), target);
  }

  // optional string channel_name = 4;
  if (has_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->channel_name(), target);
  }

  // optional string array = 5;
  if (has_array()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->array().data(), this->array().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->array(), target);
  }

  // optional string cuid = 6;
  if (has_cuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cuid().data(), this->cuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->cuid(), target);
  }

  // optional string service = 7;
  if (has_service()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->service(), target);
  }

  // optional string erpid = 8;
  if (has_erpid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->erpid().data(), this->erpid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->erpid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PayChannelConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string erpid = 8;
    if (has_erpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->erpid());
    }

    // optional string service = 7;
    if (has_service()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service());
    }

    // optional string cuid = 6;
    if (has_cuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cuid());
    }

    // optional string channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string array = 5;
    if (has_array()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->array());
    }

    // optional string channel_name = 4;
    if (has_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_name());
    }

    // optional string area = 3;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->area());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayChannelConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayChannelConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayChannelConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayChannelConfig::MergeFrom(const PayChannelConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_erpid()) {
      set_erpid(from.erpid());
    }
    if (from.has_service()) {
      set_service(from.service());
    }
    if (from.has_cuid()) {
      set_cuid(from.cuid());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_array()) {
      set_array(from.array());
    }
    if (from.has_channel_name()) {
      set_channel_name(from.channel_name());
    }
    if (from.has_area()) {
      set_area(from.area());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayChannelConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayChannelConfig::CopyFrom(const PayChannelConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayChannelConfig::IsInitialized() const {

  return true;
}

void PayChannelConfig::Swap(PayChannelConfig* other) {
  if (other != this) {
    std::swap(erpid_, other->erpid_);
    std::swap(service_, other->service_);
    std::swap(cuid_, other->cuid_);
    std::swap(channel_, other->channel_);
    std::swap(id_, other->id_);
    std::swap(array_, other->array_);
    std::swap(channel_name_, other->channel_name_);
    std::swap(area_, other->area_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayChannelConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayChannelConfig_descriptor_;
  metadata.reflection = PayChannelConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

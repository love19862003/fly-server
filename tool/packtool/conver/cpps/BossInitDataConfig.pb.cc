// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BossInitDataConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BossInitDataConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* BossInitDataConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossInitDataConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BossInitDataConfig_2eproto() {
  protobuf_AddDesc_BossInitDataConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BossInitDataConfig.proto");
  GOOGLE_CHECK(file != NULL);
  BossInitDataConfig_descriptor_ = file->message_type(0);
  static const int BossInitDataConfig_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInitDataConfig, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInitDataConfig, open_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInitDataConfig, close_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInitDataConfig, max_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInitDataConfig, common_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInitDataConfig, week_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInitDataConfig, revive_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInitDataConfig, open_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInitDataConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInitDataConfig, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInitDataConfig, boss_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInitDataConfig, close_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInitDataConfig, head_pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInitDataConfig, event_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInitDataConfig, atk_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInitDataConfig, unit_pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInitDataConfig, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInitDataConfig, min_player_),
  };
  BossInitDataConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossInitDataConfig_descriptor_,
      BossInitDataConfig::default_instance_,
      BossInitDataConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInitDataConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInitDataConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossInitDataConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BossInitDataConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossInitDataConfig_descriptor_, &BossInitDataConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BossInitDataConfig_2eproto() {
  delete BossInitDataConfig::default_instance_;
  delete BossInitDataConfig_reflection_;
}

void protobuf_AddDesc_BossInitDataConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030BossInitDataConfig.proto\022\022DianShiTech."
    "Config\032\025ConfigTypeGroup.proto\"\336\002\n\022BossIn"
    "itDataConfig\022\r\n\005skill\030\004 \001(\005\022\021\n\topen_date"
    "\030\r \001(\005\022\022\n\nclose_time\030\021 \001(\005\022\022\n\nmax_player"
    "\030\007 \001(\005\022\024\n\014common_skill\030\003 \001(\005\022\021\n\tweek_dat"
    "e\030\017 \003(\005\022\023\n\013revive_time\030\005 \001(\005\022\021\n\topen_tim"
    "e\030\020 \001(\005\022\n\n\002id\030\001 \001(\005\022\r\n\005level\030\022 \001(\005\022\021\n\tbo"
    "ss_name\030\014 \001(\005\022\022\n\nclose_date\030\016 \001(\005\022\020\n\010hea"
    "d_pic\030\n \001(\005\022\022\n\nevent_name\030\t \001(\t\022\020\n\010atk_t"
    "ime\030\006 \001(\005\022\020\n\010unit_pic\030\013 \001(\005\022\r\n\005stage\030\002 \001"
    "(\005\022\022\n\nmin_player\030\010 \001(\005", 422);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BossInitDataConfig.proto", &protobuf_RegisterTypes);
  BossInitDataConfig::default_instance_ = new BossInitDataConfig();
  BossInitDataConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BossInitDataConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BossInitDataConfig_2eproto {
  StaticDescriptorInitializer_BossInitDataConfig_2eproto() {
    protobuf_AddDesc_BossInitDataConfig_2eproto();
  }
} static_descriptor_initializer_BossInitDataConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BossInitDataConfig::kSkillFieldNumber;
const int BossInitDataConfig::kOpenDateFieldNumber;
const int BossInitDataConfig::kCloseTimeFieldNumber;
const int BossInitDataConfig::kMaxPlayerFieldNumber;
const int BossInitDataConfig::kCommonSkillFieldNumber;
const int BossInitDataConfig::kWeekDateFieldNumber;
const int BossInitDataConfig::kReviveTimeFieldNumber;
const int BossInitDataConfig::kOpenTimeFieldNumber;
const int BossInitDataConfig::kIdFieldNumber;
const int BossInitDataConfig::kLevelFieldNumber;
const int BossInitDataConfig::kBossNameFieldNumber;
const int BossInitDataConfig::kCloseDateFieldNumber;
const int BossInitDataConfig::kHeadPicFieldNumber;
const int BossInitDataConfig::kEventNameFieldNumber;
const int BossInitDataConfig::kAtkTimeFieldNumber;
const int BossInitDataConfig::kUnitPicFieldNumber;
const int BossInitDataConfig::kStageFieldNumber;
const int BossInitDataConfig::kMinPlayerFieldNumber;
#endif  // !_MSC_VER

BossInitDataConfig::BossInitDataConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossInitDataConfig::InitAsDefaultInstance() {
}

BossInitDataConfig::BossInitDataConfig(const BossInitDataConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossInitDataConfig::SharedCtor() {
  _cached_size_ = 0;
  skill_ = 0;
  open_date_ = 0;
  close_time_ = 0;
  max_player_ = 0;
  common_skill_ = 0;
  revive_time_ = 0;
  open_time_ = 0;
  id_ = 0;
  level_ = 0;
  boss_name_ = 0;
  close_date_ = 0;
  head_pic_ = 0;
  event_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  atk_time_ = 0;
  unit_pic_ = 0;
  stage_ = 0;
  min_player_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossInitDataConfig::~BossInitDataConfig() {
  SharedDtor();
}

void BossInitDataConfig::SharedDtor() {
  if (event_name_ != &::google::protobuf::internal::kEmptyString) {
    delete event_name_;
  }
  if (this != default_instance_) {
  }
}

void BossInitDataConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossInitDataConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossInitDataConfig_descriptor_;
}

const BossInitDataConfig& BossInitDataConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BossInitDataConfig_2eproto();
  return *default_instance_;
}

BossInitDataConfig* BossInitDataConfig::default_instance_ = NULL;

BossInitDataConfig* BossInitDataConfig::New() const {
  return new BossInitDataConfig;
}

void BossInitDataConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_ = 0;
    open_date_ = 0;
    close_time_ = 0;
    max_player_ = 0;
    common_skill_ = 0;
    revive_time_ = 0;
    open_time_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    id_ = 0;
    level_ = 0;
    boss_name_ = 0;
    close_date_ = 0;
    head_pic_ = 0;
    if (has_event_name()) {
      if (event_name_ != &::google::protobuf::internal::kEmptyString) {
        event_name_->clear();
      }
    }
    atk_time_ = 0;
    unit_pic_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    stage_ = 0;
    min_player_ = 0;
  }
  week_date_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossInitDataConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stage;
        break;
      }

      // optional int32 stage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_common_skill;
        break;
      }

      // optional int32 common_skill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_common_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &common_skill_)));
          set_has_common_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skill;
        break;
      }

      // optional int32 skill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_)));
          set_has_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_revive_time;
        break;
      }

      // optional int32 revive_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_revive_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &revive_time_)));
          set_has_revive_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_atk_time;
        break;
      }

      // optional int32 atk_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atk_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atk_time_)));
          set_has_atk_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_max_player;
        break;
      }

      // optional int32 max_player = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_player_)));
          set_has_max_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_min_player;
        break;
      }

      // optional int32 min_player = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_player_)));
          set_has_min_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_event_name;
        break;
      }

      // optional string event_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_name().data(), this->event_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_head_pic;
        break;
      }

      // optional int32 head_pic = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_pic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_pic_)));
          set_has_head_pic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_unit_pic;
        break;
      }

      // optional int32 unit_pic = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit_pic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unit_pic_)));
          set_has_unit_pic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_boss_name;
        break;
      }

      // optional int32 boss_name = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_name_)));
          set_has_boss_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_open_date;
        break;
      }

      // optional int32 open_date = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_date_)));
          set_has_open_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_close_date;
        break;
      }

      // optional int32 close_date = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_close_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &close_date_)));
          set_has_close_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_week_date;
        break;
      }

      // repeated int32 week_date = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_week_date())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_week_date())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_week_date;
        if (input->ExpectTag(128)) goto parse_open_time;
        break;
      }

      // optional int32 open_time = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_time_)));
          set_has_open_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_close_time;
        break;
      }

      // optional int32 close_time = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_close_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &close_time_)));
          set_has_close_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_level;
        break;
      }

      // optional int32 level = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossInitDataConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 stage = 2;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stage(), output);
  }

  // optional int32 common_skill = 3;
  if (has_common_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->common_skill(), output);
  }

  // optional int32 skill = 4;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skill(), output);
  }

  // optional int32 revive_time = 5;
  if (has_revive_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->revive_time(), output);
  }

  // optional int32 atk_time = 6;
  if (has_atk_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->atk_time(), output);
  }

  // optional int32 max_player = 7;
  if (has_max_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->max_player(), output);
  }

  // optional int32 min_player = 8;
  if (has_min_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->min_player(), output);
  }

  // optional string event_name = 9;
  if (has_event_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->event_name(), output);
  }

  // optional int32 head_pic = 10;
  if (has_head_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->head_pic(), output);
  }

  // optional int32 unit_pic = 11;
  if (has_unit_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->unit_pic(), output);
  }

  // optional int32 boss_name = 12;
  if (has_boss_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->boss_name(), output);
  }

  // optional int32 open_date = 13;
  if (has_open_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->open_date(), output);
  }

  // optional int32 close_date = 14;
  if (has_close_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->close_date(), output);
  }

  // repeated int32 week_date = 15;
  for (int i = 0; i < this->week_date_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->week_date(i), output);
  }

  // optional int32 open_time = 16;
  if (has_open_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->open_time(), output);
  }

  // optional int32 close_time = 17;
  if (has_close_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->close_time(), output);
  }

  // optional int32 level = 18;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossInitDataConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 stage = 2;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stage(), target);
  }

  // optional int32 common_skill = 3;
  if (has_common_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->common_skill(), target);
  }

  // optional int32 skill = 4;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skill(), target);
  }

  // optional int32 revive_time = 5;
  if (has_revive_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->revive_time(), target);
  }

  // optional int32 atk_time = 6;
  if (has_atk_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->atk_time(), target);
  }

  // optional int32 max_player = 7;
  if (has_max_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->max_player(), target);
  }

  // optional int32 min_player = 8;
  if (has_min_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->min_player(), target);
  }

  // optional string event_name = 9;
  if (has_event_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->event_name(), target);
  }

  // optional int32 head_pic = 10;
  if (has_head_pic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->head_pic(), target);
  }

  // optional int32 unit_pic = 11;
  if (has_unit_pic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->unit_pic(), target);
  }

  // optional int32 boss_name = 12;
  if (has_boss_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->boss_name(), target);
  }

  // optional int32 open_date = 13;
  if (has_open_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->open_date(), target);
  }

  // optional int32 close_date = 14;
  if (has_close_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->close_date(), target);
  }

  // repeated int32 week_date = 15;
  for (int i = 0; i < this->week_date_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->week_date(i), target);
  }

  // optional int32 open_time = 16;
  if (has_open_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->open_time(), target);
  }

  // optional int32 close_time = 17;
  if (has_close_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->close_time(), target);
  }

  // optional int32 level = 18;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossInitDataConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 skill = 4;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill());
    }

    // optional int32 open_date = 13;
    if (has_open_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_date());
    }

    // optional int32 close_time = 17;
    if (has_close_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->close_time());
    }

    // optional int32 max_player = 7;
    if (has_max_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_player());
    }

    // optional int32 common_skill = 3;
    if (has_common_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->common_skill());
    }

    // optional int32 revive_time = 5;
    if (has_revive_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->revive_time());
    }

    // optional int32 open_time = 16;
    if (has_open_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 level = 18;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 boss_name = 12;
    if (has_boss_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_name());
    }

    // optional int32 close_date = 14;
    if (has_close_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->close_date());
    }

    // optional int32 head_pic = 10;
    if (has_head_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head_pic());
    }

    // optional string event_name = 9;
    if (has_event_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_name());
    }

    // optional int32 atk_time = 6;
    if (has_atk_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atk_time());
    }

    // optional int32 unit_pic = 11;
    if (has_unit_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unit_pic());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 stage = 2;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage());
    }

    // optional int32 min_player = 8;
    if (has_min_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_player());
    }

  }
  // repeated int32 week_date = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->week_date_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->week_date(i));
    }
    total_size += 1 * this->week_date_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossInitDataConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossInitDataConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossInitDataConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossInitDataConfig::MergeFrom(const BossInitDataConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  week_date_.MergeFrom(from.week_date_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill()) {
      set_skill(from.skill());
    }
    if (from.has_open_date()) {
      set_open_date(from.open_date());
    }
    if (from.has_close_time()) {
      set_close_time(from.close_time());
    }
    if (from.has_max_player()) {
      set_max_player(from.max_player());
    }
    if (from.has_common_skill()) {
      set_common_skill(from.common_skill());
    }
    if (from.has_revive_time()) {
      set_revive_time(from.revive_time());
    }
    if (from.has_open_time()) {
      set_open_time(from.open_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_boss_name()) {
      set_boss_name(from.boss_name());
    }
    if (from.has_close_date()) {
      set_close_date(from.close_date());
    }
    if (from.has_head_pic()) {
      set_head_pic(from.head_pic());
    }
    if (from.has_event_name()) {
      set_event_name(from.event_name());
    }
    if (from.has_atk_time()) {
      set_atk_time(from.atk_time());
    }
    if (from.has_unit_pic()) {
      set_unit_pic(from.unit_pic());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_min_player()) {
      set_min_player(from.min_player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossInitDataConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossInitDataConfig::CopyFrom(const BossInitDataConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossInitDataConfig::IsInitialized() const {

  return true;
}

void BossInitDataConfig::Swap(BossInitDataConfig* other) {
  if (other != this) {
    std::swap(skill_, other->skill_);
    std::swap(open_date_, other->open_date_);
    std::swap(close_time_, other->close_time_);
    std::swap(max_player_, other->max_player_);
    std::swap(common_skill_, other->common_skill_);
    week_date_.Swap(&other->week_date_);
    std::swap(revive_time_, other->revive_time_);
    std::swap(open_time_, other->open_time_);
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(boss_name_, other->boss_name_);
    std::swap(close_date_, other->close_date_);
    std::swap(head_pic_, other->head_pic_);
    std::swap(event_name_, other->event_name_);
    std::swap(atk_time_, other->atk_time_);
    std::swap(unit_pic_, other->unit_pic_);
    std::swap(stage_, other->stage_);
    std::swap(min_player_, other->min_player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossInitDataConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossInitDataConfig_descriptor_;
  metadata.reflection = BossInitDataConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UnitInitDataConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UnitInitDataConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* UnitInitDataConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitInitDataConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_UnitInitDataConfig_2eproto() {
  protobuf_AddDesc_UnitInitDataConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UnitInitDataConfig.proto");
  GOOGLE_CHECK(file != NULL);
  UnitInitDataConfig_descriptor_ = file->message_type(0);
  static const int UnitInitDataConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitInitDataConfig, int_atk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitInitDataConfig, base_move_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitInitDataConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitInitDataConfig, str_atk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitInitDataConfig, dom_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitInitDataConfig, energy_base_),
  };
  UnitInitDataConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnitInitDataConfig_descriptor_,
      UnitInitDataConfig::default_instance_,
      UnitInitDataConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitInitDataConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitInitDataConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitInitDataConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UnitInitDataConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitInitDataConfig_descriptor_, &UnitInitDataConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UnitInitDataConfig_2eproto() {
  delete UnitInitDataConfig::default_instance_;
  delete UnitInitDataConfig_reflection_;
}

void protobuf_AddDesc_UnitInitDataConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030UnitInitDataConfig.proto\022\022DianShiTech."
    "Config\032\025ConfigTypeGroup.proto\"z\n\022UnitIni"
    "tDataConfig\022\017\n\007int_atk\030\003 \001(\005\022\021\n\tbase_mov"
    "e\030\006 \001(\005\022\n\n\002id\030\001 \001(\005\022\017\n\007str_atk\030\002 \001(\005\022\016\n\006"
    "dom_hp\030\004 \001(\005\022\023\n\013energy_base\030\005 \001(\005", 193);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UnitInitDataConfig.proto", &protobuf_RegisterTypes);
  UnitInitDataConfig::default_instance_ = new UnitInitDataConfig();
  UnitInitDataConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UnitInitDataConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UnitInitDataConfig_2eproto {
  StaticDescriptorInitializer_UnitInitDataConfig_2eproto() {
    protobuf_AddDesc_UnitInitDataConfig_2eproto();
  }
} static_descriptor_initializer_UnitInitDataConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UnitInitDataConfig::kIntAtkFieldNumber;
const int UnitInitDataConfig::kBaseMoveFieldNumber;
const int UnitInitDataConfig::kIdFieldNumber;
const int UnitInitDataConfig::kStrAtkFieldNumber;
const int UnitInitDataConfig::kDomHpFieldNumber;
const int UnitInitDataConfig::kEnergyBaseFieldNumber;
#endif  // !_MSC_VER

UnitInitDataConfig::UnitInitDataConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnitInitDataConfig::InitAsDefaultInstance() {
}

UnitInitDataConfig::UnitInitDataConfig(const UnitInitDataConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnitInitDataConfig::SharedCtor() {
  _cached_size_ = 0;
  int_atk_ = 0;
  base_move_ = 0;
  id_ = 0;
  str_atk_ = 0;
  dom_hp_ = 0;
  energy_base_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitInitDataConfig::~UnitInitDataConfig() {
  SharedDtor();
}

void UnitInitDataConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnitInitDataConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnitInitDataConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitInitDataConfig_descriptor_;
}

const UnitInitDataConfig& UnitInitDataConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UnitInitDataConfig_2eproto();
  return *default_instance_;
}

UnitInitDataConfig* UnitInitDataConfig::default_instance_ = NULL;

UnitInitDataConfig* UnitInitDataConfig::New() const {
  return new UnitInitDataConfig;
}

void UnitInitDataConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    int_atk_ = 0;
    base_move_ = 0;
    id_ = 0;
    str_atk_ = 0;
    dom_hp_ = 0;
    energy_base_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitInitDataConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_str_atk;
        break;
      }

      // optional int32 str_atk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_str_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &str_atk_)));
          set_has_str_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_int_atk;
        break;
      }

      // optional int32 int_atk = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_atk_)));
          set_has_int_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dom_hp;
        break;
      }

      // optional int32 dom_hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dom_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dom_hp_)));
          set_has_dom_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_energy_base;
        break;
      }

      // optional int32 energy_base = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energy_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy_base_)));
          set_has_energy_base();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_base_move;
        break;
      }

      // optional int32 base_move = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_move:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_move_)));
          set_has_base_move();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnitInitDataConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 str_atk = 2;
  if (has_str_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->str_atk(), output);
  }

  // optional int32 int_atk = 3;
  if (has_int_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->int_atk(), output);
  }

  // optional int32 dom_hp = 4;
  if (has_dom_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dom_hp(), output);
  }

  // optional int32 energy_base = 5;
  if (has_energy_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->energy_base(), output);
  }

  // optional int32 base_move = 6;
  if (has_base_move()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->base_move(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnitInitDataConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 str_atk = 2;
  if (has_str_atk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->str_atk(), target);
  }

  // optional int32 int_atk = 3;
  if (has_int_atk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->int_atk(), target);
  }

  // optional int32 dom_hp = 4;
  if (has_dom_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dom_hp(), target);
  }

  // optional int32 energy_base = 5;
  if (has_energy_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->energy_base(), target);
  }

  // optional int32 base_move = 6;
  if (has_base_move()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->base_move(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnitInitDataConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 int_atk = 3;
    if (has_int_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_atk());
    }

    // optional int32 base_move = 6;
    if (has_base_move()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_move());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 str_atk = 2;
    if (has_str_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->str_atk());
    }

    // optional int32 dom_hp = 4;
    if (has_dom_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dom_hp());
    }

    // optional int32 energy_base = 5;
    if (has_energy_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energy_base());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitInitDataConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitInitDataConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnitInitDataConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitInitDataConfig::MergeFrom(const UnitInitDataConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_int_atk()) {
      set_int_atk(from.int_atk());
    }
    if (from.has_base_move()) {
      set_base_move(from.base_move());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_str_atk()) {
      set_str_atk(from.str_atk());
    }
    if (from.has_dom_hp()) {
      set_dom_hp(from.dom_hp());
    }
    if (from.has_energy_base()) {
      set_energy_base(from.energy_base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitInitDataConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitInitDataConfig::CopyFrom(const UnitInitDataConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitInitDataConfig::IsInitialized() const {

  return true;
}

void UnitInitDataConfig::Swap(UnitInitDataConfig* other) {
  if (other != this) {
    std::swap(int_atk_, other->int_atk_);
    std::swap(base_move_, other->base_move_);
    std::swap(id_, other->id_);
    std::swap(str_atk_, other->str_atk_);
    std::swap(dom_hp_, other->dom_hp_);
    std::swap(energy_base_, other->energy_base_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnitInitDataConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitInitDataConfig_descriptor_;
  metadata.reflection = UnitInitDataConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

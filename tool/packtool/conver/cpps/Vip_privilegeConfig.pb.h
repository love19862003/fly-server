// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Vip_privilegeConfig.proto

#ifndef PROTOBUF_Vip_5fprivilegeConfig_2eproto__INCLUDED
#define PROTOBUF_Vip_5fprivilegeConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Vip_5fprivilegeConfig_2eproto();
void protobuf_AssignDesc_Vip_5fprivilegeConfig_2eproto();
void protobuf_ShutdownFile_Vip_5fprivilegeConfig_2eproto();

class Vip_privilegeConfig;

// ===================================================================

class Vip_privilegeConfig : public ::google::protobuf::Message {
 public:
  Vip_privilegeConfig();
  virtual ~Vip_privilegeConfig();

  Vip_privilegeConfig(const Vip_privilegeConfig& from);

  inline Vip_privilegeConfig& operator=(const Vip_privilegeConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vip_privilegeConfig& default_instance();

  void Swap(Vip_privilegeConfig* other);

  // implements Message ----------------------------------------------

  Vip_privilegeConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vip_privilegeConfig& from);
  void MergeFrom(const Vip_privilegeConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated int32 privilege = 2;
  inline int privilege_size() const;
  inline void clear_privilege();
  static const int kPrivilegeFieldNumber = 2;
  inline ::google::protobuf::int32 privilege(int index) const;
  inline void set_privilege(int index, ::google::protobuf::int32 value);
  inline void add_privilege(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      privilege() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_privilege();

  // @@protoc_insertion_point(class_scope:DianShiTech.Config.Vip_privilegeConfig)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > privilege_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Vip_5fprivilegeConfig_2eproto();
  friend void protobuf_AssignDesc_Vip_5fprivilegeConfig_2eproto();
  friend void protobuf_ShutdownFile_Vip_5fprivilegeConfig_2eproto();

  void InitAsDefaultInstance();
  static Vip_privilegeConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// Vip_privilegeConfig

// optional int32 id = 1;
inline bool Vip_privilegeConfig::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vip_privilegeConfig::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vip_privilegeConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vip_privilegeConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Vip_privilegeConfig::id() const {
  return id_;
}
inline void Vip_privilegeConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated int32 privilege = 2;
inline int Vip_privilegeConfig::privilege_size() const {
  return privilege_.size();
}
inline void Vip_privilegeConfig::clear_privilege() {
  privilege_.Clear();
}
inline ::google::protobuf::int32 Vip_privilegeConfig::privilege(int index) const {
  return privilege_.Get(index);
}
inline void Vip_privilegeConfig::set_privilege(int index, ::google::protobuf::int32 value) {
  privilege_.Set(index, value);
}
inline void Vip_privilegeConfig::add_privilege(::google::protobuf::int32 value) {
  privilege_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Vip_privilegeConfig::privilege() const {
  return privilege_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Vip_privilegeConfig::mutable_privilege() {
  return &privilege_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Vip_5fprivilegeConfig_2eproto__INCLUDED

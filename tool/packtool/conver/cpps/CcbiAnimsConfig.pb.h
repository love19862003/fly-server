// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CcbiAnimsConfig.proto

#ifndef PROTOBUF_CcbiAnimsConfig_2eproto__INCLUDED
#define PROTOBUF_CcbiAnimsConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CcbiAnimsConfig_2eproto();
void protobuf_AssignDesc_CcbiAnimsConfig_2eproto();
void protobuf_ShutdownFile_CcbiAnimsConfig_2eproto();

class CcbiAnimsConfig;

// ===================================================================

class CcbiAnimsConfig : public ::google::protobuf::Message {
 public:
  CcbiAnimsConfig();
  virtual ~CcbiAnimsConfig();

  CcbiAnimsConfig(const CcbiAnimsConfig& from);

  inline CcbiAnimsConfig& operator=(const CcbiAnimsConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CcbiAnimsConfig& default_instance();

  void Swap(CcbiAnimsConfig* other);

  // implements Message ----------------------------------------------

  CcbiAnimsConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CcbiAnimsConfig& from);
  void MergeFrom(const CcbiAnimsConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string folder = 5;
  inline bool has_folder() const;
  inline void clear_folder();
  static const int kFolderFieldNumber = 5;
  inline const ::std::string& folder() const;
  inline void set_folder(const ::std::string& value);
  inline void set_folder(const char* value);
  inline void set_folder(const char* value, size_t size);
  inline ::std::string* mutable_folder();
  inline ::std::string* release_folder();
  inline void set_allocated_folder(::std::string* folder);

  // optional int32 offsety = 3;
  inline bool has_offsety() const;
  inline void clear_offsety();
  static const int kOffsetyFieldNumber = 3;
  inline ::google::protobuf::int32 offsety() const;
  inline void set_offsety(::google::protobuf::int32 value);

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 offsetx = 2;
  inline bool has_offsetx() const;
  inline void clear_offsetx();
  static const int kOffsetxFieldNumber = 2;
  inline ::google::protobuf::int32 offsetx() const;
  inline void set_offsetx(::google::protobuf::int32 value);

  // optional string ccbi_name = 6;
  inline bool has_ccbi_name() const;
  inline void clear_ccbi_name();
  static const int kCcbiNameFieldNumber = 6;
  inline const ::std::string& ccbi_name() const;
  inline void set_ccbi_name(const ::std::string& value);
  inline void set_ccbi_name(const char* value);
  inline void set_ccbi_name(const char* value, size_t size);
  inline ::std::string* mutable_ccbi_name();
  inline ::std::string* release_ccbi_name();
  inline void set_allocated_ccbi_name(::std::string* ccbi_name);

  // optional int32 is_flip_y = 4;
  inline bool has_is_flip_y() const;
  inline void clear_is_flip_y();
  static const int kIsFlipYFieldNumber = 4;
  inline ::google::protobuf::int32 is_flip_y() const;
  inline void set_is_flip_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DianShiTech.Config.CcbiAnimsConfig)
 private:
  inline void set_has_folder();
  inline void clear_has_folder();
  inline void set_has_offsety();
  inline void clear_has_offsety();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_offsetx();
  inline void clear_has_offsetx();
  inline void set_has_ccbi_name();
  inline void clear_has_ccbi_name();
  inline void set_has_is_flip_y();
  inline void clear_has_is_flip_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* folder_;
  ::google::protobuf::int32 offsety_;
  ::google::protobuf::int32 id_;
  ::std::string* ccbi_name_;
  ::google::protobuf::int32 offsetx_;
  ::google::protobuf::int32 is_flip_y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_CcbiAnimsConfig_2eproto();
  friend void protobuf_AssignDesc_CcbiAnimsConfig_2eproto();
  friend void protobuf_ShutdownFile_CcbiAnimsConfig_2eproto();

  void InitAsDefaultInstance();
  static CcbiAnimsConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// CcbiAnimsConfig

// optional string folder = 5;
inline bool CcbiAnimsConfig::has_folder() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CcbiAnimsConfig::set_has_folder() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CcbiAnimsConfig::clear_has_folder() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CcbiAnimsConfig::clear_folder() {
  if (folder_ != &::google::protobuf::internal::kEmptyString) {
    folder_->clear();
  }
  clear_has_folder();
}
inline const ::std::string& CcbiAnimsConfig::folder() const {
  return *folder_;
}
inline void CcbiAnimsConfig::set_folder(const ::std::string& value) {
  set_has_folder();
  if (folder_ == &::google::protobuf::internal::kEmptyString) {
    folder_ = new ::std::string;
  }
  folder_->assign(value);
}
inline void CcbiAnimsConfig::set_folder(const char* value) {
  set_has_folder();
  if (folder_ == &::google::protobuf::internal::kEmptyString) {
    folder_ = new ::std::string;
  }
  folder_->assign(value);
}
inline void CcbiAnimsConfig::set_folder(const char* value, size_t size) {
  set_has_folder();
  if (folder_ == &::google::protobuf::internal::kEmptyString) {
    folder_ = new ::std::string;
  }
  folder_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CcbiAnimsConfig::mutable_folder() {
  set_has_folder();
  if (folder_ == &::google::protobuf::internal::kEmptyString) {
    folder_ = new ::std::string;
  }
  return folder_;
}
inline ::std::string* CcbiAnimsConfig::release_folder() {
  clear_has_folder();
  if (folder_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = folder_;
    folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CcbiAnimsConfig::set_allocated_folder(::std::string* folder) {
  if (folder_ != &::google::protobuf::internal::kEmptyString) {
    delete folder_;
  }
  if (folder) {
    set_has_folder();
    folder_ = folder;
  } else {
    clear_has_folder();
    folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 offsety = 3;
inline bool CcbiAnimsConfig::has_offsety() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CcbiAnimsConfig::set_has_offsety() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CcbiAnimsConfig::clear_has_offsety() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CcbiAnimsConfig::clear_offsety() {
  offsety_ = 0;
  clear_has_offsety();
}
inline ::google::protobuf::int32 CcbiAnimsConfig::offsety() const {
  return offsety_;
}
inline void CcbiAnimsConfig::set_offsety(::google::protobuf::int32 value) {
  set_has_offsety();
  offsety_ = value;
}

// optional int32 id = 1;
inline bool CcbiAnimsConfig::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CcbiAnimsConfig::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CcbiAnimsConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CcbiAnimsConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CcbiAnimsConfig::id() const {
  return id_;
}
inline void CcbiAnimsConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 offsetx = 2;
inline bool CcbiAnimsConfig::has_offsetx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CcbiAnimsConfig::set_has_offsetx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CcbiAnimsConfig::clear_has_offsetx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CcbiAnimsConfig::clear_offsetx() {
  offsetx_ = 0;
  clear_has_offsetx();
}
inline ::google::protobuf::int32 CcbiAnimsConfig::offsetx() const {
  return offsetx_;
}
inline void CcbiAnimsConfig::set_offsetx(::google::protobuf::int32 value) {
  set_has_offsetx();
  offsetx_ = value;
}

// optional string ccbi_name = 6;
inline bool CcbiAnimsConfig::has_ccbi_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CcbiAnimsConfig::set_has_ccbi_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CcbiAnimsConfig::clear_has_ccbi_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CcbiAnimsConfig::clear_ccbi_name() {
  if (ccbi_name_ != &::google::protobuf::internal::kEmptyString) {
    ccbi_name_->clear();
  }
  clear_has_ccbi_name();
}
inline const ::std::string& CcbiAnimsConfig::ccbi_name() const {
  return *ccbi_name_;
}
inline void CcbiAnimsConfig::set_ccbi_name(const ::std::string& value) {
  set_has_ccbi_name();
  if (ccbi_name_ == &::google::protobuf::internal::kEmptyString) {
    ccbi_name_ = new ::std::string;
  }
  ccbi_name_->assign(value);
}
inline void CcbiAnimsConfig::set_ccbi_name(const char* value) {
  set_has_ccbi_name();
  if (ccbi_name_ == &::google::protobuf::internal::kEmptyString) {
    ccbi_name_ = new ::std::string;
  }
  ccbi_name_->assign(value);
}
inline void CcbiAnimsConfig::set_ccbi_name(const char* value, size_t size) {
  set_has_ccbi_name();
  if (ccbi_name_ == &::google::protobuf::internal::kEmptyString) {
    ccbi_name_ = new ::std::string;
  }
  ccbi_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CcbiAnimsConfig::mutable_ccbi_name() {
  set_has_ccbi_name();
  if (ccbi_name_ == &::google::protobuf::internal::kEmptyString) {
    ccbi_name_ = new ::std::string;
  }
  return ccbi_name_;
}
inline ::std::string* CcbiAnimsConfig::release_ccbi_name() {
  clear_has_ccbi_name();
  if (ccbi_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ccbi_name_;
    ccbi_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CcbiAnimsConfig::set_allocated_ccbi_name(::std::string* ccbi_name) {
  if (ccbi_name_ != &::google::protobuf::internal::kEmptyString) {
    delete ccbi_name_;
  }
  if (ccbi_name) {
    set_has_ccbi_name();
    ccbi_name_ = ccbi_name;
  } else {
    clear_has_ccbi_name();
    ccbi_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 is_flip_y = 4;
inline bool CcbiAnimsConfig::has_is_flip_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CcbiAnimsConfig::set_has_is_flip_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CcbiAnimsConfig::clear_has_is_flip_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CcbiAnimsConfig::clear_is_flip_y() {
  is_flip_y_ = 0;
  clear_has_is_flip_y();
}
inline ::google::protobuf::int32 CcbiAnimsConfig::is_flip_y() const {
  return is_flip_y_;
}
inline void CcbiAnimsConfig::set_is_flip_y(::google::protobuf::int32 value) {
  set_has_is_flip_y();
  is_flip_y_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CcbiAnimsConfig_2eproto__INCLUDED

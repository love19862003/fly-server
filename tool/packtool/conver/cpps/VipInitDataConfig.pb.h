// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VipInitDataConfig.proto

#ifndef PROTOBUF_VipInitDataConfig_2eproto__INCLUDED
#define PROTOBUF_VipInitDataConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_VipInitDataConfig_2eproto();
void protobuf_AssignDesc_VipInitDataConfig_2eproto();
void protobuf_ShutdownFile_VipInitDataConfig_2eproto();

class VipInitDataConfig;

// ===================================================================

class VipInitDataConfig : public ::google::protobuf::Message {
 public:
  VipInitDataConfig();
  virtual ~VipInitDataConfig();

  VipInitDataConfig(const VipInitDataConfig& from);

  inline VipInitDataConfig& operator=(const VipInitDataConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VipInitDataConfig& default_instance();

  void Swap(VipInitDataConfig* other);

  // implements Message ----------------------------------------------

  VipInitDataConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VipInitDataConfig& from);
  void MergeFrom(const VipInitDataConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 vip_exp = 3;
  inline bool has_vip_exp() const;
  inline void clear_vip_exp();
  static const int kVipExpFieldNumber = 3;
  inline ::google::protobuf::int32 vip_exp() const;
  inline void set_vip_exp(::google::protobuf::int32 value);

  // repeated .DianShiTech.Config.ConfigTypeGroup title_picture_id = 5;
  inline int title_picture_id_size() const;
  inline void clear_title_picture_id();
  static const int kTitlePictureIdFieldNumber = 5;
  inline const ::DianShiTech::Config::ConfigTypeGroup& title_picture_id(int index) const;
  inline ::DianShiTech::Config::ConfigTypeGroup* mutable_title_picture_id(int index);
  inline ::DianShiTech::Config::ConfigTypeGroup* add_title_picture_id();
  inline const ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >&
      title_picture_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >*
      mutable_title_picture_id();

  // optional int32 vip_gift_original = 11;
  inline bool has_vip_gift_original() const;
  inline void clear_vip_gift_original();
  static const int kVipGiftOriginalFieldNumber = 11;
  inline ::google::protobuf::int32 vip_gift_original() const;
  inline void set_vip_gift_original(::google::protobuf::int32 value);

  // optional int32 vip_gift_price = 12;
  inline bool has_vip_gift_price() const;
  inline void clear_vip_gift_price();
  static const int kVipGiftPriceFieldNumber = 12;
  inline ::google::protobuf::int32 vip_gift_price() const;
  inline void set_vip_gift_price(::google::protobuf::int32 value);

  // optional int32 vip_level = 2;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 2;
  inline ::google::protobuf::int32 vip_level() const;
  inline void set_vip_level(::google::protobuf::int32 value);

  // optional int32 pve_skip_free = 15;
  inline bool has_pve_skip_free() const;
  inline void clear_pve_skip_free();
  static const int kPveSkipFreeFieldNumber = 15;
  inline ::google::protobuf::int32 pve_skip_free() const;
  inline void set_pve_skip_free(::google::protobuf::int32 value);

  // optional int32 vip_max_energy = 13;
  inline bool has_vip_max_energy() const;
  inline void clear_vip_max_energy();
  static const int kVipMaxEnergyFieldNumber = 13;
  inline ::google::protobuf::int32 vip_max_energy() const;
  inline void set_vip_max_energy(::google::protobuf::int32 value);

  // optional int32 arena_activity_count_charge = 18;
  inline bool has_arena_activity_count_charge() const;
  inline void clear_arena_activity_count_charge();
  static const int kArenaActivityCountChargeFieldNumber = 18;
  inline ::google::protobuf::int32 arena_activity_count_charge() const;
  inline void set_arena_activity_count_charge(::google::protobuf::int32 value);

  // optional int32 daily_refresh = 4;
  inline bool has_daily_refresh() const;
  inline void clear_daily_refresh();
  static const int kDailyRefreshFieldNumber = 4;
  inline ::google::protobuf::int32 daily_refresh() const;
  inline void set_daily_refresh(::google::protobuf::int32 value);

  // optional int32 quick_stage = 8;
  inline bool has_quick_stage() const;
  inline void clear_quick_stage();
  static const int kQuickStageFieldNumber = 8;
  inline ::google::protobuf::int32 quick_stage() const;
  inline void set_quick_stage(::google::protobuf::int32 value);

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string directions = 19;
  inline bool has_directions() const;
  inline void clear_directions();
  static const int kDirectionsFieldNumber = 19;
  inline const ::std::string& directions() const;
  inline void set_directions(const ::std::string& value);
  inline void set_directions(const char* value);
  inline void set_directions(const char* value, size_t size);
  inline ::std::string* mutable_directions();
  inline ::std::string* release_directions();
  inline void set_allocated_directions(::std::string* directions);

  // optional int32 pve_activity_skip_free = 17;
  inline bool has_pve_activity_skip_free() const;
  inline void clear_pve_activity_skip_free();
  static const int kPveActivitySkipFreeFieldNumber = 17;
  inline ::google::protobuf::int32 pve_activity_skip_free() const;
  inline void set_pve_activity_skip_free(::google::protobuf::int32 value);

  // optional int32 pvp_skip_free = 16;
  inline bool has_pvp_skip_free() const;
  inline void clear_pvp_skip_free();
  static const int kPvpSkipFreeFieldNumber = 16;
  inline ::google::protobuf::int32 pvp_skip_free() const;
  inline void set_pvp_skip_free(::google::protobuf::int32 value);

  // optional int32 moneytree = 7;
  inline bool has_moneytree() const;
  inline void clear_moneytree();
  static const int kMoneytreeFieldNumber = 7;
  inline ::google::protobuf::int32 moneytree() const;
  inline void set_moneytree(::google::protobuf::int32 value);

  // optional int32 friend_add_count = 6;
  inline bool has_friend_add_count() const;
  inline void clear_friend_add_count();
  static const int kFriendAddCountFieldNumber = 6;
  inline ::google::protobuf::int32 friend_add_count() const;
  inline void set_friend_add_count(::google::protobuf::int32 value);

  // optional int32 vip_gift = 10;
  inline bool has_vip_gift() const;
  inline void clear_vip_gift();
  static const int kVipGiftFieldNumber = 10;
  inline ::google::protobuf::int32 vip_gift() const;
  inline void set_vip_gift(::google::protobuf::int32 value);

  // optional int32 vip_cultivate = 9;
  inline bool has_vip_cultivate() const;
  inline void clear_vip_cultivate();
  static const int kVipCultivateFieldNumber = 9;
  inline ::google::protobuf::int32 vip_cultivate() const;
  inline void set_vip_cultivate(::google::protobuf::int32 value);

  // optional int32 boss_skip_free = 14;
  inline bool has_boss_skip_free() const;
  inline void clear_boss_skip_free();
  static const int kBossSkipFreeFieldNumber = 14;
  inline ::google::protobuf::int32 boss_skip_free() const;
  inline void set_boss_skip_free(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DianShiTech.Config.VipInitDataConfig)
 private:
  inline void set_has_vip_exp();
  inline void clear_has_vip_exp();
  inline void set_has_vip_gift_original();
  inline void clear_has_vip_gift_original();
  inline void set_has_vip_gift_price();
  inline void clear_has_vip_gift_price();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_pve_skip_free();
  inline void clear_has_pve_skip_free();
  inline void set_has_vip_max_energy();
  inline void clear_has_vip_max_energy();
  inline void set_has_arena_activity_count_charge();
  inline void clear_has_arena_activity_count_charge();
  inline void set_has_daily_refresh();
  inline void clear_has_daily_refresh();
  inline void set_has_quick_stage();
  inline void clear_has_quick_stage();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_directions();
  inline void clear_has_directions();
  inline void set_has_pve_activity_skip_free();
  inline void clear_has_pve_activity_skip_free();
  inline void set_has_pvp_skip_free();
  inline void clear_has_pvp_skip_free();
  inline void set_has_moneytree();
  inline void clear_has_moneytree();
  inline void set_has_friend_add_count();
  inline void clear_has_friend_add_count();
  inline void set_has_vip_gift();
  inline void clear_has_vip_gift();
  inline void set_has_vip_cultivate();
  inline void clear_has_vip_cultivate();
  inline void set_has_boss_skip_free();
  inline void clear_has_boss_skip_free();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup > title_picture_id_;
  ::google::protobuf::int32 vip_exp_;
  ::google::protobuf::int32 vip_gift_original_;
  ::google::protobuf::int32 vip_gift_price_;
  ::google::protobuf::int32 vip_level_;
  ::google::protobuf::int32 pve_skip_free_;
  ::google::protobuf::int32 vip_max_energy_;
  ::google::protobuf::int32 arena_activity_count_charge_;
  ::google::protobuf::int32 daily_refresh_;
  ::google::protobuf::int32 quick_stage_;
  ::google::protobuf::int32 id_;
  ::std::string* directions_;
  ::google::protobuf::int32 pve_activity_skip_free_;
  ::google::protobuf::int32 pvp_skip_free_;
  ::google::protobuf::int32 moneytree_;
  ::google::protobuf::int32 friend_add_count_;
  ::google::protobuf::int32 vip_gift_;
  ::google::protobuf::int32 vip_cultivate_;
  ::google::protobuf::int32 boss_skip_free_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_VipInitDataConfig_2eproto();
  friend void protobuf_AssignDesc_VipInitDataConfig_2eproto();
  friend void protobuf_ShutdownFile_VipInitDataConfig_2eproto();

  void InitAsDefaultInstance();
  static VipInitDataConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// VipInitDataConfig

// optional int32 vip_exp = 3;
inline bool VipInitDataConfig::has_vip_exp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VipInitDataConfig::set_has_vip_exp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VipInitDataConfig::clear_has_vip_exp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VipInitDataConfig::clear_vip_exp() {
  vip_exp_ = 0;
  clear_has_vip_exp();
}
inline ::google::protobuf::int32 VipInitDataConfig::vip_exp() const {
  return vip_exp_;
}
inline void VipInitDataConfig::set_vip_exp(::google::protobuf::int32 value) {
  set_has_vip_exp();
  vip_exp_ = value;
}

// repeated .DianShiTech.Config.ConfigTypeGroup title_picture_id = 5;
inline int VipInitDataConfig::title_picture_id_size() const {
  return title_picture_id_.size();
}
inline void VipInitDataConfig::clear_title_picture_id() {
  title_picture_id_.Clear();
}
inline const ::DianShiTech::Config::ConfigTypeGroup& VipInitDataConfig::title_picture_id(int index) const {
  return title_picture_id_.Get(index);
}
inline ::DianShiTech::Config::ConfigTypeGroup* VipInitDataConfig::mutable_title_picture_id(int index) {
  return title_picture_id_.Mutable(index);
}
inline ::DianShiTech::Config::ConfigTypeGroup* VipInitDataConfig::add_title_picture_id() {
  return title_picture_id_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >&
VipInitDataConfig::title_picture_id() const {
  return title_picture_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >*
VipInitDataConfig::mutable_title_picture_id() {
  return &title_picture_id_;
}

// optional int32 vip_gift_original = 11;
inline bool VipInitDataConfig::has_vip_gift_original() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VipInitDataConfig::set_has_vip_gift_original() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VipInitDataConfig::clear_has_vip_gift_original() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VipInitDataConfig::clear_vip_gift_original() {
  vip_gift_original_ = 0;
  clear_has_vip_gift_original();
}
inline ::google::protobuf::int32 VipInitDataConfig::vip_gift_original() const {
  return vip_gift_original_;
}
inline void VipInitDataConfig::set_vip_gift_original(::google::protobuf::int32 value) {
  set_has_vip_gift_original();
  vip_gift_original_ = value;
}

// optional int32 vip_gift_price = 12;
inline bool VipInitDataConfig::has_vip_gift_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VipInitDataConfig::set_has_vip_gift_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VipInitDataConfig::clear_has_vip_gift_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VipInitDataConfig::clear_vip_gift_price() {
  vip_gift_price_ = 0;
  clear_has_vip_gift_price();
}
inline ::google::protobuf::int32 VipInitDataConfig::vip_gift_price() const {
  return vip_gift_price_;
}
inline void VipInitDataConfig::set_vip_gift_price(::google::protobuf::int32 value) {
  set_has_vip_gift_price();
  vip_gift_price_ = value;
}

// optional int32 vip_level = 2;
inline bool VipInitDataConfig::has_vip_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VipInitDataConfig::set_has_vip_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VipInitDataConfig::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VipInitDataConfig::clear_vip_level() {
  vip_level_ = 0;
  clear_has_vip_level();
}
inline ::google::protobuf::int32 VipInitDataConfig::vip_level() const {
  return vip_level_;
}
inline void VipInitDataConfig::set_vip_level(::google::protobuf::int32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// optional int32 pve_skip_free = 15;
inline bool VipInitDataConfig::has_pve_skip_free() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VipInitDataConfig::set_has_pve_skip_free() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VipInitDataConfig::clear_has_pve_skip_free() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VipInitDataConfig::clear_pve_skip_free() {
  pve_skip_free_ = 0;
  clear_has_pve_skip_free();
}
inline ::google::protobuf::int32 VipInitDataConfig::pve_skip_free() const {
  return pve_skip_free_;
}
inline void VipInitDataConfig::set_pve_skip_free(::google::protobuf::int32 value) {
  set_has_pve_skip_free();
  pve_skip_free_ = value;
}

// optional int32 vip_max_energy = 13;
inline bool VipInitDataConfig::has_vip_max_energy() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VipInitDataConfig::set_has_vip_max_energy() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VipInitDataConfig::clear_has_vip_max_energy() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VipInitDataConfig::clear_vip_max_energy() {
  vip_max_energy_ = 0;
  clear_has_vip_max_energy();
}
inline ::google::protobuf::int32 VipInitDataConfig::vip_max_energy() const {
  return vip_max_energy_;
}
inline void VipInitDataConfig::set_vip_max_energy(::google::protobuf::int32 value) {
  set_has_vip_max_energy();
  vip_max_energy_ = value;
}

// optional int32 arena_activity_count_charge = 18;
inline bool VipInitDataConfig::has_arena_activity_count_charge() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VipInitDataConfig::set_has_arena_activity_count_charge() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VipInitDataConfig::clear_has_arena_activity_count_charge() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VipInitDataConfig::clear_arena_activity_count_charge() {
  arena_activity_count_charge_ = 0;
  clear_has_arena_activity_count_charge();
}
inline ::google::protobuf::int32 VipInitDataConfig::arena_activity_count_charge() const {
  return arena_activity_count_charge_;
}
inline void VipInitDataConfig::set_arena_activity_count_charge(::google::protobuf::int32 value) {
  set_has_arena_activity_count_charge();
  arena_activity_count_charge_ = value;
}

// optional int32 daily_refresh = 4;
inline bool VipInitDataConfig::has_daily_refresh() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VipInitDataConfig::set_has_daily_refresh() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VipInitDataConfig::clear_has_daily_refresh() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VipInitDataConfig::clear_daily_refresh() {
  daily_refresh_ = 0;
  clear_has_daily_refresh();
}
inline ::google::protobuf::int32 VipInitDataConfig::daily_refresh() const {
  return daily_refresh_;
}
inline void VipInitDataConfig::set_daily_refresh(::google::protobuf::int32 value) {
  set_has_daily_refresh();
  daily_refresh_ = value;
}

// optional int32 quick_stage = 8;
inline bool VipInitDataConfig::has_quick_stage() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VipInitDataConfig::set_has_quick_stage() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VipInitDataConfig::clear_has_quick_stage() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VipInitDataConfig::clear_quick_stage() {
  quick_stage_ = 0;
  clear_has_quick_stage();
}
inline ::google::protobuf::int32 VipInitDataConfig::quick_stage() const {
  return quick_stage_;
}
inline void VipInitDataConfig::set_quick_stage(::google::protobuf::int32 value) {
  set_has_quick_stage();
  quick_stage_ = value;
}

// optional int32 id = 1;
inline bool VipInitDataConfig::has_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VipInitDataConfig::set_has_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VipInitDataConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VipInitDataConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 VipInitDataConfig::id() const {
  return id_;
}
inline void VipInitDataConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string directions = 19;
inline bool VipInitDataConfig::has_directions() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VipInitDataConfig::set_has_directions() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VipInitDataConfig::clear_has_directions() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VipInitDataConfig::clear_directions() {
  if (directions_ != &::google::protobuf::internal::kEmptyString) {
    directions_->clear();
  }
  clear_has_directions();
}
inline const ::std::string& VipInitDataConfig::directions() const {
  return *directions_;
}
inline void VipInitDataConfig::set_directions(const ::std::string& value) {
  set_has_directions();
  if (directions_ == &::google::protobuf::internal::kEmptyString) {
    directions_ = new ::std::string;
  }
  directions_->assign(value);
}
inline void VipInitDataConfig::set_directions(const char* value) {
  set_has_directions();
  if (directions_ == &::google::protobuf::internal::kEmptyString) {
    directions_ = new ::std::string;
  }
  directions_->assign(value);
}
inline void VipInitDataConfig::set_directions(const char* value, size_t size) {
  set_has_directions();
  if (directions_ == &::google::protobuf::internal::kEmptyString) {
    directions_ = new ::std::string;
  }
  directions_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VipInitDataConfig::mutable_directions() {
  set_has_directions();
  if (directions_ == &::google::protobuf::internal::kEmptyString) {
    directions_ = new ::std::string;
  }
  return directions_;
}
inline ::std::string* VipInitDataConfig::release_directions() {
  clear_has_directions();
  if (directions_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = directions_;
    directions_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VipInitDataConfig::set_allocated_directions(::std::string* directions) {
  if (directions_ != &::google::protobuf::internal::kEmptyString) {
    delete directions_;
  }
  if (directions) {
    set_has_directions();
    directions_ = directions;
  } else {
    clear_has_directions();
    directions_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 pve_activity_skip_free = 17;
inline bool VipInitDataConfig::has_pve_activity_skip_free() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void VipInitDataConfig::set_has_pve_activity_skip_free() {
  _has_bits_[0] |= 0x00001000u;
}
inline void VipInitDataConfig::clear_has_pve_activity_skip_free() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void VipInitDataConfig::clear_pve_activity_skip_free() {
  pve_activity_skip_free_ = 0;
  clear_has_pve_activity_skip_free();
}
inline ::google::protobuf::int32 VipInitDataConfig::pve_activity_skip_free() const {
  return pve_activity_skip_free_;
}
inline void VipInitDataConfig::set_pve_activity_skip_free(::google::protobuf::int32 value) {
  set_has_pve_activity_skip_free();
  pve_activity_skip_free_ = value;
}

// optional int32 pvp_skip_free = 16;
inline bool VipInitDataConfig::has_pvp_skip_free() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void VipInitDataConfig::set_has_pvp_skip_free() {
  _has_bits_[0] |= 0x00002000u;
}
inline void VipInitDataConfig::clear_has_pvp_skip_free() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void VipInitDataConfig::clear_pvp_skip_free() {
  pvp_skip_free_ = 0;
  clear_has_pvp_skip_free();
}
inline ::google::protobuf::int32 VipInitDataConfig::pvp_skip_free() const {
  return pvp_skip_free_;
}
inline void VipInitDataConfig::set_pvp_skip_free(::google::protobuf::int32 value) {
  set_has_pvp_skip_free();
  pvp_skip_free_ = value;
}

// optional int32 moneytree = 7;
inline bool VipInitDataConfig::has_moneytree() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void VipInitDataConfig::set_has_moneytree() {
  _has_bits_[0] |= 0x00004000u;
}
inline void VipInitDataConfig::clear_has_moneytree() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void VipInitDataConfig::clear_moneytree() {
  moneytree_ = 0;
  clear_has_moneytree();
}
inline ::google::protobuf::int32 VipInitDataConfig::moneytree() const {
  return moneytree_;
}
inline void VipInitDataConfig::set_moneytree(::google::protobuf::int32 value) {
  set_has_moneytree();
  moneytree_ = value;
}

// optional int32 friend_add_count = 6;
inline bool VipInitDataConfig::has_friend_add_count() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void VipInitDataConfig::set_has_friend_add_count() {
  _has_bits_[0] |= 0x00008000u;
}
inline void VipInitDataConfig::clear_has_friend_add_count() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void VipInitDataConfig::clear_friend_add_count() {
  friend_add_count_ = 0;
  clear_has_friend_add_count();
}
inline ::google::protobuf::int32 VipInitDataConfig::friend_add_count() const {
  return friend_add_count_;
}
inline void VipInitDataConfig::set_friend_add_count(::google::protobuf::int32 value) {
  set_has_friend_add_count();
  friend_add_count_ = value;
}

// optional int32 vip_gift = 10;
inline bool VipInitDataConfig::has_vip_gift() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void VipInitDataConfig::set_has_vip_gift() {
  _has_bits_[0] |= 0x00010000u;
}
inline void VipInitDataConfig::clear_has_vip_gift() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void VipInitDataConfig::clear_vip_gift() {
  vip_gift_ = 0;
  clear_has_vip_gift();
}
inline ::google::protobuf::int32 VipInitDataConfig::vip_gift() const {
  return vip_gift_;
}
inline void VipInitDataConfig::set_vip_gift(::google::protobuf::int32 value) {
  set_has_vip_gift();
  vip_gift_ = value;
}

// optional int32 vip_cultivate = 9;
inline bool VipInitDataConfig::has_vip_cultivate() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void VipInitDataConfig::set_has_vip_cultivate() {
  _has_bits_[0] |= 0x00020000u;
}
inline void VipInitDataConfig::clear_has_vip_cultivate() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void VipInitDataConfig::clear_vip_cultivate() {
  vip_cultivate_ = 0;
  clear_has_vip_cultivate();
}
inline ::google::protobuf::int32 VipInitDataConfig::vip_cultivate() const {
  return vip_cultivate_;
}
inline void VipInitDataConfig::set_vip_cultivate(::google::protobuf::int32 value) {
  set_has_vip_cultivate();
  vip_cultivate_ = value;
}

// optional int32 boss_skip_free = 14;
inline bool VipInitDataConfig::has_boss_skip_free() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void VipInitDataConfig::set_has_boss_skip_free() {
  _has_bits_[0] |= 0x00040000u;
}
inline void VipInitDataConfig::clear_has_boss_skip_free() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void VipInitDataConfig::clear_boss_skip_free() {
  boss_skip_free_ = 0;
  clear_has_boss_skip_free();
}
inline ::google::protobuf::int32 VipInitDataConfig::boss_skip_free() const {
  return boss_skip_free_;
}
inline void VipInitDataConfig::set_boss_skip_free(::google::protobuf::int32 value) {
  set_has_boss_skip_free();
  boss_skip_free_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_VipInitDataConfig_2eproto__INCLUDED

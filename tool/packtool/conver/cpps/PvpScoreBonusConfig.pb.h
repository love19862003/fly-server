// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PvpScoreBonusConfig.proto

#ifndef PROTOBUF_PvpScoreBonusConfig_2eproto__INCLUDED
#define PROTOBUF_PvpScoreBonusConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PvpScoreBonusConfig_2eproto();
void protobuf_AssignDesc_PvpScoreBonusConfig_2eproto();
void protobuf_ShutdownFile_PvpScoreBonusConfig_2eproto();

class PvpScoreBonusConfig;

// ===================================================================

class PvpScoreBonusConfig : public ::google::protobuf::Message {
 public:
  PvpScoreBonusConfig();
  virtual ~PvpScoreBonusConfig();

  PvpScoreBonusConfig(const PvpScoreBonusConfig& from);

  inline PvpScoreBonusConfig& operator=(const PvpScoreBonusConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpScoreBonusConfig& default_instance();

  void Swap(PvpScoreBonusConfig* other);

  // implements Message ----------------------------------------------

  PvpScoreBonusConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpScoreBonusConfig& from);
  void MergeFrom(const PvpScoreBonusConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 score_min = 2;
  inline bool has_score_min() const;
  inline void clear_score_min();
  static const int kScoreMinFieldNumber = 2;
  inline ::google::protobuf::int32 score_min() const;
  inline void set_score_min(::google::protobuf::int32 value);

  // optional int32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // repeated int32 drops = 4;
  inline int drops_size() const;
  inline void clear_drops();
  static const int kDropsFieldNumber = 4;
  inline ::google::protobuf::int32 drops(int index) const;
  inline void set_drops(int index, ::google::protobuf::int32 value);
  inline void add_drops(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      drops() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_drops();

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 score_max = 3;
  inline bool has_score_max() const;
  inline void clear_score_max();
  static const int kScoreMaxFieldNumber = 3;
  inline ::google::protobuf::int32 score_max() const;
  inline void set_score_max(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DianShiTech.Config.PvpScoreBonusConfig)
 private:
  inline void set_has_score_min();
  inline void clear_has_score_min();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_score_max();
  inline void clear_has_score_max();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 score_min_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > drops_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 score_max_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PvpScoreBonusConfig_2eproto();
  friend void protobuf_AssignDesc_PvpScoreBonusConfig_2eproto();
  friend void protobuf_ShutdownFile_PvpScoreBonusConfig_2eproto();

  void InitAsDefaultInstance();
  static PvpScoreBonusConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// PvpScoreBonusConfig

// optional int32 score_min = 2;
inline bool PvpScoreBonusConfig::has_score_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpScoreBonusConfig::set_has_score_min() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpScoreBonusConfig::clear_has_score_min() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpScoreBonusConfig::clear_score_min() {
  score_min_ = 0;
  clear_has_score_min();
}
inline ::google::protobuf::int32 PvpScoreBonusConfig::score_min() const {
  return score_min_;
}
inline void PvpScoreBonusConfig::set_score_min(::google::protobuf::int32 value) {
  set_has_score_min();
  score_min_ = value;
}

// optional int32 type = 5;
inline bool PvpScoreBonusConfig::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpScoreBonusConfig::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpScoreBonusConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpScoreBonusConfig::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 PvpScoreBonusConfig::type() const {
  return type_;
}
inline void PvpScoreBonusConfig::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// repeated int32 drops = 4;
inline int PvpScoreBonusConfig::drops_size() const {
  return drops_.size();
}
inline void PvpScoreBonusConfig::clear_drops() {
  drops_.Clear();
}
inline ::google::protobuf::int32 PvpScoreBonusConfig::drops(int index) const {
  return drops_.Get(index);
}
inline void PvpScoreBonusConfig::set_drops(int index, ::google::protobuf::int32 value) {
  drops_.Set(index, value);
}
inline void PvpScoreBonusConfig::add_drops(::google::protobuf::int32 value) {
  drops_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PvpScoreBonusConfig::drops() const {
  return drops_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PvpScoreBonusConfig::mutable_drops() {
  return &drops_;
}

// optional int32 id = 1;
inline bool PvpScoreBonusConfig::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PvpScoreBonusConfig::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PvpScoreBonusConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PvpScoreBonusConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PvpScoreBonusConfig::id() const {
  return id_;
}
inline void PvpScoreBonusConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 score_max = 3;
inline bool PvpScoreBonusConfig::has_score_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PvpScoreBonusConfig::set_has_score_max() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PvpScoreBonusConfig::clear_has_score_max() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PvpScoreBonusConfig::clear_score_max() {
  score_max_ = 0;
  clear_has_score_max();
}
inline ::google::protobuf::int32 PvpScoreBonusConfig::score_max() const {
  return score_max_;
}
inline void PvpScoreBonusConfig::set_score_max(::google::protobuf::int32 value) {
  set_has_score_max();
  score_max_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PvpScoreBonusConfig_2eproto__INCLUDED

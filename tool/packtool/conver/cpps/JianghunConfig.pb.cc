// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: JianghunConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "JianghunConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* JianghunConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JianghunConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_JianghunConfig_2eproto() {
  protobuf_AddDesc_JianghunConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "JianghunConfig.proto");
  GOOGLE_CHECK(file != NULL);
  JianghunConfig_descriptor_ = file->message_type(0);
  static const int JianghunConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JianghunConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JianghunConfig, currency_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JianghunConfig, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JianghunConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JianghunConfig, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JianghunConfig, cost_currency_type_),
  };
  JianghunConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JianghunConfig_descriptor_,
      JianghunConfig::default_instance_,
      JianghunConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JianghunConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JianghunConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JianghunConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_JianghunConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JianghunConfig_descriptor_, &JianghunConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_JianghunConfig_2eproto() {
  delete JianghunConfig::default_instance_;
  delete JianghunConfig_reflection_;
}

void protobuf_AddDesc_JianghunConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024JianghunConfig.proto\022\022DianShiTech.Conf"
    "ig\032\025ConfigTypeGroup.proto\"}\n\016JianghunCon"
    "fig\022\014\n\004type\030\002 \001(\005\022\025\n\rcurrency_type\030\005 \001(\005"
    "\022\014\n\004cost\030\004 \001(\005\022\n\n\002id\030\001 \001(\005\022\020\n\010currency\030\006"
    " \001(\005\022\032\n\022cost_currency_type\030\003 \001(\005", 192);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "JianghunConfig.proto", &protobuf_RegisterTypes);
  JianghunConfig::default_instance_ = new JianghunConfig();
  JianghunConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_JianghunConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_JianghunConfig_2eproto {
  StaticDescriptorInitializer_JianghunConfig_2eproto() {
    protobuf_AddDesc_JianghunConfig_2eproto();
  }
} static_descriptor_initializer_JianghunConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int JianghunConfig::kTypeFieldNumber;
const int JianghunConfig::kCurrencyTypeFieldNumber;
const int JianghunConfig::kCostFieldNumber;
const int JianghunConfig::kIdFieldNumber;
const int JianghunConfig::kCurrencyFieldNumber;
const int JianghunConfig::kCostCurrencyTypeFieldNumber;
#endif  // !_MSC_VER

JianghunConfig::JianghunConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JianghunConfig::InitAsDefaultInstance() {
}

JianghunConfig::JianghunConfig(const JianghunConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JianghunConfig::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  currency_type_ = 0;
  cost_ = 0;
  id_ = 0;
  currency_ = 0;
  cost_currency_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JianghunConfig::~JianghunConfig() {
  SharedDtor();
}

void JianghunConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JianghunConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JianghunConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JianghunConfig_descriptor_;
}

const JianghunConfig& JianghunConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_JianghunConfig_2eproto();
  return *default_instance_;
}

JianghunConfig* JianghunConfig::default_instance_ = NULL;

JianghunConfig* JianghunConfig::New() const {
  return new JianghunConfig;
}

void JianghunConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    currency_type_ = 0;
    cost_ = 0;
    id_ = 0;
    currency_ = 0;
    cost_currency_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JianghunConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cost_currency_type;
        break;
      }

      // optional int32 cost_currency_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_currency_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_currency_type_)));
          set_has_cost_currency_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cost;
        break;
      }

      // optional int32 cost = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_currency_type;
        break;
      }

      // optional int32 currency_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currency_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_type_)));
          set_has_currency_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_currency;
        break;
      }

      // optional int32 currency = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_)));
          set_has_currency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JianghunConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 cost_currency_type = 3;
  if (has_cost_currency_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cost_currency_type(), output);
  }

  // optional int32 cost = 4;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cost(), output);
  }

  // optional int32 currency_type = 5;
  if (has_currency_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->currency_type(), output);
  }

  // optional int32 currency = 6;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->currency(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JianghunConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 cost_currency_type = 3;
  if (has_cost_currency_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cost_currency_type(), target);
  }

  // optional int32 cost = 4;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cost(), target);
  }

  // optional int32 currency_type = 5;
  if (has_currency_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->currency_type(), target);
  }

  // optional int32 currency = 6;
  if (has_currency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->currency(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JianghunConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 currency_type = 5;
    if (has_currency_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency_type());
    }

    // optional int32 cost = 4;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 currency = 6;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency());
    }

    // optional int32 cost_currency_type = 3;
    if (has_cost_currency_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost_currency_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JianghunConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JianghunConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JianghunConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JianghunConfig::MergeFrom(const JianghunConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_currency_type()) {
      set_currency_type(from.currency_type());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_cost_currency_type()) {
      set_cost_currency_type(from.cost_currency_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JianghunConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JianghunConfig::CopyFrom(const JianghunConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JianghunConfig::IsInitialized() const {

  return true;
}

void JianghunConfig::Swap(JianghunConfig* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(currency_type_, other->currency_type_);
    std::swap(cost_, other->cost_);
    std::swap(id_, other->id_);
    std::swap(currency_, other->currency_);
    std::swap(cost_currency_type_, other->cost_currency_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JianghunConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JianghunConfig_descriptor_;
  metadata.reflection = JianghunConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

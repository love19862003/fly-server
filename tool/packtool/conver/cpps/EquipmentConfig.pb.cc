// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EquipmentConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EquipmentConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* EquipmentConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_EquipmentConfig_2eproto() {
  protobuf_AddDesc_EquipmentConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EquipmentConfig.proto");
  GOOGLE_CHECK(file != NULL);
  EquipmentConfig_descriptor_ = file->message_type(0);
  static const int EquipmentConfig_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, base_prop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, total_need_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, smelt_currency_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, improve_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, equip_root_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, smelt_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, rare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, equip_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, upgrade_equip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, root_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, can_smelt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, sell_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, base_attr_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, currency_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, card_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, equip_pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, base_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, equip_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, depend_prop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, ralate_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, equip_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, smelt_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, xilian_prop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, relate_unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, isbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, random_prop_),
  };
  EquipmentConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentConfig_descriptor_,
      EquipmentConfig::default_instance_,
      EquipmentConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EquipmentConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentConfig_descriptor_, &EquipmentConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EquipmentConfig_2eproto() {
  delete EquipmentConfig::default_instance_;
  delete EquipmentConfig_reflection_;
}

void protobuf_AddDesc_EquipmentConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025EquipmentConfig.proto\022\022DianShiTech.Con"
    "fig\032\025ConfigTypeGroup.proto\"\353\004\n\017Equipment"
    "Config\022\023\n\013description\030\013 \001(\t\022\021\n\tbase_prop"
    "\030\023 \001(\005\022\026\n\016total_need_exp\030\035 \001(\005\022\033\n\023smelt_"
    "currency_type\030\031 \001(\005\022\024\n\014improve_attr\030\022 \001("
    "\005\022\022\n\nequip_root\030\004 \001(\005\022\022\n\nsmelt_cost\030\032 \001("
    "\005\022\014\n\004rare\030\007 \001(\005\022\022\n\nequip_rank\030\010 \001(\005\022\030\n\020u"
    "pgrade_equip_id\030\034 \001(\005\022\021\n\troot_name\030\005 \001(\t"
    "\022\021\n\tcan_smelt\030\030 \001(\005\022\022\n\nsell_price\030\027 \001(\005\022"
    "\017\n\007quality\030\t \001(\005\022\026\n\016base_attr_type\030\020 \001(\005"
    "\022\025\n\rcurrency_type\030\026 \001(\005\022\021\n\tcard_name\030\006 \001"
    "(\t\022\021\n\tequip_pic\030\016 \001(\005\022\n\n\002id\030\001 \001(\005\022\021\n\tbas"
    "e_attr\030\021 \001(\005\022\022\n\nequip_type\030\003 \001(\005\022\023\n\013depe"
    "nd_prop\030\025 \001(\005\022\024\n\014ralate_stage\030\r \001(\t\022\022\n\ne"
    "quip_icon\030\017 \001(\005\022\014\n\004name\030\n \001(\t\022\022\n\nsmelt_d"
    "ata\030\033 \003(\005\022\023\n\013xilian_prop\030\036 \001(\005\022\023\n\013relate"
    "_unit\030\014 \001(\t\022\016\n\006isbase\030\002 \001(\005\022\023\n\013random_pr"
    "op\030\024 \001(\005", 688);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EquipmentConfig.proto", &protobuf_RegisterTypes);
  EquipmentConfig::default_instance_ = new EquipmentConfig();
  EquipmentConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EquipmentConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EquipmentConfig_2eproto {
  StaticDescriptorInitializer_EquipmentConfig_2eproto() {
    protobuf_AddDesc_EquipmentConfig_2eproto();
  }
} static_descriptor_initializer_EquipmentConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int EquipmentConfig::kDescriptionFieldNumber;
const int EquipmentConfig::kBasePropFieldNumber;
const int EquipmentConfig::kTotalNeedExpFieldNumber;
const int EquipmentConfig::kSmeltCurrencyTypeFieldNumber;
const int EquipmentConfig::kImproveAttrFieldNumber;
const int EquipmentConfig::kEquipRootFieldNumber;
const int EquipmentConfig::kSmeltCostFieldNumber;
const int EquipmentConfig::kRareFieldNumber;
const int EquipmentConfig::kEquipRankFieldNumber;
const int EquipmentConfig::kUpgradeEquipIdFieldNumber;
const int EquipmentConfig::kRootNameFieldNumber;
const int EquipmentConfig::kCanSmeltFieldNumber;
const int EquipmentConfig::kSellPriceFieldNumber;
const int EquipmentConfig::kQualityFieldNumber;
const int EquipmentConfig::kBaseAttrTypeFieldNumber;
const int EquipmentConfig::kCurrencyTypeFieldNumber;
const int EquipmentConfig::kCardNameFieldNumber;
const int EquipmentConfig::kEquipPicFieldNumber;
const int EquipmentConfig::kIdFieldNumber;
const int EquipmentConfig::kBaseAttrFieldNumber;
const int EquipmentConfig::kEquipTypeFieldNumber;
const int EquipmentConfig::kDependPropFieldNumber;
const int EquipmentConfig::kRalateStageFieldNumber;
const int EquipmentConfig::kEquipIconFieldNumber;
const int EquipmentConfig::kNameFieldNumber;
const int EquipmentConfig::kSmeltDataFieldNumber;
const int EquipmentConfig::kXilianPropFieldNumber;
const int EquipmentConfig::kRelateUnitFieldNumber;
const int EquipmentConfig::kIsbaseFieldNumber;
const int EquipmentConfig::kRandomPropFieldNumber;
#endif  // !_MSC_VER

EquipmentConfig::EquipmentConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentConfig::InitAsDefaultInstance() {
}

EquipmentConfig::EquipmentConfig(const EquipmentConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentConfig::SharedCtor() {
  _cached_size_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  base_prop_ = 0;
  total_need_exp_ = 0;
  smelt_currency_type_ = 0;
  improve_attr_ = 0;
  equip_root_ = 0;
  smelt_cost_ = 0;
  rare_ = 0;
  equip_rank_ = 0;
  upgrade_equip_id_ = 0;
  root_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  can_smelt_ = 0;
  sell_price_ = 0;
  quality_ = 0;
  base_attr_type_ = 0;
  currency_type_ = 0;
  card_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equip_pic_ = 0;
  id_ = 0;
  base_attr_ = 0;
  equip_type_ = 0;
  depend_prop_ = 0;
  ralate_stage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equip_icon_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xilian_prop_ = 0;
  relate_unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isbase_ = 0;
  random_prop_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentConfig::~EquipmentConfig() {
  SharedDtor();
}

void EquipmentConfig::SharedDtor() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (root_name_ != &::google::protobuf::internal::kEmptyString) {
    delete root_name_;
  }
  if (card_name_ != &::google::protobuf::internal::kEmptyString) {
    delete card_name_;
  }
  if (ralate_stage_ != &::google::protobuf::internal::kEmptyString) {
    delete ralate_stage_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (relate_unit_ != &::google::protobuf::internal::kEmptyString) {
    delete relate_unit_;
  }
  if (this != default_instance_) {
  }
}

void EquipmentConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentConfig_descriptor_;
}

const EquipmentConfig& EquipmentConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentConfig_2eproto();
  return *default_instance_;
}

EquipmentConfig* EquipmentConfig::default_instance_ = NULL;

EquipmentConfig* EquipmentConfig::New() const {
  return new EquipmentConfig;
}

void EquipmentConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    base_prop_ = 0;
    total_need_exp_ = 0;
    smelt_currency_type_ = 0;
    improve_attr_ = 0;
    equip_root_ = 0;
    smelt_cost_ = 0;
    rare_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    equip_rank_ = 0;
    upgrade_equip_id_ = 0;
    if (has_root_name()) {
      if (root_name_ != &::google::protobuf::internal::kEmptyString) {
        root_name_->clear();
      }
    }
    can_smelt_ = 0;
    sell_price_ = 0;
    quality_ = 0;
    base_attr_type_ = 0;
    currency_type_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_card_name()) {
      if (card_name_ != &::google::protobuf::internal::kEmptyString) {
        card_name_->clear();
      }
    }
    equip_pic_ = 0;
    id_ = 0;
    base_attr_ = 0;
    equip_type_ = 0;
    depend_prop_ = 0;
    if (has_ralate_stage()) {
      if (ralate_stage_ != &::google::protobuf::internal::kEmptyString) {
        ralate_stage_->clear();
      }
    }
    equip_icon_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    xilian_prop_ = 0;
    if (has_relate_unit()) {
      if (relate_unit_ != &::google::protobuf::internal::kEmptyString) {
        relate_unit_->clear();
      }
    }
    isbase_ = 0;
    random_prop_ = 0;
  }
  smelt_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isbase;
        break;
      }

      // optional int32 isbase = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isbase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isbase_)));
          set_has_isbase();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equip_type;
        break;
      }

      // optional int32 equip_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_type_)));
          set_has_equip_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_equip_root;
        break;
      }

      // optional int32 equip_root = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_root:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_root_)));
          set_has_equip_root();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_root_name;
        break;
      }

      // optional string root_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_root_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_root_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->root_name().data(), this->root_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_card_name;
        break;
      }

      // optional string card_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->card_name().data(), this->card_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rare;
        break;
      }

      // optional int32 rare = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rare:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rare_)));
          set_has_rare();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_equip_rank;
        break;
      }

      // optional int32 equip_rank = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_rank_)));
          set_has_equip_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_quality;
        break;
      }

      // optional int32 quality = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_name;
        break;
      }

      // optional string name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_description;
        break;
      }

      // optional string description = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_relate_unit;
        break;
      }

      // optional string relate_unit = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relate_unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relate_unit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->relate_unit().data(), this->relate_unit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_ralate_stage;
        break;
      }

      // optional string ralate_stage = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ralate_stage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ralate_stage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ralate_stage().data(), this->ralate_stage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_equip_pic;
        break;
      }

      // optional int32 equip_pic = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_pic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_pic_)));
          set_has_equip_pic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_equip_icon;
        break;
      }

      // optional int32 equip_icon = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_icon_)));
          set_has_equip_icon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_base_attr_type;
        break;
      }

      // optional int32 base_attr_type = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_attr_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_attr_type_)));
          set_has_base_attr_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_base_attr;
        break;
      }

      // optional int32 base_attr = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_attr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_attr_)));
          set_has_base_attr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_improve_attr;
        break;
      }

      // optional int32 improve_attr = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_improve_attr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &improve_attr_)));
          set_has_improve_attr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_base_prop;
        break;
      }

      // optional int32 base_prop = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_prop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_prop_)));
          set_has_base_prop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_random_prop;
        break;
      }

      // optional int32 random_prop = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_random_prop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &random_prop_)));
          set_has_random_prop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_depend_prop;
        break;
      }

      // optional int32 depend_prop = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_depend_prop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depend_prop_)));
          set_has_depend_prop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_currency_type;
        break;
      }

      // optional int32 currency_type = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currency_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_type_)));
          set_has_currency_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_sell_price;
        break;
      }

      // optional int32 sell_price = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sell_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sell_price_)));
          set_has_sell_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_can_smelt;
        break;
      }

      // optional int32 can_smelt = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_smelt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_smelt_)));
          set_has_can_smelt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_smelt_currency_type;
        break;
      }

      // optional int32 smelt_currency_type = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smelt_currency_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smelt_currency_type_)));
          set_has_smelt_currency_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_smelt_cost;
        break;
      }

      // optional int32 smelt_cost = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smelt_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smelt_cost_)));
          set_has_smelt_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_smelt_data;
        break;
      }

      // repeated int32 smelt_data = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smelt_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 216, input, this->mutable_smelt_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_smelt_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_smelt_data;
        if (input->ExpectTag(224)) goto parse_upgrade_equip_id;
        break;
      }

      // optional int32 upgrade_equip_id = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_equip_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_equip_id_)));
          set_has_upgrade_equip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_total_need_exp;
        break;
      }

      // optional int32 total_need_exp = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_need_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_need_exp_)));
          set_has_total_need_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_xilian_prop;
        break;
      }

      // optional int32 xilian_prop = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xilian_prop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xilian_prop_)));
          set_has_xilian_prop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 isbase = 2;
  if (has_isbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isbase(), output);
  }

  // optional int32 equip_type = 3;
  if (has_equip_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->equip_type(), output);
  }

  // optional int32 equip_root = 4;
  if (has_equip_root()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->equip_root(), output);
  }

  // optional string root_name = 5;
  if (has_root_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->root_name().data(), this->root_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->root_name(), output);
  }

  // optional string card_name = 6;
  if (has_card_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_name().data(), this->card_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->card_name(), output);
  }

  // optional int32 rare = 7;
  if (has_rare()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->rare(), output);
  }

  // optional int32 equip_rank = 8;
  if (has_equip_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->equip_rank(), output);
  }

  // optional int32 quality = 9;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->quality(), output);
  }

  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->name(), output);
  }

  // optional string description = 11;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->description(), output);
  }

  // optional string relate_unit = 12;
  if (has_relate_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->relate_unit().data(), this->relate_unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->relate_unit(), output);
  }

  // optional string ralate_stage = 13;
  if (has_ralate_stage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ralate_stage().data(), this->ralate_stage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->ralate_stage(), output);
  }

  // optional int32 equip_pic = 14;
  if (has_equip_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->equip_pic(), output);
  }

  // optional int32 equip_icon = 15;
  if (has_equip_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->equip_icon(), output);
  }

  // optional int32 base_attr_type = 16;
  if (has_base_attr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->base_attr_type(), output);
  }

  // optional int32 base_attr = 17;
  if (has_base_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->base_attr(), output);
  }

  // optional int32 improve_attr = 18;
  if (has_improve_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->improve_attr(), output);
  }

  // optional int32 base_prop = 19;
  if (has_base_prop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->base_prop(), output);
  }

  // optional int32 random_prop = 20;
  if (has_random_prop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->random_prop(), output);
  }

  // optional int32 depend_prop = 21;
  if (has_depend_prop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->depend_prop(), output);
  }

  // optional int32 currency_type = 22;
  if (has_currency_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->currency_type(), output);
  }

  // optional int32 sell_price = 23;
  if (has_sell_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->sell_price(), output);
  }

  // optional int32 can_smelt = 24;
  if (has_can_smelt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->can_smelt(), output);
  }

  // optional int32 smelt_currency_type = 25;
  if (has_smelt_currency_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->smelt_currency_type(), output);
  }

  // optional int32 smelt_cost = 26;
  if (has_smelt_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->smelt_cost(), output);
  }

  // repeated int32 smelt_data = 27;
  for (int i = 0; i < this->smelt_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      27, this->smelt_data(i), output);
  }

  // optional int32 upgrade_equip_id = 28;
  if (has_upgrade_equip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->upgrade_equip_id(), output);
  }

  // optional int32 total_need_exp = 29;
  if (has_total_need_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->total_need_exp(), output);
  }

  // optional int32 xilian_prop = 30;
  if (has_xilian_prop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->xilian_prop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 isbase = 2;
  if (has_isbase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isbase(), target);
  }

  // optional int32 equip_type = 3;
  if (has_equip_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->equip_type(), target);
  }

  // optional int32 equip_root = 4;
  if (has_equip_root()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->equip_root(), target);
  }

  // optional string root_name = 5;
  if (has_root_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->root_name().data(), this->root_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->root_name(), target);
  }

  // optional string card_name = 6;
  if (has_card_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_name().data(), this->card_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->card_name(), target);
  }

  // optional int32 rare = 7;
  if (has_rare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->rare(), target);
  }

  // optional int32 equip_rank = 8;
  if (has_equip_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->equip_rank(), target);
  }

  // optional int32 quality = 9;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->quality(), target);
  }

  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional string description = 11;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->description(), target);
  }

  // optional string relate_unit = 12;
  if (has_relate_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->relate_unit().data(), this->relate_unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->relate_unit(), target);
  }

  // optional string ralate_stage = 13;
  if (has_ralate_stage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ralate_stage().data(), this->ralate_stage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->ralate_stage(), target);
  }

  // optional int32 equip_pic = 14;
  if (has_equip_pic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->equip_pic(), target);
  }

  // optional int32 equip_icon = 15;
  if (has_equip_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->equip_icon(), target);
  }

  // optional int32 base_attr_type = 16;
  if (has_base_attr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->base_attr_type(), target);
  }

  // optional int32 base_attr = 17;
  if (has_base_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->base_attr(), target);
  }

  // optional int32 improve_attr = 18;
  if (has_improve_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->improve_attr(), target);
  }

  // optional int32 base_prop = 19;
  if (has_base_prop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->base_prop(), target);
  }

  // optional int32 random_prop = 20;
  if (has_random_prop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->random_prop(), target);
  }

  // optional int32 depend_prop = 21;
  if (has_depend_prop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->depend_prop(), target);
  }

  // optional int32 currency_type = 22;
  if (has_currency_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->currency_type(), target);
  }

  // optional int32 sell_price = 23;
  if (has_sell_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->sell_price(), target);
  }

  // optional int32 can_smelt = 24;
  if (has_can_smelt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->can_smelt(), target);
  }

  // optional int32 smelt_currency_type = 25;
  if (has_smelt_currency_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->smelt_currency_type(), target);
  }

  // optional int32 smelt_cost = 26;
  if (has_smelt_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->smelt_cost(), target);
  }

  // repeated int32 smelt_data = 27;
  for (int i = 0; i < this->smelt_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(27, this->smelt_data(i), target);
  }

  // optional int32 upgrade_equip_id = 28;
  if (has_upgrade_equip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->upgrade_equip_id(), target);
  }

  // optional int32 total_need_exp = 29;
  if (has_total_need_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->total_need_exp(), target);
  }

  // optional int32 xilian_prop = 30;
  if (has_xilian_prop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->xilian_prop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string description = 11;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional int32 base_prop = 19;
    if (has_base_prop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_prop());
    }

    // optional int32 total_need_exp = 29;
    if (has_total_need_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_need_exp());
    }

    // optional int32 smelt_currency_type = 25;
    if (has_smelt_currency_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->smelt_currency_type());
    }

    // optional int32 improve_attr = 18;
    if (has_improve_attr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->improve_attr());
    }

    // optional int32 equip_root = 4;
    if (has_equip_root()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_root());
    }

    // optional int32 smelt_cost = 26;
    if (has_smelt_cost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->smelt_cost());
    }

    // optional int32 rare = 7;
    if (has_rare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rare());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 equip_rank = 8;
    if (has_equip_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_rank());
    }

    // optional int32 upgrade_equip_id = 28;
    if (has_upgrade_equip_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_equip_id());
    }

    // optional string root_name = 5;
    if (has_root_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->root_name());
    }

    // optional int32 can_smelt = 24;
    if (has_can_smelt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_smelt());
    }

    // optional int32 sell_price = 23;
    if (has_sell_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sell_price());
    }

    // optional int32 quality = 9;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 base_attr_type = 16;
    if (has_base_attr_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_attr_type());
    }

    // optional int32 currency_type = 22;
    if (has_currency_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency_type());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string card_name = 6;
    if (has_card_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_name());
    }

    // optional int32 equip_pic = 14;
    if (has_equip_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_pic());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 base_attr = 17;
    if (has_base_attr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_attr());
    }

    // optional int32 equip_type = 3;
    if (has_equip_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_type());
    }

    // optional int32 depend_prop = 21;
    if (has_depend_prop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depend_prop());
    }

    // optional string ralate_stage = 13;
    if (has_ralate_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ralate_stage());
    }

    // optional int32 equip_icon = 15;
    if (has_equip_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_icon());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 xilian_prop = 30;
    if (has_xilian_prop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xilian_prop());
    }

    // optional string relate_unit = 12;
    if (has_relate_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->relate_unit());
    }

    // optional int32 isbase = 2;
    if (has_isbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isbase());
    }

    // optional int32 random_prop = 20;
    if (has_random_prop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->random_prop());
    }

  }
  // repeated int32 smelt_data = 27;
  {
    int data_size = 0;
    for (int i = 0; i < this->smelt_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->smelt_data(i));
    }
    total_size += 2 * this->smelt_data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentConfig::MergeFrom(const EquipmentConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  smelt_data_.MergeFrom(from.smelt_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_base_prop()) {
      set_base_prop(from.base_prop());
    }
    if (from.has_total_need_exp()) {
      set_total_need_exp(from.total_need_exp());
    }
    if (from.has_smelt_currency_type()) {
      set_smelt_currency_type(from.smelt_currency_type());
    }
    if (from.has_improve_attr()) {
      set_improve_attr(from.improve_attr());
    }
    if (from.has_equip_root()) {
      set_equip_root(from.equip_root());
    }
    if (from.has_smelt_cost()) {
      set_smelt_cost(from.smelt_cost());
    }
    if (from.has_rare()) {
      set_rare(from.rare());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_equip_rank()) {
      set_equip_rank(from.equip_rank());
    }
    if (from.has_upgrade_equip_id()) {
      set_upgrade_equip_id(from.upgrade_equip_id());
    }
    if (from.has_root_name()) {
      set_root_name(from.root_name());
    }
    if (from.has_can_smelt()) {
      set_can_smelt(from.can_smelt());
    }
    if (from.has_sell_price()) {
      set_sell_price(from.sell_price());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_base_attr_type()) {
      set_base_attr_type(from.base_attr_type());
    }
    if (from.has_currency_type()) {
      set_currency_type(from.currency_type());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_card_name()) {
      set_card_name(from.card_name());
    }
    if (from.has_equip_pic()) {
      set_equip_pic(from.equip_pic());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_base_attr()) {
      set_base_attr(from.base_attr());
    }
    if (from.has_equip_type()) {
      set_equip_type(from.equip_type());
    }
    if (from.has_depend_prop()) {
      set_depend_prop(from.depend_prop());
    }
    if (from.has_ralate_stage()) {
      set_ralate_stage(from.ralate_stage());
    }
    if (from.has_equip_icon()) {
      set_equip_icon(from.equip_icon());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_xilian_prop()) {
      set_xilian_prop(from.xilian_prop());
    }
    if (from.has_relate_unit()) {
      set_relate_unit(from.relate_unit());
    }
    if (from.has_isbase()) {
      set_isbase(from.isbase());
    }
    if (from.has_random_prop()) {
      set_random_prop(from.random_prop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentConfig::CopyFrom(const EquipmentConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentConfig::IsInitialized() const {

  return true;
}

void EquipmentConfig::Swap(EquipmentConfig* other) {
  if (other != this) {
    std::swap(description_, other->description_);
    std::swap(base_prop_, other->base_prop_);
    std::swap(total_need_exp_, other->total_need_exp_);
    std::swap(smelt_currency_type_, other->smelt_currency_type_);
    std::swap(improve_attr_, other->improve_attr_);
    std::swap(equip_root_, other->equip_root_);
    std::swap(smelt_cost_, other->smelt_cost_);
    std::swap(rare_, other->rare_);
    std::swap(equip_rank_, other->equip_rank_);
    std::swap(upgrade_equip_id_, other->upgrade_equip_id_);
    std::swap(root_name_, other->root_name_);
    std::swap(can_smelt_, other->can_smelt_);
    std::swap(sell_price_, other->sell_price_);
    std::swap(quality_, other->quality_);
    std::swap(base_attr_type_, other->base_attr_type_);
    std::swap(currency_type_, other->currency_type_);
    std::swap(card_name_, other->card_name_);
    std::swap(equip_pic_, other->equip_pic_);
    std::swap(id_, other->id_);
    std::swap(base_attr_, other->base_attr_);
    std::swap(equip_type_, other->equip_type_);
    std::swap(depend_prop_, other->depend_prop_);
    std::swap(ralate_stage_, other->ralate_stage_);
    std::swap(equip_icon_, other->equip_icon_);
    std::swap(name_, other->name_);
    smelt_data_.Swap(&other->smelt_data_);
    std::swap(xilian_prop_, other->xilian_prop_);
    std::swap(relate_unit_, other->relate_unit_);
    std::swap(isbase_, other->isbase_);
    std::swap(random_prop_, other->random_prop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentConfig_descriptor_;
  metadata.reflection = EquipmentConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VipInitDataConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "VipInitDataConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* VipInitDataConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VipInitDataConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_VipInitDataConfig_2eproto() {
  protobuf_AddDesc_VipInitDataConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "VipInitDataConfig.proto");
  GOOGLE_CHECK(file != NULL);
  VipInitDataConfig_descriptor_ = file->message_type(0);
  static const int VipInitDataConfig_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInitDataConfig, vip_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInitDataConfig, title_picture_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInitDataConfig, vip_gift_original_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInitDataConfig, vip_gift_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInitDataConfig, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInitDataConfig, pve_skip_free_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInitDataConfig, vip_max_energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInitDataConfig, arena_activity_count_charge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInitDataConfig, daily_refresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInitDataConfig, quick_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInitDataConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInitDataConfig, directions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInitDataConfig, pve_activity_skip_free_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInitDataConfig, pvp_skip_free_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInitDataConfig, moneytree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInitDataConfig, friend_add_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInitDataConfig, vip_gift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInitDataConfig, vip_cultivate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInitDataConfig, boss_skip_free_),
  };
  VipInitDataConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VipInitDataConfig_descriptor_,
      VipInitDataConfig::default_instance_,
      VipInitDataConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInitDataConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInitDataConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VipInitDataConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_VipInitDataConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VipInitDataConfig_descriptor_, &VipInitDataConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_VipInitDataConfig_2eproto() {
  delete VipInitDataConfig::default_instance_;
  delete VipInitDataConfig_reflection_;
}

void protobuf_AddDesc_VipInitDataConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027VipInitDataConfig.proto\022\022DianShiTech.C"
    "onfig\032\025ConfigTypeGroup.proto\"\356\003\n\021VipInit"
    "DataConfig\022\017\n\007vip_exp\030\003 \001(\005\022=\n\020title_pic"
    "ture_id\030\005 \003(\0132#.DianShiTech.Config.Confi"
    "gTypeGroup\022\031\n\021vip_gift_original\030\013 \001(\005\022\026\n"
    "\016vip_gift_price\030\014 \001(\005\022\021\n\tvip_level\030\002 \001(\005"
    "\022\025\n\rpve_skip_free\030\017 \001(\005\022\026\n\016vip_max_energ"
    "y\030\r \001(\005\022#\n\033arena_activity_count_charge\030\022"
    " \001(\005\022\025\n\rdaily_refresh\030\004 \001(\005\022\023\n\013quick_sta"
    "ge\030\010 \001(\005\022\n\n\002id\030\001 \001(\005\022\022\n\ndirections\030\023 \001(\t"
    "\022\036\n\026pve_activity_skip_free\030\021 \001(\005\022\025\n\rpvp_"
    "skip_free\030\020 \001(\005\022\021\n\tmoneytree\030\007 \001(\005\022\030\n\020fr"
    "iend_add_count\030\006 \001(\005\022\020\n\010vip_gift\030\n \001(\005\022\025"
    "\n\rvip_cultivate\030\t \001(\005\022\026\n\016boss_skip_free\030"
    "\016 \001(\005", 565);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "VipInitDataConfig.proto", &protobuf_RegisterTypes);
  VipInitDataConfig::default_instance_ = new VipInitDataConfig();
  VipInitDataConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_VipInitDataConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_VipInitDataConfig_2eproto {
  StaticDescriptorInitializer_VipInitDataConfig_2eproto() {
    protobuf_AddDesc_VipInitDataConfig_2eproto();
  }
} static_descriptor_initializer_VipInitDataConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int VipInitDataConfig::kVipExpFieldNumber;
const int VipInitDataConfig::kTitlePictureIdFieldNumber;
const int VipInitDataConfig::kVipGiftOriginalFieldNumber;
const int VipInitDataConfig::kVipGiftPriceFieldNumber;
const int VipInitDataConfig::kVipLevelFieldNumber;
const int VipInitDataConfig::kPveSkipFreeFieldNumber;
const int VipInitDataConfig::kVipMaxEnergyFieldNumber;
const int VipInitDataConfig::kArenaActivityCountChargeFieldNumber;
const int VipInitDataConfig::kDailyRefreshFieldNumber;
const int VipInitDataConfig::kQuickStageFieldNumber;
const int VipInitDataConfig::kIdFieldNumber;
const int VipInitDataConfig::kDirectionsFieldNumber;
const int VipInitDataConfig::kPveActivitySkipFreeFieldNumber;
const int VipInitDataConfig::kPvpSkipFreeFieldNumber;
const int VipInitDataConfig::kMoneytreeFieldNumber;
const int VipInitDataConfig::kFriendAddCountFieldNumber;
const int VipInitDataConfig::kVipGiftFieldNumber;
const int VipInitDataConfig::kVipCultivateFieldNumber;
const int VipInitDataConfig::kBossSkipFreeFieldNumber;
#endif  // !_MSC_VER

VipInitDataConfig::VipInitDataConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VipInitDataConfig::InitAsDefaultInstance() {
}

VipInitDataConfig::VipInitDataConfig(const VipInitDataConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VipInitDataConfig::SharedCtor() {
  _cached_size_ = 0;
  vip_exp_ = 0;
  vip_gift_original_ = 0;
  vip_gift_price_ = 0;
  vip_level_ = 0;
  pve_skip_free_ = 0;
  vip_max_energy_ = 0;
  arena_activity_count_charge_ = 0;
  daily_refresh_ = 0;
  quick_stage_ = 0;
  id_ = 0;
  directions_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pve_activity_skip_free_ = 0;
  pvp_skip_free_ = 0;
  moneytree_ = 0;
  friend_add_count_ = 0;
  vip_gift_ = 0;
  vip_cultivate_ = 0;
  boss_skip_free_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VipInitDataConfig::~VipInitDataConfig() {
  SharedDtor();
}

void VipInitDataConfig::SharedDtor() {
  if (directions_ != &::google::protobuf::internal::kEmptyString) {
    delete directions_;
  }
  if (this != default_instance_) {
  }
}

void VipInitDataConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VipInitDataConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VipInitDataConfig_descriptor_;
}

const VipInitDataConfig& VipInitDataConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VipInitDataConfig_2eproto();
  return *default_instance_;
}

VipInitDataConfig* VipInitDataConfig::default_instance_ = NULL;

VipInitDataConfig* VipInitDataConfig::New() const {
  return new VipInitDataConfig;
}

void VipInitDataConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vip_exp_ = 0;
    vip_gift_original_ = 0;
    vip_gift_price_ = 0;
    vip_level_ = 0;
    pve_skip_free_ = 0;
    vip_max_energy_ = 0;
    arena_activity_count_charge_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    daily_refresh_ = 0;
    quick_stage_ = 0;
    id_ = 0;
    if (has_directions()) {
      if (directions_ != &::google::protobuf::internal::kEmptyString) {
        directions_->clear();
      }
    }
    pve_activity_skip_free_ = 0;
    pvp_skip_free_ = 0;
    moneytree_ = 0;
    friend_add_count_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    vip_gift_ = 0;
    vip_cultivate_ = 0;
    boss_skip_free_ = 0;
  }
  title_picture_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VipInitDataConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vip_level;
        break;
      }

      // optional int32 vip_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vip_exp;
        break;
      }

      // optional int32 vip_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_exp_)));
          set_has_vip_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_daily_refresh;
        break;
      }

      // optional int32 daily_refresh = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_refresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daily_refresh_)));
          set_has_daily_refresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_title_picture_id;
        break;
      }

      // repeated .DianShiTech.Config.ConfigTypeGroup title_picture_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title_picture_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_title_picture_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_title_picture_id;
        if (input->ExpectTag(48)) goto parse_friend_add_count;
        break;
      }

      // optional int32 friend_add_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_add_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friend_add_count_)));
          set_has_friend_add_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_moneytree;
        break;
      }

      // optional int32 moneytree = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneytree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moneytree_)));
          set_has_moneytree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_quick_stage;
        break;
      }

      // optional int32 quick_stage = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quick_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quick_stage_)));
          set_has_quick_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_vip_cultivate;
        break;
      }

      // optional int32 vip_cultivate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_cultivate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_cultivate_)));
          set_has_vip_cultivate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_vip_gift;
        break;
      }

      // optional int32 vip_gift = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_gift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_gift_)));
          set_has_vip_gift();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_vip_gift_original;
        break;
      }

      // optional int32 vip_gift_original = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_gift_original:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_gift_original_)));
          set_has_vip_gift_original();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_vip_gift_price;
        break;
      }

      // optional int32 vip_gift_price = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_gift_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_gift_price_)));
          set_has_vip_gift_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_vip_max_energy;
        break;
      }

      // optional int32 vip_max_energy = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_max_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_max_energy_)));
          set_has_vip_max_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_boss_skip_free;
        break;
      }

      // optional int32 boss_skip_free = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_skip_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_skip_free_)));
          set_has_boss_skip_free();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_pve_skip_free;
        break;
      }

      // optional int32 pve_skip_free = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pve_skip_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pve_skip_free_)));
          set_has_pve_skip_free();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_pvp_skip_free;
        break;
      }

      // optional int32 pvp_skip_free = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvp_skip_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvp_skip_free_)));
          set_has_pvp_skip_free();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_pve_activity_skip_free;
        break;
      }

      // optional int32 pve_activity_skip_free = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pve_activity_skip_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pve_activity_skip_free_)));
          set_has_pve_activity_skip_free();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_arena_activity_count_charge;
        break;
      }

      // optional int32 arena_activity_count_charge = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_activity_count_charge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arena_activity_count_charge_)));
          set_has_arena_activity_count_charge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_directions;
        break;
      }

      // optional string directions = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_directions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_directions()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->directions().data(), this->directions().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VipInitDataConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 vip_level = 2;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vip_level(), output);
  }

  // optional int32 vip_exp = 3;
  if (has_vip_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vip_exp(), output);
  }

  // optional int32 daily_refresh = 4;
  if (has_daily_refresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->daily_refresh(), output);
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup title_picture_id = 5;
  for (int i = 0; i < this->title_picture_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->title_picture_id(i), output);
  }

  // optional int32 friend_add_count = 6;
  if (has_friend_add_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->friend_add_count(), output);
  }

  // optional int32 moneytree = 7;
  if (has_moneytree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->moneytree(), output);
  }

  // optional int32 quick_stage = 8;
  if (has_quick_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->quick_stage(), output);
  }

  // optional int32 vip_cultivate = 9;
  if (has_vip_cultivate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->vip_cultivate(), output);
  }

  // optional int32 vip_gift = 10;
  if (has_vip_gift()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->vip_gift(), output);
  }

  // optional int32 vip_gift_original = 11;
  if (has_vip_gift_original()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->vip_gift_original(), output);
  }

  // optional int32 vip_gift_price = 12;
  if (has_vip_gift_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->vip_gift_price(), output);
  }

  // optional int32 vip_max_energy = 13;
  if (has_vip_max_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->vip_max_energy(), output);
  }

  // optional int32 boss_skip_free = 14;
  if (has_boss_skip_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->boss_skip_free(), output);
  }

  // optional int32 pve_skip_free = 15;
  if (has_pve_skip_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->pve_skip_free(), output);
  }

  // optional int32 pvp_skip_free = 16;
  if (has_pvp_skip_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->pvp_skip_free(), output);
  }

  // optional int32 pve_activity_skip_free = 17;
  if (has_pve_activity_skip_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->pve_activity_skip_free(), output);
  }

  // optional int32 arena_activity_count_charge = 18;
  if (has_arena_activity_count_charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->arena_activity_count_charge(), output);
  }

  // optional string directions = 19;
  if (has_directions()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directions().data(), this->directions().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->directions(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VipInitDataConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 vip_level = 2;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vip_level(), target);
  }

  // optional int32 vip_exp = 3;
  if (has_vip_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vip_exp(), target);
  }

  // optional int32 daily_refresh = 4;
  if (has_daily_refresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->daily_refresh(), target);
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup title_picture_id = 5;
  for (int i = 0; i < this->title_picture_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->title_picture_id(i), target);
  }

  // optional int32 friend_add_count = 6;
  if (has_friend_add_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->friend_add_count(), target);
  }

  // optional int32 moneytree = 7;
  if (has_moneytree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->moneytree(), target);
  }

  // optional int32 quick_stage = 8;
  if (has_quick_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->quick_stage(), target);
  }

  // optional int32 vip_cultivate = 9;
  if (has_vip_cultivate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->vip_cultivate(), target);
  }

  // optional int32 vip_gift = 10;
  if (has_vip_gift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->vip_gift(), target);
  }

  // optional int32 vip_gift_original = 11;
  if (has_vip_gift_original()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->vip_gift_original(), target);
  }

  // optional int32 vip_gift_price = 12;
  if (has_vip_gift_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->vip_gift_price(), target);
  }

  // optional int32 vip_max_energy = 13;
  if (has_vip_max_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->vip_max_energy(), target);
  }

  // optional int32 boss_skip_free = 14;
  if (has_boss_skip_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->boss_skip_free(), target);
  }

  // optional int32 pve_skip_free = 15;
  if (has_pve_skip_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->pve_skip_free(), target);
  }

  // optional int32 pvp_skip_free = 16;
  if (has_pvp_skip_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->pvp_skip_free(), target);
  }

  // optional int32 pve_activity_skip_free = 17;
  if (has_pve_activity_skip_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->pve_activity_skip_free(), target);
  }

  // optional int32 arena_activity_count_charge = 18;
  if (has_arena_activity_count_charge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->arena_activity_count_charge(), target);
  }

  // optional string directions = 19;
  if (has_directions()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directions().data(), this->directions().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->directions(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VipInitDataConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 vip_exp = 3;
    if (has_vip_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_exp());
    }

    // optional int32 vip_gift_original = 11;
    if (has_vip_gift_original()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_gift_original());
    }

    // optional int32 vip_gift_price = 12;
    if (has_vip_gift_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_gift_price());
    }

    // optional int32 vip_level = 2;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }

    // optional int32 pve_skip_free = 15;
    if (has_pve_skip_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pve_skip_free());
    }

    // optional int32 vip_max_energy = 13;
    if (has_vip_max_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_max_energy());
    }

    // optional int32 arena_activity_count_charge = 18;
    if (has_arena_activity_count_charge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arena_activity_count_charge());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 daily_refresh = 4;
    if (has_daily_refresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daily_refresh());
    }

    // optional int32 quick_stage = 8;
    if (has_quick_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quick_stage());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string directions = 19;
    if (has_directions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->directions());
    }

    // optional int32 pve_activity_skip_free = 17;
    if (has_pve_activity_skip_free()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pve_activity_skip_free());
    }

    // optional int32 pvp_skip_free = 16;
    if (has_pvp_skip_free()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvp_skip_free());
    }

    // optional int32 moneytree = 7;
    if (has_moneytree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moneytree());
    }

    // optional int32 friend_add_count = 6;
    if (has_friend_add_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friend_add_count());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 vip_gift = 10;
    if (has_vip_gift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_gift());
    }

    // optional int32 vip_cultivate = 9;
    if (has_vip_cultivate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_cultivate());
    }

    // optional int32 boss_skip_free = 14;
    if (has_boss_skip_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_skip_free());
    }

  }
  // repeated .DianShiTech.Config.ConfigTypeGroup title_picture_id = 5;
  total_size += 1 * this->title_picture_id_size();
  for (int i = 0; i < this->title_picture_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->title_picture_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VipInitDataConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VipInitDataConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VipInitDataConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VipInitDataConfig::MergeFrom(const VipInitDataConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  title_picture_id_.MergeFrom(from.title_picture_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vip_exp()) {
      set_vip_exp(from.vip_exp());
    }
    if (from.has_vip_gift_original()) {
      set_vip_gift_original(from.vip_gift_original());
    }
    if (from.has_vip_gift_price()) {
      set_vip_gift_price(from.vip_gift_price());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_pve_skip_free()) {
      set_pve_skip_free(from.pve_skip_free());
    }
    if (from.has_vip_max_energy()) {
      set_vip_max_energy(from.vip_max_energy());
    }
    if (from.has_arena_activity_count_charge()) {
      set_arena_activity_count_charge(from.arena_activity_count_charge());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_daily_refresh()) {
      set_daily_refresh(from.daily_refresh());
    }
    if (from.has_quick_stage()) {
      set_quick_stage(from.quick_stage());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_directions()) {
      set_directions(from.directions());
    }
    if (from.has_pve_activity_skip_free()) {
      set_pve_activity_skip_free(from.pve_activity_skip_free());
    }
    if (from.has_pvp_skip_free()) {
      set_pvp_skip_free(from.pvp_skip_free());
    }
    if (from.has_moneytree()) {
      set_moneytree(from.moneytree());
    }
    if (from.has_friend_add_count()) {
      set_friend_add_count(from.friend_add_count());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vip_gift()) {
      set_vip_gift(from.vip_gift());
    }
    if (from.has_vip_cultivate()) {
      set_vip_cultivate(from.vip_cultivate());
    }
    if (from.has_boss_skip_free()) {
      set_boss_skip_free(from.boss_skip_free());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VipInitDataConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VipInitDataConfig::CopyFrom(const VipInitDataConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VipInitDataConfig::IsInitialized() const {

  return true;
}

void VipInitDataConfig::Swap(VipInitDataConfig* other) {
  if (other != this) {
    std::swap(vip_exp_, other->vip_exp_);
    title_picture_id_.Swap(&other->title_picture_id_);
    std::swap(vip_gift_original_, other->vip_gift_original_);
    std::swap(vip_gift_price_, other->vip_gift_price_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(pve_skip_free_, other->pve_skip_free_);
    std::swap(vip_max_energy_, other->vip_max_energy_);
    std::swap(arena_activity_count_charge_, other->arena_activity_count_charge_);
    std::swap(daily_refresh_, other->daily_refresh_);
    std::swap(quick_stage_, other->quick_stage_);
    std::swap(id_, other->id_);
    std::swap(directions_, other->directions_);
    std::swap(pve_activity_skip_free_, other->pve_activity_skip_free_);
    std::swap(pvp_skip_free_, other->pvp_skip_free_);
    std::swap(moneytree_, other->moneytree_);
    std::swap(friend_add_count_, other->friend_add_count_);
    std::swap(vip_gift_, other->vip_gift_);
    std::swap(vip_cultivate_, other->vip_cultivate_);
    std::swap(boss_skip_free_, other->boss_skip_free_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VipInitDataConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VipInitDataConfig_descriptor_;
  metadata.reflection = VipInitDataConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

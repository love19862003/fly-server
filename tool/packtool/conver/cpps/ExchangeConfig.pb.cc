// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExchangeConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ExchangeConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* ExchangeConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ExchangeConfig_2eproto() {
  protobuf_AddDesc_ExchangeConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ExchangeConfig.proto");
  GOOGLE_CHECK(file != NULL);
  ExchangeConfig_descriptor_ = file->message_type(0);
  static const int ExchangeConfig_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeConfig, exchange_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeConfig, bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeConfig, close_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeConfig, open_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeConfig, daily_exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeConfig, exchange_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeConfig, activity_id_),
  };
  ExchangeConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeConfig_descriptor_,
      ExchangeConfig::default_instance_,
      ExchangeConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ExchangeConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeConfig_descriptor_, &ExchangeConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ExchangeConfig_2eproto() {
  delete ExchangeConfig::default_instance_;
  delete ExchangeConfig_reflection_;
}

void protobuf_AddDesc_ExchangeConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ExchangeConfig.proto\022\022DianShiTech.Conf"
    "ig\032\025ConfigTypeGroup.proto\"\367\001\n\016ExchangeCo"
    "nfig\022:\n\rexchange_item\030\004 \003(\0132#.DianShiTec"
    "h.Config.ConfigTypeGroup\0222\n\005bonus\030\005 \003(\0132"
    "#.DianShiTech.Config.ConfigTypeGroup\022\022\n\n"
    "close_time\030\007 \001(\005\022\021\n\topen_time\030\006 \001(\005\022\n\n\002i"
    "d\030\001 \001(\005\022\026\n\016daily_exchange\030\010 \001(\005\022\025\n\rexcha"
    "nge_name\030\003 \001(\t\022\023\n\013activity_id\030\002 \001(\005", 315);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ExchangeConfig.proto", &protobuf_RegisterTypes);
  ExchangeConfig::default_instance_ = new ExchangeConfig();
  ExchangeConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ExchangeConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ExchangeConfig_2eproto {
  StaticDescriptorInitializer_ExchangeConfig_2eproto() {
    protobuf_AddDesc_ExchangeConfig_2eproto();
  }
} static_descriptor_initializer_ExchangeConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ExchangeConfig::kExchangeItemFieldNumber;
const int ExchangeConfig::kBonusFieldNumber;
const int ExchangeConfig::kCloseTimeFieldNumber;
const int ExchangeConfig::kOpenTimeFieldNumber;
const int ExchangeConfig::kIdFieldNumber;
const int ExchangeConfig::kDailyExchangeFieldNumber;
const int ExchangeConfig::kExchangeNameFieldNumber;
const int ExchangeConfig::kActivityIdFieldNumber;
#endif  // !_MSC_VER

ExchangeConfig::ExchangeConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExchangeConfig::InitAsDefaultInstance() {
}

ExchangeConfig::ExchangeConfig(const ExchangeConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExchangeConfig::SharedCtor() {
  _cached_size_ = 0;
  close_time_ = 0;
  open_time_ = 0;
  id_ = 0;
  daily_exchange_ = 0;
  exchange_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  activity_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeConfig::~ExchangeConfig() {
  SharedDtor();
}

void ExchangeConfig::SharedDtor() {
  if (exchange_name_ != &::google::protobuf::internal::kEmptyString) {
    delete exchange_name_;
  }
  if (this != default_instance_) {
  }
}

void ExchangeConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeConfig_descriptor_;
}

const ExchangeConfig& ExchangeConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExchangeConfig_2eproto();
  return *default_instance_;
}

ExchangeConfig* ExchangeConfig::default_instance_ = NULL;

ExchangeConfig* ExchangeConfig::New() const {
  return new ExchangeConfig;
}

void ExchangeConfig::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    close_time_ = 0;
    open_time_ = 0;
    id_ = 0;
    daily_exchange_ = 0;
    if (has_exchange_name()) {
      if (exchange_name_ != &::google::protobuf::internal::kEmptyString) {
        exchange_name_->clear();
      }
    }
    activity_id_ = 0;
  }
  exchange_item_.Clear();
  bonus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activity_id;
        break;
      }

      // optional int32 activity_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_exchange_name;
        break;
      }

      // optional string exchange_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exchange_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchange_name().data(), this->exchange_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_exchange_item;
        break;
      }

      // repeated .DianShiTech.Config.ConfigTypeGroup exchange_item = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exchange_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exchange_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_exchange_item;
        if (input->ExpectTag(42)) goto parse_bonus;
        break;
      }

      // repeated .DianShiTech.Config.ConfigTypeGroup bonus = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bonus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bonus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bonus;
        if (input->ExpectTag(48)) goto parse_open_time;
        break;
      }

      // optional int32 open_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_time_)));
          set_has_open_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_close_time;
        break;
      }

      // optional int32 close_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_close_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &close_time_)));
          set_has_close_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_daily_exchange;
        break;
      }

      // optional int32 daily_exchange = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_exchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daily_exchange_)));
          set_has_daily_exchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExchangeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 activity_id = 2;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->activity_id(), output);
  }

  // optional string exchange_name = 3;
  if (has_exchange_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchange_name().data(), this->exchange_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->exchange_name(), output);
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup exchange_item = 4;
  for (int i = 0; i < this->exchange_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->exchange_item(i), output);
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup bonus = 5;
  for (int i = 0; i < this->bonus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bonus(i), output);
  }

  // optional int32 open_time = 6;
  if (has_open_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->open_time(), output);
  }

  // optional int32 close_time = 7;
  if (has_close_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->close_time(), output);
  }

  // optional int32 daily_exchange = 8;
  if (has_daily_exchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->daily_exchange(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExchangeConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 activity_id = 2;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->activity_id(), target);
  }

  // optional string exchange_name = 3;
  if (has_exchange_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchange_name().data(), this->exchange_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange_name(), target);
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup exchange_item = 4;
  for (int i = 0; i < this->exchange_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->exchange_item(i), target);
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup bonus = 5;
  for (int i = 0; i < this->bonus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bonus(i), target);
  }

  // optional int32 open_time = 6;
  if (has_open_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->open_time(), target);
  }

  // optional int32 close_time = 7;
  if (has_close_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->close_time(), target);
  }

  // optional int32 daily_exchange = 8;
  if (has_daily_exchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->daily_exchange(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExchangeConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 close_time = 7;
    if (has_close_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->close_time());
    }

    // optional int32 open_time = 6;
    if (has_open_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_time());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 daily_exchange = 8;
    if (has_daily_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daily_exchange());
    }

    // optional string exchange_name = 3;
    if (has_exchange_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange_name());
    }

    // optional int32 activity_id = 2;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_id());
    }

  }
  // repeated .DianShiTech.Config.ConfigTypeGroup exchange_item = 4;
  total_size += 1 * this->exchange_item_size();
  for (int i = 0; i < this->exchange_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exchange_item(i));
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup bonus = 5;
  total_size += 1 * this->bonus_size();
  for (int i = 0; i < this->bonus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bonus(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeConfig::MergeFrom(const ExchangeConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  exchange_item_.MergeFrom(from.exchange_item_);
  bonus_.MergeFrom(from.bonus_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_close_time()) {
      set_close_time(from.close_time());
    }
    if (from.has_open_time()) {
      set_open_time(from.open_time());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_daily_exchange()) {
      set_daily_exchange(from.daily_exchange());
    }
    if (from.has_exchange_name()) {
      set_exchange_name(from.exchange_name());
    }
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeConfig::CopyFrom(const ExchangeConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeConfig::IsInitialized() const {

  return true;
}

void ExchangeConfig::Swap(ExchangeConfig* other) {
  if (other != this) {
    exchange_item_.Swap(&other->exchange_item_);
    bonus_.Swap(&other->bonus_);
    std::swap(close_time_, other->close_time_);
    std::swap(open_time_, other->open_time_);
    std::swap(id_, other->id_);
    std::swap(daily_exchange_, other->daily_exchange_);
    std::swap(exchange_name_, other->exchange_name_);
    std::swap(activity_id_, other->activity_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeConfig_descriptor_;
  metadata.reflection = ExchangeConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

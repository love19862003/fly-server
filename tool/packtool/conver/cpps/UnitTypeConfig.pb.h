// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UnitTypeConfig.proto

#ifndef PROTOBUF_UnitTypeConfig_2eproto__INCLUDED
#define PROTOBUF_UnitTypeConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UnitTypeConfig_2eproto();
void protobuf_AssignDesc_UnitTypeConfig_2eproto();
void protobuf_ShutdownFile_UnitTypeConfig_2eproto();

class UnitTypeConfig;

// ===================================================================

class UnitTypeConfig : public ::google::protobuf::Message {
 public:
  UnitTypeConfig();
  virtual ~UnitTypeConfig();

  UnitTypeConfig(const UnitTypeConfig& from);

  inline UnitTypeConfig& operator=(const UnitTypeConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnitTypeConfig& default_instance();

  void Swap(UnitTypeConfig* other);

  // implements Message ----------------------------------------------

  UnitTypeConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnitTypeConfig& from);
  void MergeFrom(const UnitTypeConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 melee_damage_percent = 10;
  inline bool has_melee_damage_percent() const;
  inline void clear_melee_damage_percent();
  static const int kMeleeDamagePercentFieldNumber = 10;
  inline ::google::protobuf::int32 melee_damage_percent() const;
  inline void set_melee_damage_percent(::google::protobuf::int32 value);

  // optional int32 resource = 16;
  inline bool has_resource() const;
  inline void clear_resource();
  static const int kResourceFieldNumber = 16;
  inline ::google::protobuf::int32 resource() const;
  inline void set_resource(::google::protobuf::int32 value);

  // optional int32 branch_target_damage_per = 12;
  inline bool has_branch_target_damage_per() const;
  inline void clear_branch_target_damage_per();
  static const int kBranchTargetDamagePerFieldNumber = 12;
  inline ::google::protobuf::int32 branch_target_damage_per() const;
  inline void set_branch_target_damage_per(::google::protobuf::int32 value);

  // optional int32 target_count = 5;
  inline bool has_target_count() const;
  inline void clear_target_count();
  static const int kTargetCountFieldNumber = 5;
  inline ::google::protobuf::int32 target_count() const;
  inline void set_target_count(::google::protobuf::int32 value);

  // optional int32 target = 4;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 4;
  inline ::google::protobuf::int32 target() const;
  inline void set_target(::google::protobuf::int32 value);

  // optional int32 atk_distance = 9;
  inline bool has_atk_distance() const;
  inline void clear_atk_distance();
  static const int kAtkDistanceFieldNumber = 9;
  inline ::google::protobuf::int32 atk_distance() const;
  inline void set_atk_distance(::google::protobuf::int32 value);

  // optional int32 atk_range_type = 8;
  inline bool has_atk_range_type() const;
  inline void clear_atk_range_type();
  static const int kAtkRangeTypeFieldNumber = 8;
  inline ::google::protobuf::int32 atk_range_type() const;
  inline void set_atk_range_type(::google::protobuf::int32 value);

  // optional int32 avoid_melee = 7;
  inline bool has_avoid_melee() const;
  inline void clear_avoid_melee();
  static const int kAvoidMeleeFieldNumber = 7;
  inline ::google::protobuf::int32 avoid_melee() const;
  inline void set_avoid_melee(::google::protobuf::int32 value);

  // optional int32 priority_target_rule = 3;
  inline bool has_priority_target_rule() const;
  inline void clear_priority_target_rule();
  static const int kPriorityTargetRuleFieldNumber = 3;
  inline ::google::protobuf::int32 priority_target_rule() const;
  inline void set_priority_target_rule(::google::protobuf::int32 value);

  // optional int32 move = 15;
  inline bool has_move() const;
  inline void clear_move();
  static const int kMoveFieldNumber = 15;
  inline ::google::protobuf::int32 move() const;
  inline void set_move(::google::protobuf::int32 value);

  // repeated .DianShiTech.Config.ConfigTypeGroup talent = 14;
  inline int talent_size() const;
  inline void clear_talent();
  static const int kTalentFieldNumber = 14;
  inline const ::DianShiTech::Config::ConfigTypeGroup& talent(int index) const;
  inline ::DianShiTech::Config::ConfigTypeGroup* mutable_talent(int index);
  inline ::DianShiTech::Config::ConfigTypeGroup* add_talent();
  inline const ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >&
      talent() const;
  inline ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >*
      mutable_talent();

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 hp_revise = 18;
  inline bool has_hp_revise() const;
  inline void clear_hp_revise();
  static const int kHpReviseFieldNumber = 18;
  inline ::google::protobuf::int32 hp_revise() const;
  inline void set_hp_revise(::google::protobuf::int32 value);

  // optional int32 atk_type = 6;
  inline bool has_atk_type() const;
  inline void clear_atk_type();
  static const int kAtkTypeFieldNumber = 6;
  inline ::google::protobuf::int32 atk_type() const;
  inline void set_atk_type(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 atk_revise = 17;
  inline bool has_atk_revise() const;
  inline void clear_atk_revise();
  static const int kAtkReviseFieldNumber = 17;
  inline ::google::protobuf::int32 atk_revise() const;
  inline void set_atk_revise(::google::protobuf::int32 value);

  // optional int32 main_target_damage_per = 11;
  inline bool has_main_target_damage_per() const;
  inline void clear_main_target_damage_per();
  static const int kMainTargetDamagePerFieldNumber = 11;
  inline ::google::protobuf::int32 main_target_damage_per() const;
  inline void set_main_target_damage_per(::google::protobuf::int32 value);

  // optional int32 gate_damage_per = 13;
  inline bool has_gate_damage_per() const;
  inline void clear_gate_damage_per();
  static const int kGateDamagePerFieldNumber = 13;
  inline ::google::protobuf::int32 gate_damage_per() const;
  inline void set_gate_damage_per(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DianShiTech.Config.UnitTypeConfig)
 private:
  inline void set_has_melee_damage_percent();
  inline void clear_has_melee_damage_percent();
  inline void set_has_resource();
  inline void clear_has_resource();
  inline void set_has_branch_target_damage_per();
  inline void clear_has_branch_target_damage_per();
  inline void set_has_target_count();
  inline void clear_has_target_count();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_atk_distance();
  inline void clear_has_atk_distance();
  inline void set_has_atk_range_type();
  inline void clear_has_atk_range_type();
  inline void set_has_avoid_melee();
  inline void clear_has_avoid_melee();
  inline void set_has_priority_target_rule();
  inline void clear_has_priority_target_rule();
  inline void set_has_move();
  inline void clear_has_move();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_hp_revise();
  inline void clear_has_hp_revise();
  inline void set_has_atk_type();
  inline void clear_has_atk_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_atk_revise();
  inline void clear_has_atk_revise();
  inline void set_has_main_target_damage_per();
  inline void clear_has_main_target_damage_per();
  inline void set_has_gate_damage_per();
  inline void clear_has_gate_damage_per();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 melee_damage_percent_;
  ::google::protobuf::int32 resource_;
  ::google::protobuf::int32 branch_target_damage_per_;
  ::google::protobuf::int32 target_count_;
  ::google::protobuf::int32 target_;
  ::google::protobuf::int32 atk_distance_;
  ::google::protobuf::int32 atk_range_type_;
  ::google::protobuf::int32 avoid_melee_;
  ::google::protobuf::int32 priority_target_rule_;
  ::google::protobuf::int32 move_;
  ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup > talent_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 hp_revise_;
  ::std::string* name_;
  ::google::protobuf::int32 atk_type_;
  ::google::protobuf::int32 atk_revise_;
  ::google::protobuf::int32 main_target_damage_per_;
  ::google::protobuf::int32 gate_damage_per_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_UnitTypeConfig_2eproto();
  friend void protobuf_AssignDesc_UnitTypeConfig_2eproto();
  friend void protobuf_ShutdownFile_UnitTypeConfig_2eproto();

  void InitAsDefaultInstance();
  static UnitTypeConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// UnitTypeConfig

// optional int32 melee_damage_percent = 10;
inline bool UnitTypeConfig::has_melee_damage_percent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnitTypeConfig::set_has_melee_damage_percent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnitTypeConfig::clear_has_melee_damage_percent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnitTypeConfig::clear_melee_damage_percent() {
  melee_damage_percent_ = 0;
  clear_has_melee_damage_percent();
}
inline ::google::protobuf::int32 UnitTypeConfig::melee_damage_percent() const {
  return melee_damage_percent_;
}
inline void UnitTypeConfig::set_melee_damage_percent(::google::protobuf::int32 value) {
  set_has_melee_damage_percent();
  melee_damage_percent_ = value;
}

// optional int32 resource = 16;
inline bool UnitTypeConfig::has_resource() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnitTypeConfig::set_has_resource() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnitTypeConfig::clear_has_resource() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnitTypeConfig::clear_resource() {
  resource_ = 0;
  clear_has_resource();
}
inline ::google::protobuf::int32 UnitTypeConfig::resource() const {
  return resource_;
}
inline void UnitTypeConfig::set_resource(::google::protobuf::int32 value) {
  set_has_resource();
  resource_ = value;
}

// optional int32 branch_target_damage_per = 12;
inline bool UnitTypeConfig::has_branch_target_damage_per() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnitTypeConfig::set_has_branch_target_damage_per() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnitTypeConfig::clear_has_branch_target_damage_per() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnitTypeConfig::clear_branch_target_damage_per() {
  branch_target_damage_per_ = 0;
  clear_has_branch_target_damage_per();
}
inline ::google::protobuf::int32 UnitTypeConfig::branch_target_damage_per() const {
  return branch_target_damage_per_;
}
inline void UnitTypeConfig::set_branch_target_damage_per(::google::protobuf::int32 value) {
  set_has_branch_target_damage_per();
  branch_target_damage_per_ = value;
}

// optional int32 target_count = 5;
inline bool UnitTypeConfig::has_target_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UnitTypeConfig::set_has_target_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UnitTypeConfig::clear_has_target_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UnitTypeConfig::clear_target_count() {
  target_count_ = 0;
  clear_has_target_count();
}
inline ::google::protobuf::int32 UnitTypeConfig::target_count() const {
  return target_count_;
}
inline void UnitTypeConfig::set_target_count(::google::protobuf::int32 value) {
  set_has_target_count();
  target_count_ = value;
}

// optional int32 target = 4;
inline bool UnitTypeConfig::has_target() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UnitTypeConfig::set_has_target() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UnitTypeConfig::clear_has_target() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UnitTypeConfig::clear_target() {
  target_ = 0;
  clear_has_target();
}
inline ::google::protobuf::int32 UnitTypeConfig::target() const {
  return target_;
}
inline void UnitTypeConfig::set_target(::google::protobuf::int32 value) {
  set_has_target();
  target_ = value;
}

// optional int32 atk_distance = 9;
inline bool UnitTypeConfig::has_atk_distance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UnitTypeConfig::set_has_atk_distance() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UnitTypeConfig::clear_has_atk_distance() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UnitTypeConfig::clear_atk_distance() {
  atk_distance_ = 0;
  clear_has_atk_distance();
}
inline ::google::protobuf::int32 UnitTypeConfig::atk_distance() const {
  return atk_distance_;
}
inline void UnitTypeConfig::set_atk_distance(::google::protobuf::int32 value) {
  set_has_atk_distance();
  atk_distance_ = value;
}

// optional int32 atk_range_type = 8;
inline bool UnitTypeConfig::has_atk_range_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UnitTypeConfig::set_has_atk_range_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UnitTypeConfig::clear_has_atk_range_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UnitTypeConfig::clear_atk_range_type() {
  atk_range_type_ = 0;
  clear_has_atk_range_type();
}
inline ::google::protobuf::int32 UnitTypeConfig::atk_range_type() const {
  return atk_range_type_;
}
inline void UnitTypeConfig::set_atk_range_type(::google::protobuf::int32 value) {
  set_has_atk_range_type();
  atk_range_type_ = value;
}

// optional int32 avoid_melee = 7;
inline bool UnitTypeConfig::has_avoid_melee() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UnitTypeConfig::set_has_avoid_melee() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UnitTypeConfig::clear_has_avoid_melee() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UnitTypeConfig::clear_avoid_melee() {
  avoid_melee_ = 0;
  clear_has_avoid_melee();
}
inline ::google::protobuf::int32 UnitTypeConfig::avoid_melee() const {
  return avoid_melee_;
}
inline void UnitTypeConfig::set_avoid_melee(::google::protobuf::int32 value) {
  set_has_avoid_melee();
  avoid_melee_ = value;
}

// optional int32 priority_target_rule = 3;
inline bool UnitTypeConfig::has_priority_target_rule() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UnitTypeConfig::set_has_priority_target_rule() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UnitTypeConfig::clear_has_priority_target_rule() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UnitTypeConfig::clear_priority_target_rule() {
  priority_target_rule_ = 0;
  clear_has_priority_target_rule();
}
inline ::google::protobuf::int32 UnitTypeConfig::priority_target_rule() const {
  return priority_target_rule_;
}
inline void UnitTypeConfig::set_priority_target_rule(::google::protobuf::int32 value) {
  set_has_priority_target_rule();
  priority_target_rule_ = value;
}

// optional int32 move = 15;
inline bool UnitTypeConfig::has_move() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UnitTypeConfig::set_has_move() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UnitTypeConfig::clear_has_move() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UnitTypeConfig::clear_move() {
  move_ = 0;
  clear_has_move();
}
inline ::google::protobuf::int32 UnitTypeConfig::move() const {
  return move_;
}
inline void UnitTypeConfig::set_move(::google::protobuf::int32 value) {
  set_has_move();
  move_ = value;
}

// repeated .DianShiTech.Config.ConfigTypeGroup talent = 14;
inline int UnitTypeConfig::talent_size() const {
  return talent_.size();
}
inline void UnitTypeConfig::clear_talent() {
  talent_.Clear();
}
inline const ::DianShiTech::Config::ConfigTypeGroup& UnitTypeConfig::talent(int index) const {
  return talent_.Get(index);
}
inline ::DianShiTech::Config::ConfigTypeGroup* UnitTypeConfig::mutable_talent(int index) {
  return talent_.Mutable(index);
}
inline ::DianShiTech::Config::ConfigTypeGroup* UnitTypeConfig::add_talent() {
  return talent_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >&
UnitTypeConfig::talent() const {
  return talent_;
}
inline ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >*
UnitTypeConfig::mutable_talent() {
  return &talent_;
}

// optional int32 id = 1;
inline bool UnitTypeConfig::has_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UnitTypeConfig::set_has_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UnitTypeConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UnitTypeConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UnitTypeConfig::id() const {
  return id_;
}
inline void UnitTypeConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 hp_revise = 18;
inline bool UnitTypeConfig::has_hp_revise() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UnitTypeConfig::set_has_hp_revise() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UnitTypeConfig::clear_has_hp_revise() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UnitTypeConfig::clear_hp_revise() {
  hp_revise_ = 0;
  clear_has_hp_revise();
}
inline ::google::protobuf::int32 UnitTypeConfig::hp_revise() const {
  return hp_revise_;
}
inline void UnitTypeConfig::set_hp_revise(::google::protobuf::int32 value) {
  set_has_hp_revise();
  hp_revise_ = value;
}

// optional int32 atk_type = 6;
inline bool UnitTypeConfig::has_atk_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UnitTypeConfig::set_has_atk_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UnitTypeConfig::clear_has_atk_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UnitTypeConfig::clear_atk_type() {
  atk_type_ = 0;
  clear_has_atk_type();
}
inline ::google::protobuf::int32 UnitTypeConfig::atk_type() const {
  return atk_type_;
}
inline void UnitTypeConfig::set_atk_type(::google::protobuf::int32 value) {
  set_has_atk_type();
  atk_type_ = value;
}

// optional string name = 2;
inline bool UnitTypeConfig::has_name() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UnitTypeConfig::set_has_name() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UnitTypeConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UnitTypeConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& UnitTypeConfig::name() const {
  return *name_;
}
inline void UnitTypeConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UnitTypeConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UnitTypeConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnitTypeConfig::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* UnitTypeConfig::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UnitTypeConfig::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 atk_revise = 17;
inline bool UnitTypeConfig::has_atk_revise() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UnitTypeConfig::set_has_atk_revise() {
  _has_bits_[0] |= 0x00008000u;
}
inline void UnitTypeConfig::clear_has_atk_revise() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void UnitTypeConfig::clear_atk_revise() {
  atk_revise_ = 0;
  clear_has_atk_revise();
}
inline ::google::protobuf::int32 UnitTypeConfig::atk_revise() const {
  return atk_revise_;
}
inline void UnitTypeConfig::set_atk_revise(::google::protobuf::int32 value) {
  set_has_atk_revise();
  atk_revise_ = value;
}

// optional int32 main_target_damage_per = 11;
inline bool UnitTypeConfig::has_main_target_damage_per() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void UnitTypeConfig::set_has_main_target_damage_per() {
  _has_bits_[0] |= 0x00010000u;
}
inline void UnitTypeConfig::clear_has_main_target_damage_per() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void UnitTypeConfig::clear_main_target_damage_per() {
  main_target_damage_per_ = 0;
  clear_has_main_target_damage_per();
}
inline ::google::protobuf::int32 UnitTypeConfig::main_target_damage_per() const {
  return main_target_damage_per_;
}
inline void UnitTypeConfig::set_main_target_damage_per(::google::protobuf::int32 value) {
  set_has_main_target_damage_per();
  main_target_damage_per_ = value;
}

// optional int32 gate_damage_per = 13;
inline bool UnitTypeConfig::has_gate_damage_per() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void UnitTypeConfig::set_has_gate_damage_per() {
  _has_bits_[0] |= 0x00020000u;
}
inline void UnitTypeConfig::clear_has_gate_damage_per() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void UnitTypeConfig::clear_gate_damage_per() {
  gate_damage_per_ = 0;
  clear_has_gate_damage_per();
}
inline ::google::protobuf::int32 UnitTypeConfig::gate_damage_per() const {
  return gate_damage_per_;
}
inline void UnitTypeConfig::set_gate_damage_per(::google::protobuf::int32 value) {
  set_has_gate_damage_per();
  gate_damage_per_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UnitTypeConfig_2eproto__INCLUDED

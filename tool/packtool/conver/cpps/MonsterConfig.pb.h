// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MonsterConfig.proto

#ifndef PROTOBUF_MonsterConfig_2eproto__INCLUDED
#define PROTOBUF_MonsterConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MonsterConfig_2eproto();
void protobuf_AssignDesc_MonsterConfig_2eproto();
void protobuf_ShutdownFile_MonsterConfig_2eproto();

class MonsterConfig;

// ===================================================================

class MonsterConfig : public ::google::protobuf::Message {
 public:
  MonsterConfig();
  virtual ~MonsterConfig();

  MonsterConfig(const MonsterConfig& from);

  inline MonsterConfig& operator=(const MonsterConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MonsterConfig& default_instance();

  void Swap(MonsterConfig* other);

  // implements Message ----------------------------------------------

  MonsterConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonsterConfig& from);
  void MergeFrom(const MonsterConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cri = 18;
  inline bool has_cri() const;
  inline void clear_cri();
  static const int kCriFieldNumber = 18;
  inline ::google::protobuf::int32 cri() const;
  inline void set_cri(::google::protobuf::int32 value);

  // optional int32 damage_increase = 20;
  inline bool has_damage_increase() const;
  inline void clear_damage_increase();
  static const int kDamageIncreaseFieldNumber = 20;
  inline ::google::protobuf::int32 damage_increase() const;
  inline void set_damage_increase(::google::protobuf::int32 value);

  // optional int32 skill = 7;
  inline bool has_skill() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 7;
  inline ::google::protobuf::int32 skill() const;
  inline void set_skill(::google::protobuf::int32 value);

  // optional int32 unit = 3;
  inline bool has_unit() const;
  inline void clear_unit();
  static const int kUnitFieldNumber = 3;
  inline ::google::protobuf::int32 unit() const;
  inline void set_unit(::google::protobuf::int32 value);

  // repeated int32 drop = 27;
  inline int drop_size() const;
  inline void clear_drop();
  static const int kDropFieldNumber = 27;
  inline ::google::protobuf::int32 drop(int index) const;
  inline void set_drop(int index, ::google::protobuf::int32 value);
  inline void add_drop(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      drop() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_drop();

  // optional int32 hp_steal_fix = 26;
  inline bool has_hp_steal_fix() const;
  inline void clear_hp_steal_fix();
  static const int kHpStealFixFieldNumber = 26;
  inline ::google::protobuf::int32 hp_steal_fix() const;
  inline void set_hp_steal_fix(::google::protobuf::int32 value);

  // optional int32 immune_type = 11;
  inline bool has_immune_type() const;
  inline void clear_immune_type();
  static const int kImmuneTypeFieldNumber = 11;
  inline ::google::protobuf::int32 immune_type() const;
  inline void set_immune_type(::google::protobuf::int32 value);

  // optional int32 reflect_fix = 25;
  inline bool has_reflect_fix() const;
  inline void clear_reflect_fix();
  static const int kReflectFixFieldNumber = 25;
  inline ::google::protobuf::int32 reflect_fix() const;
  inline void set_reflect_fix(::google::protobuf::int32 value);

  // optional int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 tough = 22;
  inline bool has_tough() const;
  inline void clear_tough();
  static const int kToughFieldNumber = 22;
  inline ::google::protobuf::int32 tough() const;
  inline void set_tough(::google::protobuf::int32 value);

  // optional int32 evade = 21;
  inline bool has_evade() const;
  inline void clear_evade();
  static const int kEvadeFieldNumber = 21;
  inline ::google::protobuf::int32 evade() const;
  inline void set_evade(::google::protobuf::int32 value);

  // optional int32 damage_reduce = 24;
  inline bool has_damage_reduce() const;
  inline void clear_damage_reduce();
  static const int kDamageReduceFieldNumber = 24;
  inline ::google::protobuf::int32 damage_reduce() const;
  inline void set_damage_reduce(::google::protobuf::int32 value);

  // optional int32 block = 23;
  inline bool has_block() const;
  inline void clear_block();
  static const int kBlockFieldNumber = 23;
  inline ::google::protobuf::int32 block() const;
  inline void set_block(::google::protobuf::int32 value);

  // optional int32 str_fix = 14;
  inline bool has_str_fix() const;
  inline void clear_str_fix();
  static const int kStrFixFieldNumber = 14;
  inline ::google::protobuf::int32 str_fix() const;
  inline void set_str_fix(::google::protobuf::int32 value);

  // optional int32 talent = 9;
  inline bool has_talent() const;
  inline void clear_talent();
  static const int kTalentFieldNumber = 9;
  inline ::google::protobuf::int32 talent() const;
  inline void set_talent(::google::protobuf::int32 value);

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 commonskill = 6;
  inline bool has_commonskill() const;
  inline void clear_commonskill();
  static const int kCommonskillFieldNumber = 6;
  inline ::google::protobuf::int32 commonskill() const;
  inline void set_commonskill(::google::protobuf::int32 value);

  // optional int32 hp_fix = 13;
  inline bool has_hp_fix() const;
  inline void clear_hp_fix();
  static const int kHpFixFieldNumber = 13;
  inline ::google::protobuf::int32 hp_fix() const;
  inline void set_hp_fix(::google::protobuf::int32 value);

  // optional int32 hit = 17;
  inline bool has_hit() const;
  inline void clear_hit();
  static const int kHitFieldNumber = 17;
  inline ::google::protobuf::int32 hit() const;
  inline void set_hit(::google::protobuf::int32 value);

  // optional int32 dom_fix = 16;
  inline bool has_dom_fix() const;
  inline void clear_dom_fix();
  static const int kDomFixFieldNumber = 16;
  inline ::google::protobuf::int32 dom_fix() const;
  inline void set_dom_fix(::google::protobuf::int32 value);

  // optional int32 config = 10;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 10;
  inline ::google::protobuf::int32 config() const;
  inline void set_config(::google::protobuf::int32 value);

  // optional string monster_name = 2;
  inline bool has_monster_name() const;
  inline void clear_monster_name();
  static const int kMonsterNameFieldNumber = 2;
  inline const ::std::string& monster_name() const;
  inline void set_monster_name(const ::std::string& value);
  inline void set_monster_name(const char* value);
  inline void set_monster_name(const char* value, size_t size);
  inline ::std::string* mutable_monster_name();
  inline ::std::string* release_monster_name();
  inline void set_allocated_monster_name(::std::string* monster_name);

  // optional int32 unit_type = 4;
  inline bool has_unit_type() const;
  inline void clear_unit_type();
  static const int kUnitTypeFieldNumber = 4;
  inline ::google::protobuf::int32 unit_type() const;
  inline void set_unit_type(::google::protobuf::int32 value);

  // optional int32 int_fix = 15;
  inline bool has_int_fix() const;
  inline void clear_int_fix();
  static const int kIntFixFieldNumber = 15;
  inline ::google::protobuf::int32 int_fix() const;
  inline void set_int_fix(::google::protobuf::int32 value);

  // optional int32 precision = 19;
  inline bool has_precision() const;
  inline void clear_precision();
  static const int kPrecisionFieldNumber = 19;
  inline ::google::protobuf::int32 precision() const;
  inline void set_precision(::google::protobuf::int32 value);

  // optional int32 atk_fix = 12;
  inline bool has_atk_fix() const;
  inline void clear_atk_fix();
  static const int kAtkFixFieldNumber = 12;
  inline ::google::protobuf::int32 atk_fix() const;
  inline void set_atk_fix(::google::protobuf::int32 value);

  // optional int32 card_level = 8;
  inline bool has_card_level() const;
  inline void clear_card_level();
  static const int kCardLevelFieldNumber = 8;
  inline ::google::protobuf::int32 card_level() const;
  inline void set_card_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DianShiTech.Config.MonsterConfig)
 private:
  inline void set_has_cri();
  inline void clear_has_cri();
  inline void set_has_damage_increase();
  inline void clear_has_damage_increase();
  inline void set_has_skill();
  inline void clear_has_skill();
  inline void set_has_unit();
  inline void clear_has_unit();
  inline void set_has_hp_steal_fix();
  inline void clear_has_hp_steal_fix();
  inline void set_has_immune_type();
  inline void clear_has_immune_type();
  inline void set_has_reflect_fix();
  inline void clear_has_reflect_fix();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_tough();
  inline void clear_has_tough();
  inline void set_has_evade();
  inline void clear_has_evade();
  inline void set_has_damage_reduce();
  inline void clear_has_damage_reduce();
  inline void set_has_block();
  inline void clear_has_block();
  inline void set_has_str_fix();
  inline void clear_has_str_fix();
  inline void set_has_talent();
  inline void clear_has_talent();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_commonskill();
  inline void clear_has_commonskill();
  inline void set_has_hp_fix();
  inline void clear_has_hp_fix();
  inline void set_has_hit();
  inline void clear_has_hit();
  inline void set_has_dom_fix();
  inline void clear_has_dom_fix();
  inline void set_has_config();
  inline void clear_has_config();
  inline void set_has_monster_name();
  inline void clear_has_monster_name();
  inline void set_has_unit_type();
  inline void clear_has_unit_type();
  inline void set_has_int_fix();
  inline void clear_has_int_fix();
  inline void set_has_precision();
  inline void clear_has_precision();
  inline void set_has_atk_fix();
  inline void clear_has_atk_fix();
  inline void set_has_card_level();
  inline void clear_has_card_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cri_;
  ::google::protobuf::int32 damage_increase_;
  ::google::protobuf::int32 skill_;
  ::google::protobuf::int32 unit_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > drop_;
  ::google::protobuf::int32 hp_steal_fix_;
  ::google::protobuf::int32 immune_type_;
  ::google::protobuf::int32 reflect_fix_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 tough_;
  ::google::protobuf::int32 evade_;
  ::google::protobuf::int32 damage_reduce_;
  ::google::protobuf::int32 block_;
  ::google::protobuf::int32 str_fix_;
  ::google::protobuf::int32 talent_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 commonskill_;
  ::google::protobuf::int32 hp_fix_;
  ::google::protobuf::int32 hit_;
  ::google::protobuf::int32 dom_fix_;
  ::google::protobuf::int32 config_;
  ::std::string* monster_name_;
  ::google::protobuf::int32 unit_type_;
  ::google::protobuf::int32 int_fix_;
  ::google::protobuf::int32 precision_;
  ::google::protobuf::int32 atk_fix_;
  ::google::protobuf::int32 card_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(27 + 31) / 32];

  friend void  protobuf_AddDesc_MonsterConfig_2eproto();
  friend void protobuf_AssignDesc_MonsterConfig_2eproto();
  friend void protobuf_ShutdownFile_MonsterConfig_2eproto();

  void InitAsDefaultInstance();
  static MonsterConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// MonsterConfig

// optional int32 cri = 18;
inline bool MonsterConfig::has_cri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonsterConfig::set_has_cri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonsterConfig::clear_has_cri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonsterConfig::clear_cri() {
  cri_ = 0;
  clear_has_cri();
}
inline ::google::protobuf::int32 MonsterConfig::cri() const {
  return cri_;
}
inline void MonsterConfig::set_cri(::google::protobuf::int32 value) {
  set_has_cri();
  cri_ = value;
}

// optional int32 damage_increase = 20;
inline bool MonsterConfig::has_damage_increase() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonsterConfig::set_has_damage_increase() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MonsterConfig::clear_has_damage_increase() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonsterConfig::clear_damage_increase() {
  damage_increase_ = 0;
  clear_has_damage_increase();
}
inline ::google::protobuf::int32 MonsterConfig::damage_increase() const {
  return damage_increase_;
}
inline void MonsterConfig::set_damage_increase(::google::protobuf::int32 value) {
  set_has_damage_increase();
  damage_increase_ = value;
}

// optional int32 skill = 7;
inline bool MonsterConfig::has_skill() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MonsterConfig::set_has_skill() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MonsterConfig::clear_has_skill() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MonsterConfig::clear_skill() {
  skill_ = 0;
  clear_has_skill();
}
inline ::google::protobuf::int32 MonsterConfig::skill() const {
  return skill_;
}
inline void MonsterConfig::set_skill(::google::protobuf::int32 value) {
  set_has_skill();
  skill_ = value;
}

// optional int32 unit = 3;
inline bool MonsterConfig::has_unit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MonsterConfig::set_has_unit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MonsterConfig::clear_has_unit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MonsterConfig::clear_unit() {
  unit_ = 0;
  clear_has_unit();
}
inline ::google::protobuf::int32 MonsterConfig::unit() const {
  return unit_;
}
inline void MonsterConfig::set_unit(::google::protobuf::int32 value) {
  set_has_unit();
  unit_ = value;
}

// repeated int32 drop = 27;
inline int MonsterConfig::drop_size() const {
  return drop_.size();
}
inline void MonsterConfig::clear_drop() {
  drop_.Clear();
}
inline ::google::protobuf::int32 MonsterConfig::drop(int index) const {
  return drop_.Get(index);
}
inline void MonsterConfig::set_drop(int index, ::google::protobuf::int32 value) {
  drop_.Set(index, value);
}
inline void MonsterConfig::add_drop(::google::protobuf::int32 value) {
  drop_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MonsterConfig::drop() const {
  return drop_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MonsterConfig::mutable_drop() {
  return &drop_;
}

// optional int32 hp_steal_fix = 26;
inline bool MonsterConfig::has_hp_steal_fix() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MonsterConfig::set_has_hp_steal_fix() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MonsterConfig::clear_has_hp_steal_fix() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MonsterConfig::clear_hp_steal_fix() {
  hp_steal_fix_ = 0;
  clear_has_hp_steal_fix();
}
inline ::google::protobuf::int32 MonsterConfig::hp_steal_fix() const {
  return hp_steal_fix_;
}
inline void MonsterConfig::set_hp_steal_fix(::google::protobuf::int32 value) {
  set_has_hp_steal_fix();
  hp_steal_fix_ = value;
}

// optional int32 immune_type = 11;
inline bool MonsterConfig::has_immune_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MonsterConfig::set_has_immune_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MonsterConfig::clear_has_immune_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MonsterConfig::clear_immune_type() {
  immune_type_ = 0;
  clear_has_immune_type();
}
inline ::google::protobuf::int32 MonsterConfig::immune_type() const {
  return immune_type_;
}
inline void MonsterConfig::set_immune_type(::google::protobuf::int32 value) {
  set_has_immune_type();
  immune_type_ = value;
}

// optional int32 reflect_fix = 25;
inline bool MonsterConfig::has_reflect_fix() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MonsterConfig::set_has_reflect_fix() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MonsterConfig::clear_has_reflect_fix() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MonsterConfig::clear_reflect_fix() {
  reflect_fix_ = 0;
  clear_has_reflect_fix();
}
inline ::google::protobuf::int32 MonsterConfig::reflect_fix() const {
  return reflect_fix_;
}
inline void MonsterConfig::set_reflect_fix(::google::protobuf::int32 value) {
  set_has_reflect_fix();
  reflect_fix_ = value;
}

// optional int32 level = 5;
inline bool MonsterConfig::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MonsterConfig::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MonsterConfig::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MonsterConfig::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 MonsterConfig::level() const {
  return level_;
}
inline void MonsterConfig::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 tough = 22;
inline bool MonsterConfig::has_tough() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MonsterConfig::set_has_tough() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MonsterConfig::clear_has_tough() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MonsterConfig::clear_tough() {
  tough_ = 0;
  clear_has_tough();
}
inline ::google::protobuf::int32 MonsterConfig::tough() const {
  return tough_;
}
inline void MonsterConfig::set_tough(::google::protobuf::int32 value) {
  set_has_tough();
  tough_ = value;
}

// optional int32 evade = 21;
inline bool MonsterConfig::has_evade() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MonsterConfig::set_has_evade() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MonsterConfig::clear_has_evade() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MonsterConfig::clear_evade() {
  evade_ = 0;
  clear_has_evade();
}
inline ::google::protobuf::int32 MonsterConfig::evade() const {
  return evade_;
}
inline void MonsterConfig::set_evade(::google::protobuf::int32 value) {
  set_has_evade();
  evade_ = value;
}

// optional int32 damage_reduce = 24;
inline bool MonsterConfig::has_damage_reduce() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MonsterConfig::set_has_damage_reduce() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MonsterConfig::clear_has_damage_reduce() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MonsterConfig::clear_damage_reduce() {
  damage_reduce_ = 0;
  clear_has_damage_reduce();
}
inline ::google::protobuf::int32 MonsterConfig::damage_reduce() const {
  return damage_reduce_;
}
inline void MonsterConfig::set_damage_reduce(::google::protobuf::int32 value) {
  set_has_damage_reduce();
  damage_reduce_ = value;
}

// optional int32 block = 23;
inline bool MonsterConfig::has_block() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MonsterConfig::set_has_block() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MonsterConfig::clear_has_block() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MonsterConfig::clear_block() {
  block_ = 0;
  clear_has_block();
}
inline ::google::protobuf::int32 MonsterConfig::block() const {
  return block_;
}
inline void MonsterConfig::set_block(::google::protobuf::int32 value) {
  set_has_block();
  block_ = value;
}

// optional int32 str_fix = 14;
inline bool MonsterConfig::has_str_fix() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MonsterConfig::set_has_str_fix() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MonsterConfig::clear_has_str_fix() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MonsterConfig::clear_str_fix() {
  str_fix_ = 0;
  clear_has_str_fix();
}
inline ::google::protobuf::int32 MonsterConfig::str_fix() const {
  return str_fix_;
}
inline void MonsterConfig::set_str_fix(::google::protobuf::int32 value) {
  set_has_str_fix();
  str_fix_ = value;
}

// optional int32 talent = 9;
inline bool MonsterConfig::has_talent() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MonsterConfig::set_has_talent() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MonsterConfig::clear_has_talent() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MonsterConfig::clear_talent() {
  talent_ = 0;
  clear_has_talent();
}
inline ::google::protobuf::int32 MonsterConfig::talent() const {
  return talent_;
}
inline void MonsterConfig::set_talent(::google::protobuf::int32 value) {
  set_has_talent();
  talent_ = value;
}

// optional int32 id = 1;
inline bool MonsterConfig::has_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MonsterConfig::set_has_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MonsterConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MonsterConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 MonsterConfig::id() const {
  return id_;
}
inline void MonsterConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 commonskill = 6;
inline bool MonsterConfig::has_commonskill() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MonsterConfig::set_has_commonskill() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MonsterConfig::clear_has_commonskill() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MonsterConfig::clear_commonskill() {
  commonskill_ = 0;
  clear_has_commonskill();
}
inline ::google::protobuf::int32 MonsterConfig::commonskill() const {
  return commonskill_;
}
inline void MonsterConfig::set_commonskill(::google::protobuf::int32 value) {
  set_has_commonskill();
  commonskill_ = value;
}

// optional int32 hp_fix = 13;
inline bool MonsterConfig::has_hp_fix() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MonsterConfig::set_has_hp_fix() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MonsterConfig::clear_has_hp_fix() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MonsterConfig::clear_hp_fix() {
  hp_fix_ = 0;
  clear_has_hp_fix();
}
inline ::google::protobuf::int32 MonsterConfig::hp_fix() const {
  return hp_fix_;
}
inline void MonsterConfig::set_hp_fix(::google::protobuf::int32 value) {
  set_has_hp_fix();
  hp_fix_ = value;
}

// optional int32 hit = 17;
inline bool MonsterConfig::has_hit() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MonsterConfig::set_has_hit() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MonsterConfig::clear_has_hit() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MonsterConfig::clear_hit() {
  hit_ = 0;
  clear_has_hit();
}
inline ::google::protobuf::int32 MonsterConfig::hit() const {
  return hit_;
}
inline void MonsterConfig::set_hit(::google::protobuf::int32 value) {
  set_has_hit();
  hit_ = value;
}

// optional int32 dom_fix = 16;
inline bool MonsterConfig::has_dom_fix() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MonsterConfig::set_has_dom_fix() {
  _has_bits_[0] |= 0x00080000u;
}
inline void MonsterConfig::clear_has_dom_fix() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void MonsterConfig::clear_dom_fix() {
  dom_fix_ = 0;
  clear_has_dom_fix();
}
inline ::google::protobuf::int32 MonsterConfig::dom_fix() const {
  return dom_fix_;
}
inline void MonsterConfig::set_dom_fix(::google::protobuf::int32 value) {
  set_has_dom_fix();
  dom_fix_ = value;
}

// optional int32 config = 10;
inline bool MonsterConfig::has_config() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void MonsterConfig::set_has_config() {
  _has_bits_[0] |= 0x00100000u;
}
inline void MonsterConfig::clear_has_config() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void MonsterConfig::clear_config() {
  config_ = 0;
  clear_has_config();
}
inline ::google::protobuf::int32 MonsterConfig::config() const {
  return config_;
}
inline void MonsterConfig::set_config(::google::protobuf::int32 value) {
  set_has_config();
  config_ = value;
}

// optional string monster_name = 2;
inline bool MonsterConfig::has_monster_name() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void MonsterConfig::set_has_monster_name() {
  _has_bits_[0] |= 0x00200000u;
}
inline void MonsterConfig::clear_has_monster_name() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void MonsterConfig::clear_monster_name() {
  if (monster_name_ != &::google::protobuf::internal::kEmptyString) {
    monster_name_->clear();
  }
  clear_has_monster_name();
}
inline const ::std::string& MonsterConfig::monster_name() const {
  return *monster_name_;
}
inline void MonsterConfig::set_monster_name(const ::std::string& value) {
  set_has_monster_name();
  if (monster_name_ == &::google::protobuf::internal::kEmptyString) {
    monster_name_ = new ::std::string;
  }
  monster_name_->assign(value);
}
inline void MonsterConfig::set_monster_name(const char* value) {
  set_has_monster_name();
  if (monster_name_ == &::google::protobuf::internal::kEmptyString) {
    monster_name_ = new ::std::string;
  }
  monster_name_->assign(value);
}
inline void MonsterConfig::set_monster_name(const char* value, size_t size) {
  set_has_monster_name();
  if (monster_name_ == &::google::protobuf::internal::kEmptyString) {
    monster_name_ = new ::std::string;
  }
  monster_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MonsterConfig::mutable_monster_name() {
  set_has_monster_name();
  if (monster_name_ == &::google::protobuf::internal::kEmptyString) {
    monster_name_ = new ::std::string;
  }
  return monster_name_;
}
inline ::std::string* MonsterConfig::release_monster_name() {
  clear_has_monster_name();
  if (monster_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = monster_name_;
    monster_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MonsterConfig::set_allocated_monster_name(::std::string* monster_name) {
  if (monster_name_ != &::google::protobuf::internal::kEmptyString) {
    delete monster_name_;
  }
  if (monster_name) {
    set_has_monster_name();
    monster_name_ = monster_name;
  } else {
    clear_has_monster_name();
    monster_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 unit_type = 4;
inline bool MonsterConfig::has_unit_type() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void MonsterConfig::set_has_unit_type() {
  _has_bits_[0] |= 0x00400000u;
}
inline void MonsterConfig::clear_has_unit_type() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void MonsterConfig::clear_unit_type() {
  unit_type_ = 0;
  clear_has_unit_type();
}
inline ::google::protobuf::int32 MonsterConfig::unit_type() const {
  return unit_type_;
}
inline void MonsterConfig::set_unit_type(::google::protobuf::int32 value) {
  set_has_unit_type();
  unit_type_ = value;
}

// optional int32 int_fix = 15;
inline bool MonsterConfig::has_int_fix() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void MonsterConfig::set_has_int_fix() {
  _has_bits_[0] |= 0x00800000u;
}
inline void MonsterConfig::clear_has_int_fix() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void MonsterConfig::clear_int_fix() {
  int_fix_ = 0;
  clear_has_int_fix();
}
inline ::google::protobuf::int32 MonsterConfig::int_fix() const {
  return int_fix_;
}
inline void MonsterConfig::set_int_fix(::google::protobuf::int32 value) {
  set_has_int_fix();
  int_fix_ = value;
}

// optional int32 precision = 19;
inline bool MonsterConfig::has_precision() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void MonsterConfig::set_has_precision() {
  _has_bits_[0] |= 0x01000000u;
}
inline void MonsterConfig::clear_has_precision() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void MonsterConfig::clear_precision() {
  precision_ = 0;
  clear_has_precision();
}
inline ::google::protobuf::int32 MonsterConfig::precision() const {
  return precision_;
}
inline void MonsterConfig::set_precision(::google::protobuf::int32 value) {
  set_has_precision();
  precision_ = value;
}

// optional int32 atk_fix = 12;
inline bool MonsterConfig::has_atk_fix() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void MonsterConfig::set_has_atk_fix() {
  _has_bits_[0] |= 0x02000000u;
}
inline void MonsterConfig::clear_has_atk_fix() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void MonsterConfig::clear_atk_fix() {
  atk_fix_ = 0;
  clear_has_atk_fix();
}
inline ::google::protobuf::int32 MonsterConfig::atk_fix() const {
  return atk_fix_;
}
inline void MonsterConfig::set_atk_fix(::google::protobuf::int32 value) {
  set_has_atk_fix();
  atk_fix_ = value;
}

// optional int32 card_level = 8;
inline bool MonsterConfig::has_card_level() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void MonsterConfig::set_has_card_level() {
  _has_bits_[0] |= 0x04000000u;
}
inline void MonsterConfig::clear_has_card_level() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void MonsterConfig::clear_card_level() {
  card_level_ = 0;
  clear_has_card_level();
}
inline ::google::protobuf::int32 MonsterConfig::card_level() const {
  return card_level_;
}
inline void MonsterConfig::set_card_level(::google::protobuf::int32 value) {
  set_has_card_level();
  card_level_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MonsterConfig_2eproto__INCLUDED

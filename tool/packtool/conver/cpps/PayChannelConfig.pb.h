// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PayChannelConfig.proto

#ifndef PROTOBUF_PayChannelConfig_2eproto__INCLUDED
#define PROTOBUF_PayChannelConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PayChannelConfig_2eproto();
void protobuf_AssignDesc_PayChannelConfig_2eproto();
void protobuf_ShutdownFile_PayChannelConfig_2eproto();

class PayChannelConfig;

// ===================================================================

class PayChannelConfig : public ::google::protobuf::Message {
 public:
  PayChannelConfig();
  virtual ~PayChannelConfig();

  PayChannelConfig(const PayChannelConfig& from);

  inline PayChannelConfig& operator=(const PayChannelConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PayChannelConfig& default_instance();

  void Swap(PayChannelConfig* other);

  // implements Message ----------------------------------------------

  PayChannelConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PayChannelConfig& from);
  void MergeFrom(const PayChannelConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string erpid = 8;
  inline bool has_erpid() const;
  inline void clear_erpid();
  static const int kErpidFieldNumber = 8;
  inline const ::std::string& erpid() const;
  inline void set_erpid(const ::std::string& value);
  inline void set_erpid(const char* value);
  inline void set_erpid(const char* value, size_t size);
  inline ::std::string* mutable_erpid();
  inline ::std::string* release_erpid();
  inline void set_allocated_erpid(::std::string* erpid);

  // optional string service = 7;
  inline bool has_service() const;
  inline void clear_service();
  static const int kServiceFieldNumber = 7;
  inline const ::std::string& service() const;
  inline void set_service(const ::std::string& value);
  inline void set_service(const char* value);
  inline void set_service(const char* value, size_t size);
  inline ::std::string* mutable_service();
  inline ::std::string* release_service();
  inline void set_allocated_service(::std::string* service);

  // optional string cuid = 6;
  inline bool has_cuid() const;
  inline void clear_cuid();
  static const int kCuidFieldNumber = 6;
  inline const ::std::string& cuid() const;
  inline void set_cuid(const ::std::string& value);
  inline void set_cuid(const char* value);
  inline void set_cuid(const char* value, size_t size);
  inline ::std::string* mutable_cuid();
  inline ::std::string* release_cuid();
  inline void set_allocated_cuid(::std::string* cuid);

  // optional string channel = 2;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 2;
  inline const ::std::string& channel() const;
  inline void set_channel(const ::std::string& value);
  inline void set_channel(const char* value);
  inline void set_channel(const char* value, size_t size);
  inline ::std::string* mutable_channel();
  inline ::std::string* release_channel();
  inline void set_allocated_channel(::std::string* channel);

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string array = 5;
  inline bool has_array() const;
  inline void clear_array();
  static const int kArrayFieldNumber = 5;
  inline const ::std::string& array() const;
  inline void set_array(const ::std::string& value);
  inline void set_array(const char* value);
  inline void set_array(const char* value, size_t size);
  inline ::std::string* mutable_array();
  inline ::std::string* release_array();
  inline void set_allocated_array(::std::string* array);

  // optional string channel_name = 4;
  inline bool has_channel_name() const;
  inline void clear_channel_name();
  static const int kChannelNameFieldNumber = 4;
  inline const ::std::string& channel_name() const;
  inline void set_channel_name(const ::std::string& value);
  inline void set_channel_name(const char* value);
  inline void set_channel_name(const char* value, size_t size);
  inline ::std::string* mutable_channel_name();
  inline ::std::string* release_channel_name();
  inline void set_allocated_channel_name(::std::string* channel_name);

  // optional string area = 3;
  inline bool has_area() const;
  inline void clear_area();
  static const int kAreaFieldNumber = 3;
  inline const ::std::string& area() const;
  inline void set_area(const ::std::string& value);
  inline void set_area(const char* value);
  inline void set_area(const char* value, size_t size);
  inline ::std::string* mutable_area();
  inline ::std::string* release_area();
  inline void set_allocated_area(::std::string* area);

  // @@protoc_insertion_point(class_scope:DianShiTech.Config.PayChannelConfig)
 private:
  inline void set_has_erpid();
  inline void clear_has_erpid();
  inline void set_has_service();
  inline void clear_has_service();
  inline void set_has_cuid();
  inline void clear_has_cuid();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_array();
  inline void clear_has_array();
  inline void set_has_channel_name();
  inline void clear_has_channel_name();
  inline void set_has_area();
  inline void clear_has_area();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* erpid_;
  ::std::string* service_;
  ::std::string* cuid_;
  ::std::string* channel_;
  ::std::string* array_;
  ::std::string* channel_name_;
  ::std::string* area_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_PayChannelConfig_2eproto();
  friend void protobuf_AssignDesc_PayChannelConfig_2eproto();
  friend void protobuf_ShutdownFile_PayChannelConfig_2eproto();

  void InitAsDefaultInstance();
  static PayChannelConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// PayChannelConfig

// optional string erpid = 8;
inline bool PayChannelConfig::has_erpid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PayChannelConfig::set_has_erpid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PayChannelConfig::clear_has_erpid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PayChannelConfig::clear_erpid() {
  if (erpid_ != &::google::protobuf::internal::kEmptyString) {
    erpid_->clear();
  }
  clear_has_erpid();
}
inline const ::std::string& PayChannelConfig::erpid() const {
  return *erpid_;
}
inline void PayChannelConfig::set_erpid(const ::std::string& value) {
  set_has_erpid();
  if (erpid_ == &::google::protobuf::internal::kEmptyString) {
    erpid_ = new ::std::string;
  }
  erpid_->assign(value);
}
inline void PayChannelConfig::set_erpid(const char* value) {
  set_has_erpid();
  if (erpid_ == &::google::protobuf::internal::kEmptyString) {
    erpid_ = new ::std::string;
  }
  erpid_->assign(value);
}
inline void PayChannelConfig::set_erpid(const char* value, size_t size) {
  set_has_erpid();
  if (erpid_ == &::google::protobuf::internal::kEmptyString) {
    erpid_ = new ::std::string;
  }
  erpid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayChannelConfig::mutable_erpid() {
  set_has_erpid();
  if (erpid_ == &::google::protobuf::internal::kEmptyString) {
    erpid_ = new ::std::string;
  }
  return erpid_;
}
inline ::std::string* PayChannelConfig::release_erpid() {
  clear_has_erpid();
  if (erpid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = erpid_;
    erpid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PayChannelConfig::set_allocated_erpid(::std::string* erpid) {
  if (erpid_ != &::google::protobuf::internal::kEmptyString) {
    delete erpid_;
  }
  if (erpid) {
    set_has_erpid();
    erpid_ = erpid;
  } else {
    clear_has_erpid();
    erpid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string service = 7;
inline bool PayChannelConfig::has_service() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PayChannelConfig::set_has_service() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PayChannelConfig::clear_has_service() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PayChannelConfig::clear_service() {
  if (service_ != &::google::protobuf::internal::kEmptyString) {
    service_->clear();
  }
  clear_has_service();
}
inline const ::std::string& PayChannelConfig::service() const {
  return *service_;
}
inline void PayChannelConfig::set_service(const ::std::string& value) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(value);
}
inline void PayChannelConfig::set_service(const char* value) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(value);
}
inline void PayChannelConfig::set_service(const char* value, size_t size) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayChannelConfig::mutable_service() {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  return service_;
}
inline ::std::string* PayChannelConfig::release_service() {
  clear_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_;
    service_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PayChannelConfig::set_allocated_service(::std::string* service) {
  if (service_ != &::google::protobuf::internal::kEmptyString) {
    delete service_;
  }
  if (service) {
    set_has_service();
    service_ = service;
  } else {
    clear_has_service();
    service_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string cuid = 6;
inline bool PayChannelConfig::has_cuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PayChannelConfig::set_has_cuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PayChannelConfig::clear_has_cuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PayChannelConfig::clear_cuid() {
  if (cuid_ != &::google::protobuf::internal::kEmptyString) {
    cuid_->clear();
  }
  clear_has_cuid();
}
inline const ::std::string& PayChannelConfig::cuid() const {
  return *cuid_;
}
inline void PayChannelConfig::set_cuid(const ::std::string& value) {
  set_has_cuid();
  if (cuid_ == &::google::protobuf::internal::kEmptyString) {
    cuid_ = new ::std::string;
  }
  cuid_->assign(value);
}
inline void PayChannelConfig::set_cuid(const char* value) {
  set_has_cuid();
  if (cuid_ == &::google::protobuf::internal::kEmptyString) {
    cuid_ = new ::std::string;
  }
  cuid_->assign(value);
}
inline void PayChannelConfig::set_cuid(const char* value, size_t size) {
  set_has_cuid();
  if (cuid_ == &::google::protobuf::internal::kEmptyString) {
    cuid_ = new ::std::string;
  }
  cuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayChannelConfig::mutable_cuid() {
  set_has_cuid();
  if (cuid_ == &::google::protobuf::internal::kEmptyString) {
    cuid_ = new ::std::string;
  }
  return cuid_;
}
inline ::std::string* PayChannelConfig::release_cuid() {
  clear_has_cuid();
  if (cuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cuid_;
    cuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PayChannelConfig::set_allocated_cuid(::std::string* cuid) {
  if (cuid_ != &::google::protobuf::internal::kEmptyString) {
    delete cuid_;
  }
  if (cuid) {
    set_has_cuid();
    cuid_ = cuid;
  } else {
    clear_has_cuid();
    cuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string channel = 2;
inline bool PayChannelConfig::has_channel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PayChannelConfig::set_has_channel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PayChannelConfig::clear_has_channel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PayChannelConfig::clear_channel() {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    channel_->clear();
  }
  clear_has_channel();
}
inline const ::std::string& PayChannelConfig::channel() const {
  return *channel_;
}
inline void PayChannelConfig::set_channel(const ::std::string& value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void PayChannelConfig::set_channel(const char* value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void PayChannelConfig::set_channel(const char* value, size_t size) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayChannelConfig::mutable_channel() {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  return channel_;
}
inline ::std::string* PayChannelConfig::release_channel() {
  clear_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_;
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PayChannelConfig::set_allocated_channel(::std::string* channel) {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (channel) {
    set_has_channel();
    channel_ = channel;
  } else {
    clear_has_channel();
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 id = 1;
inline bool PayChannelConfig::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PayChannelConfig::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PayChannelConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PayChannelConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PayChannelConfig::id() const {
  return id_;
}
inline void PayChannelConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string array = 5;
inline bool PayChannelConfig::has_array() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PayChannelConfig::set_has_array() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PayChannelConfig::clear_has_array() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PayChannelConfig::clear_array() {
  if (array_ != &::google::protobuf::internal::kEmptyString) {
    array_->clear();
  }
  clear_has_array();
}
inline const ::std::string& PayChannelConfig::array() const {
  return *array_;
}
inline void PayChannelConfig::set_array(const ::std::string& value) {
  set_has_array();
  if (array_ == &::google::protobuf::internal::kEmptyString) {
    array_ = new ::std::string;
  }
  array_->assign(value);
}
inline void PayChannelConfig::set_array(const char* value) {
  set_has_array();
  if (array_ == &::google::protobuf::internal::kEmptyString) {
    array_ = new ::std::string;
  }
  array_->assign(value);
}
inline void PayChannelConfig::set_array(const char* value, size_t size) {
  set_has_array();
  if (array_ == &::google::protobuf::internal::kEmptyString) {
    array_ = new ::std::string;
  }
  array_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayChannelConfig::mutable_array() {
  set_has_array();
  if (array_ == &::google::protobuf::internal::kEmptyString) {
    array_ = new ::std::string;
  }
  return array_;
}
inline ::std::string* PayChannelConfig::release_array() {
  clear_has_array();
  if (array_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = array_;
    array_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PayChannelConfig::set_allocated_array(::std::string* array) {
  if (array_ != &::google::protobuf::internal::kEmptyString) {
    delete array_;
  }
  if (array) {
    set_has_array();
    array_ = array;
  } else {
    clear_has_array();
    array_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string channel_name = 4;
inline bool PayChannelConfig::has_channel_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PayChannelConfig::set_has_channel_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PayChannelConfig::clear_has_channel_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PayChannelConfig::clear_channel_name() {
  if (channel_name_ != &::google::protobuf::internal::kEmptyString) {
    channel_name_->clear();
  }
  clear_has_channel_name();
}
inline const ::std::string& PayChannelConfig::channel_name() const {
  return *channel_name_;
}
inline void PayChannelConfig::set_channel_name(const ::std::string& value) {
  set_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::kEmptyString) {
    channel_name_ = new ::std::string;
  }
  channel_name_->assign(value);
}
inline void PayChannelConfig::set_channel_name(const char* value) {
  set_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::kEmptyString) {
    channel_name_ = new ::std::string;
  }
  channel_name_->assign(value);
}
inline void PayChannelConfig::set_channel_name(const char* value, size_t size) {
  set_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::kEmptyString) {
    channel_name_ = new ::std::string;
  }
  channel_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayChannelConfig::mutable_channel_name() {
  set_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::kEmptyString) {
    channel_name_ = new ::std::string;
  }
  return channel_name_;
}
inline ::std::string* PayChannelConfig::release_channel_name() {
  clear_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_name_;
    channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PayChannelConfig::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_name_;
  }
  if (channel_name) {
    set_has_channel_name();
    channel_name_ = channel_name;
  } else {
    clear_has_channel_name();
    channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string area = 3;
inline bool PayChannelConfig::has_area() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PayChannelConfig::set_has_area() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PayChannelConfig::clear_has_area() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PayChannelConfig::clear_area() {
  if (area_ != &::google::protobuf::internal::kEmptyString) {
    area_->clear();
  }
  clear_has_area();
}
inline const ::std::string& PayChannelConfig::area() const {
  return *area_;
}
inline void PayChannelConfig::set_area(const ::std::string& value) {
  set_has_area();
  if (area_ == &::google::protobuf::internal::kEmptyString) {
    area_ = new ::std::string;
  }
  area_->assign(value);
}
inline void PayChannelConfig::set_area(const char* value) {
  set_has_area();
  if (area_ == &::google::protobuf::internal::kEmptyString) {
    area_ = new ::std::string;
  }
  area_->assign(value);
}
inline void PayChannelConfig::set_area(const char* value, size_t size) {
  set_has_area();
  if (area_ == &::google::protobuf::internal::kEmptyString) {
    area_ = new ::std::string;
  }
  area_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayChannelConfig::mutable_area() {
  set_has_area();
  if (area_ == &::google::protobuf::internal::kEmptyString) {
    area_ = new ::std::string;
  }
  return area_;
}
inline ::std::string* PayChannelConfig::release_area() {
  clear_has_area();
  if (area_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = area_;
    area_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PayChannelConfig::set_allocated_area(::std::string* area) {
  if (area_ != &::google::protobuf::internal::kEmptyString) {
    delete area_;
  }
  if (area) {
    set_has_area();
    area_ = area;
  } else {
    clear_has_area();
    area_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PayChannelConfig_2eproto__INCLUDED

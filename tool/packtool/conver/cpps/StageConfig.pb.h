// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StageConfig.proto

#ifndef PROTOBUF_StageConfig_2eproto__INCLUDED
#define PROTOBUF_StageConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_StageConfig_2eproto();
void protobuf_AssignDesc_StageConfig_2eproto();
void protobuf_ShutdownFile_StageConfig_2eproto();

class StageConfig;

// ===================================================================

class StageConfig : public ::google::protobuf::Message {
 public:
  StageConfig();
  virtual ~StageConfig();

  StageConfig(const StageConfig& from);

  inline StageConfig& operator=(const StageConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StageConfig& default_instance();

  void Swap(StageConfig* other);

  // implements Message ----------------------------------------------

  StageConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StageConfig& from);
  void MergeFrom(const StageConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 difficulty_type = 11;
  inline bool has_difficulty_type() const;
  inline void clear_difficulty_type();
  static const int kDifficultyTypeFieldNumber = 11;
  inline ::google::protobuf::int32 difficulty_type() const;
  inline void set_difficulty_type(::google::protobuf::int32 value);

  // optional int32 cost = 24;
  inline bool has_cost() const;
  inline void clear_cost();
  static const int kCostFieldNumber = 24;
  inline ::google::protobuf::int32 cost() const;
  inline void set_cost(::google::protobuf::int32 value);

  // optional string stage_desc = 9;
  inline bool has_stage_desc() const;
  inline void clear_stage_desc();
  static const int kStageDescFieldNumber = 9;
  inline const ::std::string& stage_desc() const;
  inline void set_stage_desc(const ::std::string& value);
  inline void set_stage_desc(const char* value);
  inline void set_stage_desc(const char* value, size_t size);
  inline ::std::string* mutable_stage_desc();
  inline ::std::string* release_stage_desc();
  inline void set_allocated_stage_desc(::std::string* stage_desc);

  // repeated int32 first_drop = 21;
  inline int first_drop_size() const;
  inline void clear_first_drop();
  static const int kFirstDropFieldNumber = 21;
  inline ::google::protobuf::int32 first_drop(int index) const;
  inline void set_first_drop(int index, ::google::protobuf::int32 value);
  inline void add_first_drop(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      first_drop() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_first_drop();

  // optional int32 condition = 25;
  inline bool has_condition() const;
  inline void clear_condition();
  static const int kConditionFieldNumber = 25;
  inline ::google::protobuf::int32 condition() const;
  inline void set_condition(::google::protobuf::int32 value);

  // optional int32 monster_group = 16;
  inline bool has_monster_group() const;
  inline void clear_monster_group();
  static const int kMonsterGroupFieldNumber = 16;
  inline ::google::protobuf::int32 monster_group() const;
  inline void set_monster_group(::google::protobuf::int32 value);

  // optional int32 required_char_level = 7;
  inline bool has_required_char_level() const;
  inline void clear_required_char_level();
  static const int kRequiredCharLevelFieldNumber = 7;
  inline ::google::protobuf::int32 required_char_level() const;
  inline void set_required_char_level(::google::protobuf::int32 value);

  // optional int32 close_time = 6;
  inline bool has_close_time() const;
  inline void clear_close_time();
  static const int kCloseTimeFieldNumber = 6;
  inline ::google::protobuf::int32 close_time() const;
  inline void set_close_time(::google::protobuf::int32 value);

  // optional string chapter_name = 13;
  inline bool has_chapter_name() const;
  inline void clear_chapter_name();
  static const int kChapterNameFieldNumber = 13;
  inline const ::std::string& chapter_name() const;
  inline void set_chapter_name(const ::std::string& value);
  inline void set_chapter_name(const char* value);
  inline void set_chapter_name(const char* value, size_t size);
  inline ::std::string* mutable_chapter_name();
  inline ::std::string* release_chapter_name();
  inline void set_allocated_chapter_name(::std::string* chapter_name);

  // optional int32 stage_type = 10;
  inline bool has_stage_type() const;
  inline void clear_stage_type();
  static const int kStageTypeFieldNumber = 10;
  inline ::google::protobuf::int32 stage_type() const;
  inline void set_stage_type(::google::protobuf::int32 value);

  // optional int32 background = 18;
  inline bool has_background() const;
  inline void clear_background();
  static const int kBackgroundFieldNumber = 18;
  inline ::google::protobuf::int32 background() const;
  inline void set_background(::google::protobuf::int32 value);

  // optional int32 vip_buy_count = 30;
  inline bool has_vip_buy_count() const;
  inline void clear_vip_buy_count();
  static const int kVipBuyCountFieldNumber = 30;
  inline ::google::protobuf::int32 vip_buy_count() const;
  inline void set_vip_buy_count(::google::protobuf::int32 value);

  // optional int32 card_exp = 29;
  inline bool has_card_exp() const;
  inline void clear_card_exp();
  static const int kCardExpFieldNumber = 29;
  inline ::google::protobuf::int32 card_exp() const;
  inline void set_card_exp(::google::protobuf::int32 value);

  // optional int32 pre_stage = 2;
  inline bool has_pre_stage() const;
  inline void clear_pre_stage();
  static const int kPreStageFieldNumber = 2;
  inline ::google::protobuf::int32 pre_stage() const;
  inline void set_pre_stage(::google::protobuf::int32 value);

  // optional int32 enter_cd = 28;
  inline bool has_enter_cd() const;
  inline void clear_enter_cd();
  static const int kEnterCdFieldNumber = 28;
  inline ::google::protobuf::int32 enter_cd() const;
  inline void set_enter_cd(::google::protobuf::int32 value);

  // optional int32 stage_char_exp = 19;
  inline bool has_stage_char_exp() const;
  inline void clear_stage_char_exp();
  static const int kStageCharExpFieldNumber = 19;
  inline ::google::protobuf::int32 stage_char_exp() const;
  inline void set_stage_char_exp(::google::protobuf::int32 value);

  // optional int32 open_time = 5;
  inline bool has_open_time() const;
  inline void clear_open_time();
  static const int kOpenTimeFieldNumber = 5;
  inline ::google::protobuf::int32 open_time() const;
  inline void set_open_time(::google::protobuf::int32 value);

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 permit_buy = 27;
  inline bool has_permit_buy() const;
  inline void clear_permit_buy();
  static const int kPermitBuyFieldNumber = 27;
  inline ::google::protobuf::int32 permit_buy() const;
  inline void set_permit_buy(::google::protobuf::int32 value);

  // optional int32 next_stage = 3;
  inline bool has_next_stage() const;
  inline void clear_next_stage();
  static const int kNextStageFieldNumber = 3;
  inline ::google::protobuf::int32 next_stage() const;
  inline void set_next_stage(::google::protobuf::int32 value);

  // optional int32 unit_head_pic = 26;
  inline bool has_unit_head_pic() const;
  inline void clear_unit_head_pic();
  static const int kUnitHeadPicFieldNumber = 26;
  inline ::google::protobuf::int32 unit_head_pic() const;
  inline void set_unit_head_pic(::google::protobuf::int32 value);

  // repeated int32 drop_show = 23;
  inline int drop_show_size() const;
  inline void clear_drop_show();
  static const int kDropShowFieldNumber = 23;
  inline ::google::protobuf::int32 drop_show(int index) const;
  inline void set_drop_show(int index, ::google::protobuf::int32 value);
  inline void add_drop_show(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      drop_show() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_drop_show();

  // repeated int32 drop = 22;
  inline int drop_size() const;
  inline void clear_drop();
  static const int kDropFieldNumber = 22;
  inline ::google::protobuf::int32 drop(int index) const;
  inline void set_drop(int index, ::google::protobuf::int32 value);
  inline void add_drop(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      drop() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_drop();

  // optional int32 day_enter_limit = 4;
  inline bool has_day_enter_limit() const;
  inline void clear_day_enter_limit();
  static const int kDayEnterLimitFieldNumber = 4;
  inline ::google::protobuf::int32 day_enter_limit() const;
  inline void set_day_enter_limit(::google::protobuf::int32 value);

  // optional int32 gate_hp = 14;
  inline bool has_gate_hp() const;
  inline void clear_gate_hp();
  static const int kGateHpFieldNumber = 14;
  inline ::google::protobuf::int32 gate_hp() const;
  inline void set_gate_hp(::google::protobuf::int32 value);

  // optional int32 stage_coin = 20;
  inline bool has_stage_coin() const;
  inline void clear_stage_coin();
  static const int kStageCoinFieldNumber = 20;
  inline ::google::protobuf::int32 stage_coin() const;
  inline void set_stage_coin(::google::protobuf::int32 value);

  // optional string stage_name = 8;
  inline bool has_stage_name() const;
  inline void clear_stage_name();
  static const int kStageNameFieldNumber = 8;
  inline const ::std::string& stage_name() const;
  inline void set_stage_name(const ::std::string& value);
  inline void set_stage_name(const char* value);
  inline void set_stage_name(const char* value, size_t size);
  inline ::std::string* mutable_stage_name();
  inline ::std::string* release_stage_name();
  inline void set_allocated_stage_name(::std::string* stage_name);

  // optional int32 territory = 17;
  inline bool has_territory() const;
  inline void clear_territory();
  static const int kTerritoryFieldNumber = 17;
  inline ::google::protobuf::int32 territory() const;
  inline void set_territory(::google::protobuf::int32 value);

  // optional int32 chapter_id = 12;
  inline bool has_chapter_id() const;
  inline void clear_chapter_id();
  static const int kChapterIdFieldNumber = 12;
  inline ::google::protobuf::int32 chapter_id() const;
  inline void set_chapter_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DianShiTech.Config.StageConfig)
 private:
  inline void set_has_difficulty_type();
  inline void clear_has_difficulty_type();
  inline void set_has_cost();
  inline void clear_has_cost();
  inline void set_has_stage_desc();
  inline void clear_has_stage_desc();
  inline void set_has_condition();
  inline void clear_has_condition();
  inline void set_has_monster_group();
  inline void clear_has_monster_group();
  inline void set_has_required_char_level();
  inline void clear_has_required_char_level();
  inline void set_has_close_time();
  inline void clear_has_close_time();
  inline void set_has_chapter_name();
  inline void clear_has_chapter_name();
  inline void set_has_stage_type();
  inline void clear_has_stage_type();
  inline void set_has_background();
  inline void clear_has_background();
  inline void set_has_vip_buy_count();
  inline void clear_has_vip_buy_count();
  inline void set_has_card_exp();
  inline void clear_has_card_exp();
  inline void set_has_pre_stage();
  inline void clear_has_pre_stage();
  inline void set_has_enter_cd();
  inline void clear_has_enter_cd();
  inline void set_has_stage_char_exp();
  inline void clear_has_stage_char_exp();
  inline void set_has_open_time();
  inline void clear_has_open_time();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_permit_buy();
  inline void clear_has_permit_buy();
  inline void set_has_next_stage();
  inline void clear_has_next_stage();
  inline void set_has_unit_head_pic();
  inline void clear_has_unit_head_pic();
  inline void set_has_day_enter_limit();
  inline void clear_has_day_enter_limit();
  inline void set_has_gate_hp();
  inline void clear_has_gate_hp();
  inline void set_has_stage_coin();
  inline void clear_has_stage_coin();
  inline void set_has_stage_name();
  inline void clear_has_stage_name();
  inline void set_has_territory();
  inline void clear_has_territory();
  inline void set_has_chapter_id();
  inline void clear_has_chapter_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 difficulty_type_;
  ::google::protobuf::int32 cost_;
  ::std::string* stage_desc_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > first_drop_;
  ::google::protobuf::int32 condition_;
  ::google::protobuf::int32 monster_group_;
  ::google::protobuf::int32 required_char_level_;
  ::google::protobuf::int32 close_time_;
  ::std::string* chapter_name_;
  ::google::protobuf::int32 stage_type_;
  ::google::protobuf::int32 background_;
  ::google::protobuf::int32 vip_buy_count_;
  ::google::protobuf::int32 card_exp_;
  ::google::protobuf::int32 pre_stage_;
  ::google::protobuf::int32 enter_cd_;
  ::google::protobuf::int32 stage_char_exp_;
  ::google::protobuf::int32 open_time_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 permit_buy_;
  ::google::protobuf::int32 next_stage_;
  ::google::protobuf::int32 unit_head_pic_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > drop_show_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > drop_;
  ::google::protobuf::int32 day_enter_limit_;
  ::google::protobuf::int32 gate_hp_;
  ::std::string* stage_name_;
  ::google::protobuf::int32 stage_coin_;
  ::google::protobuf::int32 territory_;
  ::google::protobuf::int32 chapter_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(29 + 31) / 32];

  friend void  protobuf_AddDesc_StageConfig_2eproto();
  friend void protobuf_AssignDesc_StageConfig_2eproto();
  friend void protobuf_ShutdownFile_StageConfig_2eproto();

  void InitAsDefaultInstance();
  static StageConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// StageConfig

// optional int32 difficulty_type = 11;
inline bool StageConfig::has_difficulty_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StageConfig::set_has_difficulty_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StageConfig::clear_has_difficulty_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StageConfig::clear_difficulty_type() {
  difficulty_type_ = 0;
  clear_has_difficulty_type();
}
inline ::google::protobuf::int32 StageConfig::difficulty_type() const {
  return difficulty_type_;
}
inline void StageConfig::set_difficulty_type(::google::protobuf::int32 value) {
  set_has_difficulty_type();
  difficulty_type_ = value;
}

// optional int32 cost = 24;
inline bool StageConfig::has_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StageConfig::set_has_cost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StageConfig::clear_has_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StageConfig::clear_cost() {
  cost_ = 0;
  clear_has_cost();
}
inline ::google::protobuf::int32 StageConfig::cost() const {
  return cost_;
}
inline void StageConfig::set_cost(::google::protobuf::int32 value) {
  set_has_cost();
  cost_ = value;
}

// optional string stage_desc = 9;
inline bool StageConfig::has_stage_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StageConfig::set_has_stage_desc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StageConfig::clear_has_stage_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StageConfig::clear_stage_desc() {
  if (stage_desc_ != &::google::protobuf::internal::kEmptyString) {
    stage_desc_->clear();
  }
  clear_has_stage_desc();
}
inline const ::std::string& StageConfig::stage_desc() const {
  return *stage_desc_;
}
inline void StageConfig::set_stage_desc(const ::std::string& value) {
  set_has_stage_desc();
  if (stage_desc_ == &::google::protobuf::internal::kEmptyString) {
    stage_desc_ = new ::std::string;
  }
  stage_desc_->assign(value);
}
inline void StageConfig::set_stage_desc(const char* value) {
  set_has_stage_desc();
  if (stage_desc_ == &::google::protobuf::internal::kEmptyString) {
    stage_desc_ = new ::std::string;
  }
  stage_desc_->assign(value);
}
inline void StageConfig::set_stage_desc(const char* value, size_t size) {
  set_has_stage_desc();
  if (stage_desc_ == &::google::protobuf::internal::kEmptyString) {
    stage_desc_ = new ::std::string;
  }
  stage_desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StageConfig::mutable_stage_desc() {
  set_has_stage_desc();
  if (stage_desc_ == &::google::protobuf::internal::kEmptyString) {
    stage_desc_ = new ::std::string;
  }
  return stage_desc_;
}
inline ::std::string* StageConfig::release_stage_desc() {
  clear_has_stage_desc();
  if (stage_desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stage_desc_;
    stage_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StageConfig::set_allocated_stage_desc(::std::string* stage_desc) {
  if (stage_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete stage_desc_;
  }
  if (stage_desc) {
    set_has_stage_desc();
    stage_desc_ = stage_desc;
  } else {
    clear_has_stage_desc();
    stage_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 first_drop = 21;
inline int StageConfig::first_drop_size() const {
  return first_drop_.size();
}
inline void StageConfig::clear_first_drop() {
  first_drop_.Clear();
}
inline ::google::protobuf::int32 StageConfig::first_drop(int index) const {
  return first_drop_.Get(index);
}
inline void StageConfig::set_first_drop(int index, ::google::protobuf::int32 value) {
  first_drop_.Set(index, value);
}
inline void StageConfig::add_first_drop(::google::protobuf::int32 value) {
  first_drop_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
StageConfig::first_drop() const {
  return first_drop_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
StageConfig::mutable_first_drop() {
  return &first_drop_;
}

// optional int32 condition = 25;
inline bool StageConfig::has_condition() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StageConfig::set_has_condition() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StageConfig::clear_has_condition() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StageConfig::clear_condition() {
  condition_ = 0;
  clear_has_condition();
}
inline ::google::protobuf::int32 StageConfig::condition() const {
  return condition_;
}
inline void StageConfig::set_condition(::google::protobuf::int32 value) {
  set_has_condition();
  condition_ = value;
}

// optional int32 monster_group = 16;
inline bool StageConfig::has_monster_group() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StageConfig::set_has_monster_group() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StageConfig::clear_has_monster_group() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StageConfig::clear_monster_group() {
  monster_group_ = 0;
  clear_has_monster_group();
}
inline ::google::protobuf::int32 StageConfig::monster_group() const {
  return monster_group_;
}
inline void StageConfig::set_monster_group(::google::protobuf::int32 value) {
  set_has_monster_group();
  monster_group_ = value;
}

// optional int32 required_char_level = 7;
inline bool StageConfig::has_required_char_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StageConfig::set_has_required_char_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StageConfig::clear_has_required_char_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StageConfig::clear_required_char_level() {
  required_char_level_ = 0;
  clear_has_required_char_level();
}
inline ::google::protobuf::int32 StageConfig::required_char_level() const {
  return required_char_level_;
}
inline void StageConfig::set_required_char_level(::google::protobuf::int32 value) {
  set_has_required_char_level();
  required_char_level_ = value;
}

// optional int32 close_time = 6;
inline bool StageConfig::has_close_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StageConfig::set_has_close_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StageConfig::clear_has_close_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StageConfig::clear_close_time() {
  close_time_ = 0;
  clear_has_close_time();
}
inline ::google::protobuf::int32 StageConfig::close_time() const {
  return close_time_;
}
inline void StageConfig::set_close_time(::google::protobuf::int32 value) {
  set_has_close_time();
  close_time_ = value;
}

// optional string chapter_name = 13;
inline bool StageConfig::has_chapter_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StageConfig::set_has_chapter_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StageConfig::clear_has_chapter_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StageConfig::clear_chapter_name() {
  if (chapter_name_ != &::google::protobuf::internal::kEmptyString) {
    chapter_name_->clear();
  }
  clear_has_chapter_name();
}
inline const ::std::string& StageConfig::chapter_name() const {
  return *chapter_name_;
}
inline void StageConfig::set_chapter_name(const ::std::string& value) {
  set_has_chapter_name();
  if (chapter_name_ == &::google::protobuf::internal::kEmptyString) {
    chapter_name_ = new ::std::string;
  }
  chapter_name_->assign(value);
}
inline void StageConfig::set_chapter_name(const char* value) {
  set_has_chapter_name();
  if (chapter_name_ == &::google::protobuf::internal::kEmptyString) {
    chapter_name_ = new ::std::string;
  }
  chapter_name_->assign(value);
}
inline void StageConfig::set_chapter_name(const char* value, size_t size) {
  set_has_chapter_name();
  if (chapter_name_ == &::google::protobuf::internal::kEmptyString) {
    chapter_name_ = new ::std::string;
  }
  chapter_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StageConfig::mutable_chapter_name() {
  set_has_chapter_name();
  if (chapter_name_ == &::google::protobuf::internal::kEmptyString) {
    chapter_name_ = new ::std::string;
  }
  return chapter_name_;
}
inline ::std::string* StageConfig::release_chapter_name() {
  clear_has_chapter_name();
  if (chapter_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chapter_name_;
    chapter_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StageConfig::set_allocated_chapter_name(::std::string* chapter_name) {
  if (chapter_name_ != &::google::protobuf::internal::kEmptyString) {
    delete chapter_name_;
  }
  if (chapter_name) {
    set_has_chapter_name();
    chapter_name_ = chapter_name;
  } else {
    clear_has_chapter_name();
    chapter_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 stage_type = 10;
inline bool StageConfig::has_stage_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StageConfig::set_has_stage_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StageConfig::clear_has_stage_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StageConfig::clear_stage_type() {
  stage_type_ = 0;
  clear_has_stage_type();
}
inline ::google::protobuf::int32 StageConfig::stage_type() const {
  return stage_type_;
}
inline void StageConfig::set_stage_type(::google::protobuf::int32 value) {
  set_has_stage_type();
  stage_type_ = value;
}

// optional int32 background = 18;
inline bool StageConfig::has_background() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void StageConfig::set_has_background() {
  _has_bits_[0] |= 0x00000400u;
}
inline void StageConfig::clear_has_background() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void StageConfig::clear_background() {
  background_ = 0;
  clear_has_background();
}
inline ::google::protobuf::int32 StageConfig::background() const {
  return background_;
}
inline void StageConfig::set_background(::google::protobuf::int32 value) {
  set_has_background();
  background_ = value;
}

// optional int32 vip_buy_count = 30;
inline bool StageConfig::has_vip_buy_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void StageConfig::set_has_vip_buy_count() {
  _has_bits_[0] |= 0x00000800u;
}
inline void StageConfig::clear_has_vip_buy_count() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void StageConfig::clear_vip_buy_count() {
  vip_buy_count_ = 0;
  clear_has_vip_buy_count();
}
inline ::google::protobuf::int32 StageConfig::vip_buy_count() const {
  return vip_buy_count_;
}
inline void StageConfig::set_vip_buy_count(::google::protobuf::int32 value) {
  set_has_vip_buy_count();
  vip_buy_count_ = value;
}

// optional int32 card_exp = 29;
inline bool StageConfig::has_card_exp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void StageConfig::set_has_card_exp() {
  _has_bits_[0] |= 0x00001000u;
}
inline void StageConfig::clear_has_card_exp() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void StageConfig::clear_card_exp() {
  card_exp_ = 0;
  clear_has_card_exp();
}
inline ::google::protobuf::int32 StageConfig::card_exp() const {
  return card_exp_;
}
inline void StageConfig::set_card_exp(::google::protobuf::int32 value) {
  set_has_card_exp();
  card_exp_ = value;
}

// optional int32 pre_stage = 2;
inline bool StageConfig::has_pre_stage() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void StageConfig::set_has_pre_stage() {
  _has_bits_[0] |= 0x00002000u;
}
inline void StageConfig::clear_has_pre_stage() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void StageConfig::clear_pre_stage() {
  pre_stage_ = 0;
  clear_has_pre_stage();
}
inline ::google::protobuf::int32 StageConfig::pre_stage() const {
  return pre_stage_;
}
inline void StageConfig::set_pre_stage(::google::protobuf::int32 value) {
  set_has_pre_stage();
  pre_stage_ = value;
}

// optional int32 enter_cd = 28;
inline bool StageConfig::has_enter_cd() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void StageConfig::set_has_enter_cd() {
  _has_bits_[0] |= 0x00004000u;
}
inline void StageConfig::clear_has_enter_cd() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void StageConfig::clear_enter_cd() {
  enter_cd_ = 0;
  clear_has_enter_cd();
}
inline ::google::protobuf::int32 StageConfig::enter_cd() const {
  return enter_cd_;
}
inline void StageConfig::set_enter_cd(::google::protobuf::int32 value) {
  set_has_enter_cd();
  enter_cd_ = value;
}

// optional int32 stage_char_exp = 19;
inline bool StageConfig::has_stage_char_exp() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void StageConfig::set_has_stage_char_exp() {
  _has_bits_[0] |= 0x00008000u;
}
inline void StageConfig::clear_has_stage_char_exp() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void StageConfig::clear_stage_char_exp() {
  stage_char_exp_ = 0;
  clear_has_stage_char_exp();
}
inline ::google::protobuf::int32 StageConfig::stage_char_exp() const {
  return stage_char_exp_;
}
inline void StageConfig::set_stage_char_exp(::google::protobuf::int32 value) {
  set_has_stage_char_exp();
  stage_char_exp_ = value;
}

// optional int32 open_time = 5;
inline bool StageConfig::has_open_time() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void StageConfig::set_has_open_time() {
  _has_bits_[0] |= 0x00010000u;
}
inline void StageConfig::clear_has_open_time() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void StageConfig::clear_open_time() {
  open_time_ = 0;
  clear_has_open_time();
}
inline ::google::protobuf::int32 StageConfig::open_time() const {
  return open_time_;
}
inline void StageConfig::set_open_time(::google::protobuf::int32 value) {
  set_has_open_time();
  open_time_ = value;
}

// optional int32 id = 1;
inline bool StageConfig::has_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void StageConfig::set_has_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void StageConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void StageConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 StageConfig::id() const {
  return id_;
}
inline void StageConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 permit_buy = 27;
inline bool StageConfig::has_permit_buy() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void StageConfig::set_has_permit_buy() {
  _has_bits_[0] |= 0x00040000u;
}
inline void StageConfig::clear_has_permit_buy() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void StageConfig::clear_permit_buy() {
  permit_buy_ = 0;
  clear_has_permit_buy();
}
inline ::google::protobuf::int32 StageConfig::permit_buy() const {
  return permit_buy_;
}
inline void StageConfig::set_permit_buy(::google::protobuf::int32 value) {
  set_has_permit_buy();
  permit_buy_ = value;
}

// optional int32 next_stage = 3;
inline bool StageConfig::has_next_stage() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void StageConfig::set_has_next_stage() {
  _has_bits_[0] |= 0x00080000u;
}
inline void StageConfig::clear_has_next_stage() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void StageConfig::clear_next_stage() {
  next_stage_ = 0;
  clear_has_next_stage();
}
inline ::google::protobuf::int32 StageConfig::next_stage() const {
  return next_stage_;
}
inline void StageConfig::set_next_stage(::google::protobuf::int32 value) {
  set_has_next_stage();
  next_stage_ = value;
}

// optional int32 unit_head_pic = 26;
inline bool StageConfig::has_unit_head_pic() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void StageConfig::set_has_unit_head_pic() {
  _has_bits_[0] |= 0x00100000u;
}
inline void StageConfig::clear_has_unit_head_pic() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void StageConfig::clear_unit_head_pic() {
  unit_head_pic_ = 0;
  clear_has_unit_head_pic();
}
inline ::google::protobuf::int32 StageConfig::unit_head_pic() const {
  return unit_head_pic_;
}
inline void StageConfig::set_unit_head_pic(::google::protobuf::int32 value) {
  set_has_unit_head_pic();
  unit_head_pic_ = value;
}

// repeated int32 drop_show = 23;
inline int StageConfig::drop_show_size() const {
  return drop_show_.size();
}
inline void StageConfig::clear_drop_show() {
  drop_show_.Clear();
}
inline ::google::protobuf::int32 StageConfig::drop_show(int index) const {
  return drop_show_.Get(index);
}
inline void StageConfig::set_drop_show(int index, ::google::protobuf::int32 value) {
  drop_show_.Set(index, value);
}
inline void StageConfig::add_drop_show(::google::protobuf::int32 value) {
  drop_show_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
StageConfig::drop_show() const {
  return drop_show_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
StageConfig::mutable_drop_show() {
  return &drop_show_;
}

// repeated int32 drop = 22;
inline int StageConfig::drop_size() const {
  return drop_.size();
}
inline void StageConfig::clear_drop() {
  drop_.Clear();
}
inline ::google::protobuf::int32 StageConfig::drop(int index) const {
  return drop_.Get(index);
}
inline void StageConfig::set_drop(int index, ::google::protobuf::int32 value) {
  drop_.Set(index, value);
}
inline void StageConfig::add_drop(::google::protobuf::int32 value) {
  drop_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
StageConfig::drop() const {
  return drop_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
StageConfig::mutable_drop() {
  return &drop_;
}

// optional int32 day_enter_limit = 4;
inline bool StageConfig::has_day_enter_limit() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void StageConfig::set_has_day_enter_limit() {
  _has_bits_[0] |= 0x00800000u;
}
inline void StageConfig::clear_has_day_enter_limit() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void StageConfig::clear_day_enter_limit() {
  day_enter_limit_ = 0;
  clear_has_day_enter_limit();
}
inline ::google::protobuf::int32 StageConfig::day_enter_limit() const {
  return day_enter_limit_;
}
inline void StageConfig::set_day_enter_limit(::google::protobuf::int32 value) {
  set_has_day_enter_limit();
  day_enter_limit_ = value;
}

// optional int32 gate_hp = 14;
inline bool StageConfig::has_gate_hp() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void StageConfig::set_has_gate_hp() {
  _has_bits_[0] |= 0x01000000u;
}
inline void StageConfig::clear_has_gate_hp() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void StageConfig::clear_gate_hp() {
  gate_hp_ = 0;
  clear_has_gate_hp();
}
inline ::google::protobuf::int32 StageConfig::gate_hp() const {
  return gate_hp_;
}
inline void StageConfig::set_gate_hp(::google::protobuf::int32 value) {
  set_has_gate_hp();
  gate_hp_ = value;
}

// optional int32 stage_coin = 20;
inline bool StageConfig::has_stage_coin() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void StageConfig::set_has_stage_coin() {
  _has_bits_[0] |= 0x02000000u;
}
inline void StageConfig::clear_has_stage_coin() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void StageConfig::clear_stage_coin() {
  stage_coin_ = 0;
  clear_has_stage_coin();
}
inline ::google::protobuf::int32 StageConfig::stage_coin() const {
  return stage_coin_;
}
inline void StageConfig::set_stage_coin(::google::protobuf::int32 value) {
  set_has_stage_coin();
  stage_coin_ = value;
}

// optional string stage_name = 8;
inline bool StageConfig::has_stage_name() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void StageConfig::set_has_stage_name() {
  _has_bits_[0] |= 0x04000000u;
}
inline void StageConfig::clear_has_stage_name() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void StageConfig::clear_stage_name() {
  if (stage_name_ != &::google::protobuf::internal::kEmptyString) {
    stage_name_->clear();
  }
  clear_has_stage_name();
}
inline const ::std::string& StageConfig::stage_name() const {
  return *stage_name_;
}
inline void StageConfig::set_stage_name(const ::std::string& value) {
  set_has_stage_name();
  if (stage_name_ == &::google::protobuf::internal::kEmptyString) {
    stage_name_ = new ::std::string;
  }
  stage_name_->assign(value);
}
inline void StageConfig::set_stage_name(const char* value) {
  set_has_stage_name();
  if (stage_name_ == &::google::protobuf::internal::kEmptyString) {
    stage_name_ = new ::std::string;
  }
  stage_name_->assign(value);
}
inline void StageConfig::set_stage_name(const char* value, size_t size) {
  set_has_stage_name();
  if (stage_name_ == &::google::protobuf::internal::kEmptyString) {
    stage_name_ = new ::std::string;
  }
  stage_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StageConfig::mutable_stage_name() {
  set_has_stage_name();
  if (stage_name_ == &::google::protobuf::internal::kEmptyString) {
    stage_name_ = new ::std::string;
  }
  return stage_name_;
}
inline ::std::string* StageConfig::release_stage_name() {
  clear_has_stage_name();
  if (stage_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stage_name_;
    stage_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StageConfig::set_allocated_stage_name(::std::string* stage_name) {
  if (stage_name_ != &::google::protobuf::internal::kEmptyString) {
    delete stage_name_;
  }
  if (stage_name) {
    set_has_stage_name();
    stage_name_ = stage_name;
  } else {
    clear_has_stage_name();
    stage_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 territory = 17;
inline bool StageConfig::has_territory() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void StageConfig::set_has_territory() {
  _has_bits_[0] |= 0x08000000u;
}
inline void StageConfig::clear_has_territory() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void StageConfig::clear_territory() {
  territory_ = 0;
  clear_has_territory();
}
inline ::google::protobuf::int32 StageConfig::territory() const {
  return territory_;
}
inline void StageConfig::set_territory(::google::protobuf::int32 value) {
  set_has_territory();
  territory_ = value;
}

// optional int32 chapter_id = 12;
inline bool StageConfig::has_chapter_id() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void StageConfig::set_has_chapter_id() {
  _has_bits_[0] |= 0x10000000u;
}
inline void StageConfig::clear_has_chapter_id() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void StageConfig::clear_chapter_id() {
  chapter_id_ = 0;
  clear_has_chapter_id();
}
inline ::google::protobuf::int32 StageConfig::chapter_id() const {
  return chapter_id_;
}
inline void StageConfig::set_chapter_id(::google::protobuf::int32 value) {
  set_has_chapter_id();
  chapter_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_StageConfig_2eproto__INCLUDED

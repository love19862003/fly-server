// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ErnieBonusConfig.proto

#ifndef PROTOBUF_ErnieBonusConfig_2eproto__INCLUDED
#define PROTOBUF_ErnieBonusConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ErnieBonusConfig_2eproto();
void protobuf_AssignDesc_ErnieBonusConfig_2eproto();
void protobuf_ShutdownFile_ErnieBonusConfig_2eproto();

class ErnieBonusConfig;

// ===================================================================

class ErnieBonusConfig : public ::google::protobuf::Message {
 public:
  ErnieBonusConfig();
  virtual ~ErnieBonusConfig();

  ErnieBonusConfig(const ErnieBonusConfig& from);

  inline ErnieBonusConfig& operator=(const ErnieBonusConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ErnieBonusConfig& default_instance();

  void Swap(ErnieBonusConfig* other);

  // implements Message ----------------------------------------------

  ErnieBonusConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ErnieBonusConfig& from);
  void MergeFrom(const ErnieBonusConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 first_add_drop = 4;
  inline int first_add_drop_size() const;
  inline void clear_first_add_drop();
  static const int kFirstAddDropFieldNumber = 4;
  inline ::google::protobuf::int32 first_add_drop(int index) const;
  inline void set_first_add_drop(int index, ::google::protobuf::int32 value);
  inline void add_first_add_drop(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      first_add_drop() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_first_add_drop();

  // optional int32 cost = 7;
  inline bool has_cost() const;
  inline void clear_cost();
  static const int kCostFieldNumber = 7;
  inline ::google::protobuf::int32 cost() const;
  inline void set_cost(::google::protobuf::int32 value);

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated int32 puzzle_drop = 6;
  inline int puzzle_drop_size() const;
  inline void clear_puzzle_drop();
  static const int kPuzzleDropFieldNumber = 6;
  inline ::google::protobuf::int32 puzzle_drop(int index) const;
  inline void set_puzzle_drop(int index, ::google::protobuf::int32 value);
  inline void add_puzzle_drop(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      puzzle_drop() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_puzzle_drop();

  // optional string desc = 9;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 9;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // optional int32 replace_count = 10;
  inline bool has_replace_count() const;
  inline void clear_replace_count();
  static const int kReplaceCountFieldNumber = 10;
  inline ::google::protobuf::int32 replace_count() const;
  inline void set_replace_count(::google::protobuf::int32 value);

  // repeated int32 drop_data = 3;
  inline int drop_data_size() const;
  inline void clear_drop_data();
  static const int kDropDataFieldNumber = 3;
  inline ::google::protobuf::int32 drop_data(int index) const;
  inline void set_drop_data(int index, ::google::protobuf::int32 value);
  inline void add_drop_data(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      drop_data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_drop_data();

  // repeated int32 add_drop = 5;
  inline int add_drop_size() const;
  inline void clear_add_drop();
  static const int kAddDropFieldNumber = 5;
  inline ::google::protobuf::int32 add_drop(int index) const;
  inline void set_add_drop(int index, ::google::protobuf::int32 value);
  inline void add_add_drop(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      add_drop() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_add_drop();

  // optional int32 replace_drop = 11;
  inline bool has_replace_drop() const;
  inline void clear_replace_drop();
  static const int kReplaceDropFieldNumber = 11;
  inline ::google::protobuf::int32 replace_drop() const;
  inline void set_replace_drop(::google::protobuf::int32 value);

  // repeated int32 first_drop_data = 2;
  inline int first_drop_data_size() const;
  inline void clear_first_drop_data();
  static const int kFirstDropDataFieldNumber = 2;
  inline ::google::protobuf::int32 first_drop_data(int index) const;
  inline void set_first_drop_data(int index, ::google::protobuf::int32 value);
  inline void add_first_drop_data(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      first_drop_data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_first_drop_data();

  // repeated int32 ernie_display = 8;
  inline int ernie_display_size() const;
  inline void clear_ernie_display();
  static const int kErnieDisplayFieldNumber = 8;
  inline ::google::protobuf::int32 ernie_display(int index) const;
  inline void set_ernie_display(int index, ::google::protobuf::int32 value);
  inline void add_ernie_display(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ernie_display() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ernie_display();

  // @@protoc_insertion_point(class_scope:DianShiTech.Config.ErnieBonusConfig)
 private:
  inline void set_has_cost();
  inline void clear_has_cost();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_replace_count();
  inline void clear_has_replace_count();
  inline void set_has_replace_drop();
  inline void clear_has_replace_drop();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > first_add_drop_;
  ::google::protobuf::int32 cost_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > puzzle_drop_;
  ::std::string* desc_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > drop_data_;
  ::google::protobuf::int32 replace_count_;
  ::google::protobuf::int32 replace_drop_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > add_drop_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > first_drop_data_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ernie_display_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_ErnieBonusConfig_2eproto();
  friend void protobuf_AssignDesc_ErnieBonusConfig_2eproto();
  friend void protobuf_ShutdownFile_ErnieBonusConfig_2eproto();

  void InitAsDefaultInstance();
  static ErnieBonusConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// ErnieBonusConfig

// repeated int32 first_add_drop = 4;
inline int ErnieBonusConfig::first_add_drop_size() const {
  return first_add_drop_.size();
}
inline void ErnieBonusConfig::clear_first_add_drop() {
  first_add_drop_.Clear();
}
inline ::google::protobuf::int32 ErnieBonusConfig::first_add_drop(int index) const {
  return first_add_drop_.Get(index);
}
inline void ErnieBonusConfig::set_first_add_drop(int index, ::google::protobuf::int32 value) {
  first_add_drop_.Set(index, value);
}
inline void ErnieBonusConfig::add_first_add_drop(::google::protobuf::int32 value) {
  first_add_drop_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ErnieBonusConfig::first_add_drop() const {
  return first_add_drop_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ErnieBonusConfig::mutable_first_add_drop() {
  return &first_add_drop_;
}

// optional int32 cost = 7;
inline bool ErnieBonusConfig::has_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ErnieBonusConfig::set_has_cost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ErnieBonusConfig::clear_has_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ErnieBonusConfig::clear_cost() {
  cost_ = 0;
  clear_has_cost();
}
inline ::google::protobuf::int32 ErnieBonusConfig::cost() const {
  return cost_;
}
inline void ErnieBonusConfig::set_cost(::google::protobuf::int32 value) {
  set_has_cost();
  cost_ = value;
}

// optional int32 id = 1;
inline bool ErnieBonusConfig::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ErnieBonusConfig::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ErnieBonusConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ErnieBonusConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ErnieBonusConfig::id() const {
  return id_;
}
inline void ErnieBonusConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated int32 puzzle_drop = 6;
inline int ErnieBonusConfig::puzzle_drop_size() const {
  return puzzle_drop_.size();
}
inline void ErnieBonusConfig::clear_puzzle_drop() {
  puzzle_drop_.Clear();
}
inline ::google::protobuf::int32 ErnieBonusConfig::puzzle_drop(int index) const {
  return puzzle_drop_.Get(index);
}
inline void ErnieBonusConfig::set_puzzle_drop(int index, ::google::protobuf::int32 value) {
  puzzle_drop_.Set(index, value);
}
inline void ErnieBonusConfig::add_puzzle_drop(::google::protobuf::int32 value) {
  puzzle_drop_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ErnieBonusConfig::puzzle_drop() const {
  return puzzle_drop_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ErnieBonusConfig::mutable_puzzle_drop() {
  return &puzzle_drop_;
}

// optional string desc = 9;
inline bool ErnieBonusConfig::has_desc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ErnieBonusConfig::set_has_desc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ErnieBonusConfig::clear_has_desc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ErnieBonusConfig::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& ErnieBonusConfig::desc() const {
  return *desc_;
}
inline void ErnieBonusConfig::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void ErnieBonusConfig::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void ErnieBonusConfig::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ErnieBonusConfig::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* ErnieBonusConfig::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ErnieBonusConfig::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 replace_count = 10;
inline bool ErnieBonusConfig::has_replace_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ErnieBonusConfig::set_has_replace_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ErnieBonusConfig::clear_has_replace_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ErnieBonusConfig::clear_replace_count() {
  replace_count_ = 0;
  clear_has_replace_count();
}
inline ::google::protobuf::int32 ErnieBonusConfig::replace_count() const {
  return replace_count_;
}
inline void ErnieBonusConfig::set_replace_count(::google::protobuf::int32 value) {
  set_has_replace_count();
  replace_count_ = value;
}

// repeated int32 drop_data = 3;
inline int ErnieBonusConfig::drop_data_size() const {
  return drop_data_.size();
}
inline void ErnieBonusConfig::clear_drop_data() {
  drop_data_.Clear();
}
inline ::google::protobuf::int32 ErnieBonusConfig::drop_data(int index) const {
  return drop_data_.Get(index);
}
inline void ErnieBonusConfig::set_drop_data(int index, ::google::protobuf::int32 value) {
  drop_data_.Set(index, value);
}
inline void ErnieBonusConfig::add_drop_data(::google::protobuf::int32 value) {
  drop_data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ErnieBonusConfig::drop_data() const {
  return drop_data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ErnieBonusConfig::mutable_drop_data() {
  return &drop_data_;
}

// repeated int32 add_drop = 5;
inline int ErnieBonusConfig::add_drop_size() const {
  return add_drop_.size();
}
inline void ErnieBonusConfig::clear_add_drop() {
  add_drop_.Clear();
}
inline ::google::protobuf::int32 ErnieBonusConfig::add_drop(int index) const {
  return add_drop_.Get(index);
}
inline void ErnieBonusConfig::set_add_drop(int index, ::google::protobuf::int32 value) {
  add_drop_.Set(index, value);
}
inline void ErnieBonusConfig::add_add_drop(::google::protobuf::int32 value) {
  add_drop_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ErnieBonusConfig::add_drop() const {
  return add_drop_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ErnieBonusConfig::mutable_add_drop() {
  return &add_drop_;
}

// optional int32 replace_drop = 11;
inline bool ErnieBonusConfig::has_replace_drop() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ErnieBonusConfig::set_has_replace_drop() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ErnieBonusConfig::clear_has_replace_drop() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ErnieBonusConfig::clear_replace_drop() {
  replace_drop_ = 0;
  clear_has_replace_drop();
}
inline ::google::protobuf::int32 ErnieBonusConfig::replace_drop() const {
  return replace_drop_;
}
inline void ErnieBonusConfig::set_replace_drop(::google::protobuf::int32 value) {
  set_has_replace_drop();
  replace_drop_ = value;
}

// repeated int32 first_drop_data = 2;
inline int ErnieBonusConfig::first_drop_data_size() const {
  return first_drop_data_.size();
}
inline void ErnieBonusConfig::clear_first_drop_data() {
  first_drop_data_.Clear();
}
inline ::google::protobuf::int32 ErnieBonusConfig::first_drop_data(int index) const {
  return first_drop_data_.Get(index);
}
inline void ErnieBonusConfig::set_first_drop_data(int index, ::google::protobuf::int32 value) {
  first_drop_data_.Set(index, value);
}
inline void ErnieBonusConfig::add_first_drop_data(::google::protobuf::int32 value) {
  first_drop_data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ErnieBonusConfig::first_drop_data() const {
  return first_drop_data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ErnieBonusConfig::mutable_first_drop_data() {
  return &first_drop_data_;
}

// repeated int32 ernie_display = 8;
inline int ErnieBonusConfig::ernie_display_size() const {
  return ernie_display_.size();
}
inline void ErnieBonusConfig::clear_ernie_display() {
  ernie_display_.Clear();
}
inline ::google::protobuf::int32 ErnieBonusConfig::ernie_display(int index) const {
  return ernie_display_.Get(index);
}
inline void ErnieBonusConfig::set_ernie_display(int index, ::google::protobuf::int32 value) {
  ernie_display_.Set(index, value);
}
inline void ErnieBonusConfig::add_ernie_display(::google::protobuf::int32 value) {
  ernie_display_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ErnieBonusConfig::ernie_display() const {
  return ernie_display_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ErnieBonusConfig::mutable_ernie_display() {
  return &ernie_display_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ErnieBonusConfig_2eproto__INCLUDED

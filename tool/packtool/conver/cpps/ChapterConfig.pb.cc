// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChapterConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ChapterConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* ChapterConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChapterConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ChapterConfig_2eproto() {
  protobuf_AddDesc_ChapterConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ChapterConfig.proto");
  GOOGLE_CHECK(file != NULL);
  ChapterConfig_descriptor_ = file->message_type(0);
  static const int ChapterConfig_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterConfig, map_flag_boss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterConfig, stage_effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterConfig, checkpoint_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterConfig, stage_type2_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterConfig, map_flag_hide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterConfig, checkpoint_icons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterConfig, chapter_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterConfig, map_line_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterConfig, auto_next_chapter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterConfig, map_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterConfig, stage_type1_order_),
  };
  ChapterConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChapterConfig_descriptor_,
      ChapterConfig::default_instance_,
      ChapterConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChapterConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ChapterConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChapterConfig_descriptor_, &ChapterConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ChapterConfig_2eproto() {
  delete ChapterConfig::default_instance_;
  delete ChapterConfig_reflection_;
}

void protobuf_AddDesc_ChapterConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ChapterConfig.proto\022\022DianShiTech.Confi"
    "g\032\025ConfigTypeGroup.proto\"\216\003\n\rChapterConf"
    "ig\022\025\n\rmap_flag_boss\030\007 \003(\005\022\024\n\014stage_effec"
    "t\030\014 \001(\005\022\n\n\002id\030\001 \001(\005\022;\n\016checkpoint_pos\030\013 "
    "\003(\0132#.DianShiTech.Config.ConfigTypeGroup"
    "\022>\n\021stage_type2_order\030\005 \003(\0132#.DianShiTec"
    "h.Config.ConfigTypeGroup\022\025\n\rmap_flag_hid"
    "e\030\006 \003(\005\022\030\n\020checkpoint_icons\030\n \003(\005\022\024\n\014cha"
    "pter_name\030\002 \001(\t\022\024\n\014map_line_res\030\t \001(\005\022\031\n"
    "\021auto_next_chapter\030\003 \001(\005\022\017\n\007map_res\030\010 \001("
    "\005\022>\n\021stage_type1_order\030\004 \003(\0132#.DianShiTe"
    "ch.Config.ConfigTypeGroup", 465);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ChapterConfig.proto", &protobuf_RegisterTypes);
  ChapterConfig::default_instance_ = new ChapterConfig();
  ChapterConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ChapterConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ChapterConfig_2eproto {
  StaticDescriptorInitializer_ChapterConfig_2eproto() {
    protobuf_AddDesc_ChapterConfig_2eproto();
  }
} static_descriptor_initializer_ChapterConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ChapterConfig::kMapFlagBossFieldNumber;
const int ChapterConfig::kStageEffectFieldNumber;
const int ChapterConfig::kIdFieldNumber;
const int ChapterConfig::kCheckpointPosFieldNumber;
const int ChapterConfig::kStageType2OrderFieldNumber;
const int ChapterConfig::kMapFlagHideFieldNumber;
const int ChapterConfig::kCheckpointIconsFieldNumber;
const int ChapterConfig::kChapterNameFieldNumber;
const int ChapterConfig::kMapLineResFieldNumber;
const int ChapterConfig::kAutoNextChapterFieldNumber;
const int ChapterConfig::kMapResFieldNumber;
const int ChapterConfig::kStageType1OrderFieldNumber;
#endif  // !_MSC_VER

ChapterConfig::ChapterConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChapterConfig::InitAsDefaultInstance() {
}

ChapterConfig::ChapterConfig(const ChapterConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChapterConfig::SharedCtor() {
  _cached_size_ = 0;
  stage_effect_ = 0;
  id_ = 0;
  chapter_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  map_line_res_ = 0;
  auto_next_chapter_ = 0;
  map_res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChapterConfig::~ChapterConfig() {
  SharedDtor();
}

void ChapterConfig::SharedDtor() {
  if (chapter_name_ != &::google::protobuf::internal::kEmptyString) {
    delete chapter_name_;
  }
  if (this != default_instance_) {
  }
}

void ChapterConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChapterConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChapterConfig_descriptor_;
}

const ChapterConfig& ChapterConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChapterConfig_2eproto();
  return *default_instance_;
}

ChapterConfig* ChapterConfig::default_instance_ = NULL;

ChapterConfig* ChapterConfig::New() const {
  return new ChapterConfig;
}

void ChapterConfig::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    stage_effect_ = 0;
    id_ = 0;
    if (has_chapter_name()) {
      if (chapter_name_ != &::google::protobuf::internal::kEmptyString) {
        chapter_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    map_line_res_ = 0;
    auto_next_chapter_ = 0;
    map_res_ = 0;
  }
  map_flag_boss_.Clear();
  checkpoint_pos_.Clear();
  stage_type2_order_.Clear();
  map_flag_hide_.Clear();
  checkpoint_icons_.Clear();
  stage_type1_order_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChapterConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chapter_name;
        break;
      }

      // optional string chapter_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chapter_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chapter_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chapter_name().data(), this->chapter_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_auto_next_chapter;
        break;
      }

      // optional int32 auto_next_chapter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_next_chapter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_next_chapter_)));
          set_has_auto_next_chapter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stage_type1_order;
        break;
      }

      // repeated .DianShiTech.Config.ConfigTypeGroup stage_type1_order = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stage_type1_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stage_type1_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stage_type1_order;
        if (input->ExpectTag(42)) goto parse_stage_type2_order;
        break;
      }

      // repeated .DianShiTech.Config.ConfigTypeGroup stage_type2_order = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stage_type2_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stage_type2_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stage_type2_order;
        if (input->ExpectTag(48)) goto parse_map_flag_hide;
        break;
      }

      // repeated int32 map_flag_hide = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_flag_hide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_map_flag_hide())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_map_flag_hide())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_map_flag_hide;
        if (input->ExpectTag(56)) goto parse_map_flag_boss;
        break;
      }

      // repeated int32 map_flag_boss = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_flag_boss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_map_flag_boss())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_map_flag_boss())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_map_flag_boss;
        if (input->ExpectTag(64)) goto parse_map_res;
        break;
      }

      // optional int32 map_res = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_res_)));
          set_has_map_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_map_line_res;
        break;
      }

      // optional int32 map_line_res = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_line_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_line_res_)));
          set_has_map_line_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_checkpoint_icons;
        break;
      }

      // repeated int32 checkpoint_icons = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checkpoint_icons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_checkpoint_icons())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_checkpoint_icons())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_checkpoint_icons;
        if (input->ExpectTag(90)) goto parse_checkpoint_pos;
        break;
      }

      // repeated .DianShiTech.Config.ConfigTypeGroup checkpoint_pos = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_checkpoint_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_checkpoint_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_checkpoint_pos;
        if (input->ExpectTag(96)) goto parse_stage_effect;
        break;
      }

      // optional int32 stage_effect = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_effect_)));
          set_has_stage_effect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChapterConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string chapter_name = 2;
  if (has_chapter_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chapter_name().data(), this->chapter_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->chapter_name(), output);
  }

  // optional int32 auto_next_chapter = 3;
  if (has_auto_next_chapter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->auto_next_chapter(), output);
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup stage_type1_order = 4;
  for (int i = 0; i < this->stage_type1_order_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stage_type1_order(i), output);
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup stage_type2_order = 5;
  for (int i = 0; i < this->stage_type2_order_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stage_type2_order(i), output);
  }

  // repeated int32 map_flag_hide = 6;
  for (int i = 0; i < this->map_flag_hide_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->map_flag_hide(i), output);
  }

  // repeated int32 map_flag_boss = 7;
  for (int i = 0; i < this->map_flag_boss_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->map_flag_boss(i), output);
  }

  // optional int32 map_res = 8;
  if (has_map_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->map_res(), output);
  }

  // optional int32 map_line_res = 9;
  if (has_map_line_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->map_line_res(), output);
  }

  // repeated int32 checkpoint_icons = 10;
  for (int i = 0; i < this->checkpoint_icons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->checkpoint_icons(i), output);
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup checkpoint_pos = 11;
  for (int i = 0; i < this->checkpoint_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->checkpoint_pos(i), output);
  }

  // optional int32 stage_effect = 12;
  if (has_stage_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->stage_effect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChapterConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string chapter_name = 2;
  if (has_chapter_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chapter_name().data(), this->chapter_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chapter_name(), target);
  }

  // optional int32 auto_next_chapter = 3;
  if (has_auto_next_chapter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->auto_next_chapter(), target);
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup stage_type1_order = 4;
  for (int i = 0; i < this->stage_type1_order_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stage_type1_order(i), target);
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup stage_type2_order = 5;
  for (int i = 0; i < this->stage_type2_order_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stage_type2_order(i), target);
  }

  // repeated int32 map_flag_hide = 6;
  for (int i = 0; i < this->map_flag_hide_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->map_flag_hide(i), target);
  }

  // repeated int32 map_flag_boss = 7;
  for (int i = 0; i < this->map_flag_boss_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->map_flag_boss(i), target);
  }

  // optional int32 map_res = 8;
  if (has_map_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->map_res(), target);
  }

  // optional int32 map_line_res = 9;
  if (has_map_line_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->map_line_res(), target);
  }

  // repeated int32 checkpoint_icons = 10;
  for (int i = 0; i < this->checkpoint_icons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->checkpoint_icons(i), target);
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup checkpoint_pos = 11;
  for (int i = 0; i < this->checkpoint_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->checkpoint_pos(i), target);
  }

  // optional int32 stage_effect = 12;
  if (has_stage_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->stage_effect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChapterConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 stage_effect = 12;
    if (has_stage_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_effect());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string chapter_name = 2;
    if (has_chapter_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chapter_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 map_line_res = 9;
    if (has_map_line_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_line_res());
    }

    // optional int32 auto_next_chapter = 3;
    if (has_auto_next_chapter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_next_chapter());
    }

    // optional int32 map_res = 8;
    if (has_map_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_res());
    }

  }
  // repeated int32 map_flag_boss = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->map_flag_boss_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->map_flag_boss(i));
    }
    total_size += 1 * this->map_flag_boss_size() + data_size;
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup checkpoint_pos = 11;
  total_size += 1 * this->checkpoint_pos_size();
  for (int i = 0; i < this->checkpoint_pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->checkpoint_pos(i));
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup stage_type2_order = 5;
  total_size += 1 * this->stage_type2_order_size();
  for (int i = 0; i < this->stage_type2_order_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stage_type2_order(i));
  }

  // repeated int32 map_flag_hide = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->map_flag_hide_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->map_flag_hide(i));
    }
    total_size += 1 * this->map_flag_hide_size() + data_size;
  }

  // repeated int32 checkpoint_icons = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->checkpoint_icons_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->checkpoint_icons(i));
    }
    total_size += 1 * this->checkpoint_icons_size() + data_size;
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup stage_type1_order = 4;
  total_size += 1 * this->stage_type1_order_size();
  for (int i = 0; i < this->stage_type1_order_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stage_type1_order(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChapterConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChapterConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChapterConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChapterConfig::MergeFrom(const ChapterConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_flag_boss_.MergeFrom(from.map_flag_boss_);
  checkpoint_pos_.MergeFrom(from.checkpoint_pos_);
  stage_type2_order_.MergeFrom(from.stage_type2_order_);
  map_flag_hide_.MergeFrom(from.map_flag_hide_);
  checkpoint_icons_.MergeFrom(from.checkpoint_icons_);
  stage_type1_order_.MergeFrom(from.stage_type1_order_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_stage_effect()) {
      set_stage_effect(from.stage_effect());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_chapter_name()) {
      set_chapter_name(from.chapter_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_map_line_res()) {
      set_map_line_res(from.map_line_res());
    }
    if (from.has_auto_next_chapter()) {
      set_auto_next_chapter(from.auto_next_chapter());
    }
    if (from.has_map_res()) {
      set_map_res(from.map_res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChapterConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChapterConfig::CopyFrom(const ChapterConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChapterConfig::IsInitialized() const {

  return true;
}

void ChapterConfig::Swap(ChapterConfig* other) {
  if (other != this) {
    map_flag_boss_.Swap(&other->map_flag_boss_);
    std::swap(stage_effect_, other->stage_effect_);
    std::swap(id_, other->id_);
    checkpoint_pos_.Swap(&other->checkpoint_pos_);
    stage_type2_order_.Swap(&other->stage_type2_order_);
    map_flag_hide_.Swap(&other->map_flag_hide_);
    checkpoint_icons_.Swap(&other->checkpoint_icons_);
    std::swap(chapter_name_, other->chapter_name_);
    std::swap(map_line_res_, other->map_line_res_);
    std::swap(auto_next_chapter_, other->auto_next_chapter_);
    std::swap(map_res_, other->map_res_);
    stage_type1_order_.Swap(&other->stage_type1_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChapterConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChapterConfig_descriptor_;
  metadata.reflection = ChapterConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

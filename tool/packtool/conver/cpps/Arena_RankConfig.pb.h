// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Arena_RankConfig.proto

#ifndef PROTOBUF_Arena_5fRankConfig_2eproto__INCLUDED
#define PROTOBUF_Arena_5fRankConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Arena_5fRankConfig_2eproto();
void protobuf_AssignDesc_Arena_5fRankConfig_2eproto();
void protobuf_ShutdownFile_Arena_5fRankConfig_2eproto();

class Arena_RankConfig;

// ===================================================================

class Arena_RankConfig : public ::google::protobuf::Message {
 public:
  Arena_RankConfig();
  virtual ~Arena_RankConfig();

  Arena_RankConfig(const Arena_RankConfig& from);

  inline Arena_RankConfig& operator=(const Arena_RankConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Arena_RankConfig& default_instance();

  void Swap(Arena_RankConfig* other);

  // implements Message ----------------------------------------------

  Arena_RankConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Arena_RankConfig& from);
  void MergeFrom(const Arena_RankConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rank_min_lv = 2;
  inline bool has_rank_min_lv() const;
  inline void clear_rank_min_lv();
  static const int kRankMinLvFieldNumber = 2;
  inline ::google::protobuf::int32 rank_min_lv() const;
  inline void set_rank_min_lv(::google::protobuf::int32 value);

  // optional int32 search_add_cost = 5;
  inline bool has_search_add_cost() const;
  inline void clear_search_add_cost();
  static const int kSearchAddCostFieldNumber = 5;
  inline ::google::protobuf::int32 search_add_cost() const;
  inline void set_search_add_cost(::google::protobuf::int32 value);

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 coins_end_rate = 10;
  inline bool has_coins_end_rate() const;
  inline void clear_coins_end_rate();
  static const int kCoinsEndRateFieldNumber = 10;
  inline ::google::protobuf::int32 coins_end_rate() const;
  inline void set_coins_end_rate(::google::protobuf::int32 value);

  // optional int32 rank_max_lv = 3;
  inline bool has_rank_max_lv() const;
  inline void clear_rank_max_lv();
  static const int kRankMaxLvFieldNumber = 3;
  inline ::google::protobuf::int32 rank_max_lv() const;
  inline void set_rank_max_lv(::google::protobuf::int32 value);

  // optional int32 coins_win_rate = 8;
  inline bool has_coins_win_rate() const;
  inline void clear_coins_win_rate();
  static const int kCoinsWinRateFieldNumber = 8;
  inline ::google::protobuf::int32 coins_win_rate() const;
  inline void set_coins_win_rate(::google::protobuf::int32 value);

  // optional int32 coins_win_rate_limit = 9;
  inline bool has_coins_win_rate_limit() const;
  inline void clear_coins_win_rate_limit();
  static const int kCoinsWinRateLimitFieldNumber = 9;
  inline ::google::protobuf::int32 coins_win_rate_limit() const;
  inline void set_coins_win_rate_limit(::google::protobuf::int32 value);

  // optional int32 points_win_add = 6;
  inline bool has_points_win_add() const;
  inline void clear_points_win_add();
  static const int kPointsWinAddFieldNumber = 6;
  inline ::google::protobuf::int32 points_win_add() const;
  inline void set_points_win_add(::google::protobuf::int32 value);

  // optional int32 search_max_count = 4;
  inline bool has_search_max_count() const;
  inline void clear_search_max_count();
  static const int kSearchMaxCountFieldNumber = 4;
  inline ::google::protobuf::int32 search_max_count() const;
  inline void set_search_max_count(::google::protobuf::int32 value);

  // optional int32 points_end_add = 7;
  inline bool has_points_end_add() const;
  inline void clear_points_end_add();
  static const int kPointsEndAddFieldNumber = 7;
  inline ::google::protobuf::int32 points_end_add() const;
  inline void set_points_end_add(::google::protobuf::int32 value);

  // optional int32 ranking = 11;
  inline bool has_ranking() const;
  inline void clear_ranking();
  static const int kRankingFieldNumber = 11;
  inline ::google::protobuf::int32 ranking() const;
  inline void set_ranking(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DianShiTech.Config.Arena_RankConfig)
 private:
  inline void set_has_rank_min_lv();
  inline void clear_has_rank_min_lv();
  inline void set_has_search_add_cost();
  inline void clear_has_search_add_cost();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_coins_end_rate();
  inline void clear_has_coins_end_rate();
  inline void set_has_rank_max_lv();
  inline void clear_has_rank_max_lv();
  inline void set_has_coins_win_rate();
  inline void clear_has_coins_win_rate();
  inline void set_has_coins_win_rate_limit();
  inline void clear_has_coins_win_rate_limit();
  inline void set_has_points_win_add();
  inline void clear_has_points_win_add();
  inline void set_has_search_max_count();
  inline void clear_has_search_max_count();
  inline void set_has_points_end_add();
  inline void clear_has_points_end_add();
  inline void set_has_ranking();
  inline void clear_has_ranking();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 rank_min_lv_;
  ::google::protobuf::int32 search_add_cost_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 coins_end_rate_;
  ::google::protobuf::int32 rank_max_lv_;
  ::google::protobuf::int32 coins_win_rate_;
  ::google::protobuf::int32 coins_win_rate_limit_;
  ::google::protobuf::int32 points_win_add_;
  ::google::protobuf::int32 search_max_count_;
  ::google::protobuf::int32 points_end_add_;
  ::google::protobuf::int32 ranking_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_Arena_5fRankConfig_2eproto();
  friend void protobuf_AssignDesc_Arena_5fRankConfig_2eproto();
  friend void protobuf_ShutdownFile_Arena_5fRankConfig_2eproto();

  void InitAsDefaultInstance();
  static Arena_RankConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// Arena_RankConfig

// optional int32 rank_min_lv = 2;
inline bool Arena_RankConfig::has_rank_min_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Arena_RankConfig::set_has_rank_min_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Arena_RankConfig::clear_has_rank_min_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Arena_RankConfig::clear_rank_min_lv() {
  rank_min_lv_ = 0;
  clear_has_rank_min_lv();
}
inline ::google::protobuf::int32 Arena_RankConfig::rank_min_lv() const {
  return rank_min_lv_;
}
inline void Arena_RankConfig::set_rank_min_lv(::google::protobuf::int32 value) {
  set_has_rank_min_lv();
  rank_min_lv_ = value;
}

// optional int32 search_add_cost = 5;
inline bool Arena_RankConfig::has_search_add_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Arena_RankConfig::set_has_search_add_cost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Arena_RankConfig::clear_has_search_add_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Arena_RankConfig::clear_search_add_cost() {
  search_add_cost_ = 0;
  clear_has_search_add_cost();
}
inline ::google::protobuf::int32 Arena_RankConfig::search_add_cost() const {
  return search_add_cost_;
}
inline void Arena_RankConfig::set_search_add_cost(::google::protobuf::int32 value) {
  set_has_search_add_cost();
  search_add_cost_ = value;
}

// optional int32 id = 1;
inline bool Arena_RankConfig::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Arena_RankConfig::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Arena_RankConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Arena_RankConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Arena_RankConfig::id() const {
  return id_;
}
inline void Arena_RankConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 coins_end_rate = 10;
inline bool Arena_RankConfig::has_coins_end_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Arena_RankConfig::set_has_coins_end_rate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Arena_RankConfig::clear_has_coins_end_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Arena_RankConfig::clear_coins_end_rate() {
  coins_end_rate_ = 0;
  clear_has_coins_end_rate();
}
inline ::google::protobuf::int32 Arena_RankConfig::coins_end_rate() const {
  return coins_end_rate_;
}
inline void Arena_RankConfig::set_coins_end_rate(::google::protobuf::int32 value) {
  set_has_coins_end_rate();
  coins_end_rate_ = value;
}

// optional int32 rank_max_lv = 3;
inline bool Arena_RankConfig::has_rank_max_lv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Arena_RankConfig::set_has_rank_max_lv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Arena_RankConfig::clear_has_rank_max_lv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Arena_RankConfig::clear_rank_max_lv() {
  rank_max_lv_ = 0;
  clear_has_rank_max_lv();
}
inline ::google::protobuf::int32 Arena_RankConfig::rank_max_lv() const {
  return rank_max_lv_;
}
inline void Arena_RankConfig::set_rank_max_lv(::google::protobuf::int32 value) {
  set_has_rank_max_lv();
  rank_max_lv_ = value;
}

// optional int32 coins_win_rate = 8;
inline bool Arena_RankConfig::has_coins_win_rate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Arena_RankConfig::set_has_coins_win_rate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Arena_RankConfig::clear_has_coins_win_rate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Arena_RankConfig::clear_coins_win_rate() {
  coins_win_rate_ = 0;
  clear_has_coins_win_rate();
}
inline ::google::protobuf::int32 Arena_RankConfig::coins_win_rate() const {
  return coins_win_rate_;
}
inline void Arena_RankConfig::set_coins_win_rate(::google::protobuf::int32 value) {
  set_has_coins_win_rate();
  coins_win_rate_ = value;
}

// optional int32 coins_win_rate_limit = 9;
inline bool Arena_RankConfig::has_coins_win_rate_limit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Arena_RankConfig::set_has_coins_win_rate_limit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Arena_RankConfig::clear_has_coins_win_rate_limit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Arena_RankConfig::clear_coins_win_rate_limit() {
  coins_win_rate_limit_ = 0;
  clear_has_coins_win_rate_limit();
}
inline ::google::protobuf::int32 Arena_RankConfig::coins_win_rate_limit() const {
  return coins_win_rate_limit_;
}
inline void Arena_RankConfig::set_coins_win_rate_limit(::google::protobuf::int32 value) {
  set_has_coins_win_rate_limit();
  coins_win_rate_limit_ = value;
}

// optional int32 points_win_add = 6;
inline bool Arena_RankConfig::has_points_win_add() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Arena_RankConfig::set_has_points_win_add() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Arena_RankConfig::clear_has_points_win_add() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Arena_RankConfig::clear_points_win_add() {
  points_win_add_ = 0;
  clear_has_points_win_add();
}
inline ::google::protobuf::int32 Arena_RankConfig::points_win_add() const {
  return points_win_add_;
}
inline void Arena_RankConfig::set_points_win_add(::google::protobuf::int32 value) {
  set_has_points_win_add();
  points_win_add_ = value;
}

// optional int32 search_max_count = 4;
inline bool Arena_RankConfig::has_search_max_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Arena_RankConfig::set_has_search_max_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Arena_RankConfig::clear_has_search_max_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Arena_RankConfig::clear_search_max_count() {
  search_max_count_ = 0;
  clear_has_search_max_count();
}
inline ::google::protobuf::int32 Arena_RankConfig::search_max_count() const {
  return search_max_count_;
}
inline void Arena_RankConfig::set_search_max_count(::google::protobuf::int32 value) {
  set_has_search_max_count();
  search_max_count_ = value;
}

// optional int32 points_end_add = 7;
inline bool Arena_RankConfig::has_points_end_add() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Arena_RankConfig::set_has_points_end_add() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Arena_RankConfig::clear_has_points_end_add() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Arena_RankConfig::clear_points_end_add() {
  points_end_add_ = 0;
  clear_has_points_end_add();
}
inline ::google::protobuf::int32 Arena_RankConfig::points_end_add() const {
  return points_end_add_;
}
inline void Arena_RankConfig::set_points_end_add(::google::protobuf::int32 value) {
  set_has_points_end_add();
  points_end_add_ = value;
}

// optional int32 ranking = 11;
inline bool Arena_RankConfig::has_ranking() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Arena_RankConfig::set_has_ranking() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Arena_RankConfig::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Arena_RankConfig::clear_ranking() {
  ranking_ = 0;
  clear_has_ranking();
}
inline ::google::protobuf::int32 Arena_RankConfig::ranking() const {
  return ranking_;
}
inline void Arena_RankConfig::set_ranking(::google::protobuf::int32 value) {
  set_has_ranking();
  ranking_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Arena_5fRankConfig_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StageConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "StageConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* StageConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StageConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_StageConfig_2eproto() {
  protobuf_AddDesc_StageConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "StageConfig.proto");
  GOOGLE_CHECK(file != NULL);
  StageConfig_descriptor_ = file->message_type(0);
  static const int StageConfig_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, difficulty_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, stage_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, first_drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, monster_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, required_char_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, close_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, chapter_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, stage_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, background_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, vip_buy_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, card_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, pre_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, enter_cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, stage_char_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, open_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, permit_buy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, next_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, unit_head_pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, drop_show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, day_enter_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, gate_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, stage_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, stage_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, territory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, chapter_id_),
  };
  StageConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StageConfig_descriptor_,
      StageConfig::default_instance_,
      StageConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StageConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_StageConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StageConfig_descriptor_, &StageConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_StageConfig_2eproto() {
  delete StageConfig::default_instance_;
  delete StageConfig_reflection_;
}

void protobuf_AddDesc_StageConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021StageConfig.proto\022\022DianShiTech.Config\032"
    "\025ConfigTypeGroup.proto\"\323\004\n\013StageConfig\022\027"
    "\n\017difficulty_type\030\013 \001(\005\022\014\n\004cost\030\030 \001(\005\022\022\n"
    "\nstage_desc\030\t \001(\t\022\022\n\nfirst_drop\030\025 \003(\005\022\021\n"
    "\tcondition\030\031 \001(\005\022\025\n\rmonster_group\030\020 \001(\005\022"
    "\033\n\023required_char_level\030\007 \001(\005\022\022\n\nclose_ti"
    "me\030\006 \001(\005\022\024\n\014chapter_name\030\r \001(\t\022\022\n\nstage_"
    "type\030\n \001(\005\022\022\n\nbackground\030\022 \001(\005\022\025\n\rvip_bu"
    "y_count\030\036 \001(\005\022\020\n\010card_exp\030\035 \001(\005\022\021\n\tpre_s"
    "tage\030\002 \001(\005\022\020\n\010enter_cd\030\034 \001(\005\022\026\n\016stage_ch"
    "ar_exp\030\023 \001(\005\022\021\n\topen_time\030\005 \001(\005\022\n\n\002id\030\001 "
    "\001(\005\022\022\n\npermit_buy\030\033 \001(\005\022\022\n\nnext_stage\030\003 "
    "\001(\005\022\025\n\runit_head_pic\030\032 \001(\005\022\021\n\tdrop_show\030"
    "\027 \003(\005\022\014\n\004drop\030\026 \003(\005\022\027\n\017day_enter_limit\030\004"
    " \001(\005\022\017\n\007gate_hp\030\016 \001(\005\022\022\n\nstage_coin\030\024 \001("
    "\005\022\022\n\nstage_name\030\010 \001(\t\022\021\n\tterritory\030\021 \001(\005"
    "\022\022\n\nchapter_id\030\014 \001(\005", 660);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "StageConfig.proto", &protobuf_RegisterTypes);
  StageConfig::default_instance_ = new StageConfig();
  StageConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_StageConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_StageConfig_2eproto {
  StaticDescriptorInitializer_StageConfig_2eproto() {
    protobuf_AddDesc_StageConfig_2eproto();
  }
} static_descriptor_initializer_StageConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int StageConfig::kDifficultyTypeFieldNumber;
const int StageConfig::kCostFieldNumber;
const int StageConfig::kStageDescFieldNumber;
const int StageConfig::kFirstDropFieldNumber;
const int StageConfig::kConditionFieldNumber;
const int StageConfig::kMonsterGroupFieldNumber;
const int StageConfig::kRequiredCharLevelFieldNumber;
const int StageConfig::kCloseTimeFieldNumber;
const int StageConfig::kChapterNameFieldNumber;
const int StageConfig::kStageTypeFieldNumber;
const int StageConfig::kBackgroundFieldNumber;
const int StageConfig::kVipBuyCountFieldNumber;
const int StageConfig::kCardExpFieldNumber;
const int StageConfig::kPreStageFieldNumber;
const int StageConfig::kEnterCdFieldNumber;
const int StageConfig::kStageCharExpFieldNumber;
const int StageConfig::kOpenTimeFieldNumber;
const int StageConfig::kIdFieldNumber;
const int StageConfig::kPermitBuyFieldNumber;
const int StageConfig::kNextStageFieldNumber;
const int StageConfig::kUnitHeadPicFieldNumber;
const int StageConfig::kDropShowFieldNumber;
const int StageConfig::kDropFieldNumber;
const int StageConfig::kDayEnterLimitFieldNumber;
const int StageConfig::kGateHpFieldNumber;
const int StageConfig::kStageCoinFieldNumber;
const int StageConfig::kStageNameFieldNumber;
const int StageConfig::kTerritoryFieldNumber;
const int StageConfig::kChapterIdFieldNumber;
#endif  // !_MSC_VER

StageConfig::StageConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StageConfig::InitAsDefaultInstance() {
}

StageConfig::StageConfig(const StageConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StageConfig::SharedCtor() {
  _cached_size_ = 0;
  difficulty_type_ = 0;
  cost_ = 0;
  stage_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  condition_ = 0;
  monster_group_ = 0;
  required_char_level_ = 0;
  close_time_ = 0;
  chapter_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stage_type_ = 0;
  background_ = 0;
  vip_buy_count_ = 0;
  card_exp_ = 0;
  pre_stage_ = 0;
  enter_cd_ = 0;
  stage_char_exp_ = 0;
  open_time_ = 0;
  id_ = 0;
  permit_buy_ = 0;
  next_stage_ = 0;
  unit_head_pic_ = 0;
  day_enter_limit_ = 0;
  gate_hp_ = 0;
  stage_coin_ = 0;
  stage_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  territory_ = 0;
  chapter_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageConfig::~StageConfig() {
  SharedDtor();
}

void StageConfig::SharedDtor() {
  if (stage_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete stage_desc_;
  }
  if (chapter_name_ != &::google::protobuf::internal::kEmptyString) {
    delete chapter_name_;
  }
  if (stage_name_ != &::google::protobuf::internal::kEmptyString) {
    delete stage_name_;
  }
  if (this != default_instance_) {
  }
}

void StageConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StageConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageConfig_descriptor_;
}

const StageConfig& StageConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StageConfig_2eproto();
  return *default_instance_;
}

StageConfig* StageConfig::default_instance_ = NULL;

StageConfig* StageConfig::New() const {
  return new StageConfig;
}

void StageConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    difficulty_type_ = 0;
    cost_ = 0;
    if (has_stage_desc()) {
      if (stage_desc_ != &::google::protobuf::internal::kEmptyString) {
        stage_desc_->clear();
      }
    }
    condition_ = 0;
    monster_group_ = 0;
    required_char_level_ = 0;
    close_time_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_chapter_name()) {
      if (chapter_name_ != &::google::protobuf::internal::kEmptyString) {
        chapter_name_->clear();
      }
    }
    stage_type_ = 0;
    background_ = 0;
    vip_buy_count_ = 0;
    card_exp_ = 0;
    pre_stage_ = 0;
    enter_cd_ = 0;
    stage_char_exp_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    open_time_ = 0;
    id_ = 0;
    permit_buy_ = 0;
    next_stage_ = 0;
    unit_head_pic_ = 0;
    day_enter_limit_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    gate_hp_ = 0;
    stage_coin_ = 0;
    if (has_stage_name()) {
      if (stage_name_ != &::google::protobuf::internal::kEmptyString) {
        stage_name_->clear();
      }
    }
    territory_ = 0;
    chapter_id_ = 0;
  }
  first_drop_.Clear();
  drop_show_.Clear();
  drop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StageConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pre_stage;
        break;
      }

      // optional int32 pre_stage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pre_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_stage_)));
          set_has_pre_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_next_stage;
        break;
      }

      // optional int32 next_stage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_stage_)));
          set_has_next_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_day_enter_limit;
        break;
      }

      // optional int32 day_enter_limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day_enter_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_enter_limit_)));
          set_has_day_enter_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_open_time;
        break;
      }

      // optional int32 open_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_time_)));
          set_has_open_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_close_time;
        break;
      }

      // optional int32 close_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_close_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &close_time_)));
          set_has_close_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_required_char_level;
        break;
      }

      // optional int32 required_char_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_required_char_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &required_char_level_)));
          set_has_required_char_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_stage_name;
        break;
      }

      // optional string stage_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stage_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stage_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stage_name().data(), this->stage_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_stage_desc;
        break;
      }

      // optional string stage_desc = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stage_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stage_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stage_desc().data(), this->stage_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_stage_type;
        break;
      }

      // optional int32 stage_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_type_)));
          set_has_stage_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_difficulty_type;
        break;
      }

      // optional int32 difficulty_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difficulty_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &difficulty_type_)));
          set_has_difficulty_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_chapter_id;
        break;
      }

      // optional int32 chapter_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chapter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_chapter_name;
        break;
      }

      // optional string chapter_name = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chapter_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chapter_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chapter_name().data(), this->chapter_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_gate_hp;
        break;
      }

      // optional int32 gate_hp = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gate_hp_)));
          set_has_gate_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_monster_group;
        break;
      }

      // optional int32 monster_group = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monster_group_)));
          set_has_monster_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_territory;
        break;
      }

      // optional int32 territory = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_territory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &territory_)));
          set_has_territory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_background;
        break;
      }

      // optional int32 background = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_background:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &background_)));
          set_has_background();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_stage_char_exp;
        break;
      }

      // optional int32 stage_char_exp = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_char_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_char_exp_)));
          set_has_stage_char_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_stage_coin;
        break;
      }

      // optional int32 stage_coin = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_coin_)));
          set_has_stage_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_first_drop;
        break;
      }

      // repeated int32 first_drop = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 168, input, this->mutable_first_drop())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_first_drop())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_first_drop;
        if (input->ExpectTag(176)) goto parse_drop;
        break;
      }

      // repeated int32 drop = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 176, input, this->mutable_drop())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_drop())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_drop;
        if (input->ExpectTag(184)) goto parse_drop_show;
        break;
      }

      // repeated int32 drop_show = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 184, input, this->mutable_drop_show())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_drop_show())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_drop_show;
        if (input->ExpectTag(192)) goto parse_cost;
        break;
      }

      // optional int32 cost = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_condition;
        break;
      }

      // optional int32 condition = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition_)));
          set_has_condition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_unit_head_pic;
        break;
      }

      // optional int32 unit_head_pic = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit_head_pic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unit_head_pic_)));
          set_has_unit_head_pic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_permit_buy;
        break;
      }

      // optional int32 permit_buy = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_permit_buy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &permit_buy_)));
          set_has_permit_buy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_enter_cd;
        break;
      }

      // optional int32 enter_cd = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enter_cd_)));
          set_has_enter_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_card_exp;
        break;
      }

      // optional int32 card_exp = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_exp_)));
          set_has_card_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_vip_buy_count;
        break;
      }

      // optional int32 vip_buy_count = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_buy_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_buy_count_)));
          set_has_vip_buy_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StageConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 pre_stage = 2;
  if (has_pre_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pre_stage(), output);
  }

  // optional int32 next_stage = 3;
  if (has_next_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->next_stage(), output);
  }

  // optional int32 day_enter_limit = 4;
  if (has_day_enter_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->day_enter_limit(), output);
  }

  // optional int32 open_time = 5;
  if (has_open_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->open_time(), output);
  }

  // optional int32 close_time = 6;
  if (has_close_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->close_time(), output);
  }

  // optional int32 required_char_level = 7;
  if (has_required_char_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->required_char_level(), output);
  }

  // optional string stage_name = 8;
  if (has_stage_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stage_name().data(), this->stage_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->stage_name(), output);
  }

  // optional string stage_desc = 9;
  if (has_stage_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stage_desc().data(), this->stage_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->stage_desc(), output);
  }

  // optional int32 stage_type = 10;
  if (has_stage_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->stage_type(), output);
  }

  // optional int32 difficulty_type = 11;
  if (has_difficulty_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->difficulty_type(), output);
  }

  // optional int32 chapter_id = 12;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->chapter_id(), output);
  }

  // optional string chapter_name = 13;
  if (has_chapter_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chapter_name().data(), this->chapter_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->chapter_name(), output);
  }

  // optional int32 gate_hp = 14;
  if (has_gate_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->gate_hp(), output);
  }

  // optional int32 monster_group = 16;
  if (has_monster_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->monster_group(), output);
  }

  // optional int32 territory = 17;
  if (has_territory()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->territory(), output);
  }

  // optional int32 background = 18;
  if (has_background()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->background(), output);
  }

  // optional int32 stage_char_exp = 19;
  if (has_stage_char_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->stage_char_exp(), output);
  }

  // optional int32 stage_coin = 20;
  if (has_stage_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->stage_coin(), output);
  }

  // repeated int32 first_drop = 21;
  for (int i = 0; i < this->first_drop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      21, this->first_drop(i), output);
  }

  // repeated int32 drop = 22;
  for (int i = 0; i < this->drop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      22, this->drop(i), output);
  }

  // repeated int32 drop_show = 23;
  for (int i = 0; i < this->drop_show_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      23, this->drop_show(i), output);
  }

  // optional int32 cost = 24;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->cost(), output);
  }

  // optional int32 condition = 25;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->condition(), output);
  }

  // optional int32 unit_head_pic = 26;
  if (has_unit_head_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->unit_head_pic(), output);
  }

  // optional int32 permit_buy = 27;
  if (has_permit_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->permit_buy(), output);
  }

  // optional int32 enter_cd = 28;
  if (has_enter_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->enter_cd(), output);
  }

  // optional int32 card_exp = 29;
  if (has_card_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->card_exp(), output);
  }

  // optional int32 vip_buy_count = 30;
  if (has_vip_buy_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->vip_buy_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StageConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 pre_stage = 2;
  if (has_pre_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pre_stage(), target);
  }

  // optional int32 next_stage = 3;
  if (has_next_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->next_stage(), target);
  }

  // optional int32 day_enter_limit = 4;
  if (has_day_enter_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->day_enter_limit(), target);
  }

  // optional int32 open_time = 5;
  if (has_open_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->open_time(), target);
  }

  // optional int32 close_time = 6;
  if (has_close_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->close_time(), target);
  }

  // optional int32 required_char_level = 7;
  if (has_required_char_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->required_char_level(), target);
  }

  // optional string stage_name = 8;
  if (has_stage_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stage_name().data(), this->stage_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->stage_name(), target);
  }

  // optional string stage_desc = 9;
  if (has_stage_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stage_desc().data(), this->stage_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->stage_desc(), target);
  }

  // optional int32 stage_type = 10;
  if (has_stage_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->stage_type(), target);
  }

  // optional int32 difficulty_type = 11;
  if (has_difficulty_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->difficulty_type(), target);
  }

  // optional int32 chapter_id = 12;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->chapter_id(), target);
  }

  // optional string chapter_name = 13;
  if (has_chapter_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chapter_name().data(), this->chapter_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->chapter_name(), target);
  }

  // optional int32 gate_hp = 14;
  if (has_gate_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->gate_hp(), target);
  }

  // optional int32 monster_group = 16;
  if (has_monster_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->monster_group(), target);
  }

  // optional int32 territory = 17;
  if (has_territory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->territory(), target);
  }

  // optional int32 background = 18;
  if (has_background()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->background(), target);
  }

  // optional int32 stage_char_exp = 19;
  if (has_stage_char_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->stage_char_exp(), target);
  }

  // optional int32 stage_coin = 20;
  if (has_stage_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->stage_coin(), target);
  }

  // repeated int32 first_drop = 21;
  for (int i = 0; i < this->first_drop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(21, this->first_drop(i), target);
  }

  // repeated int32 drop = 22;
  for (int i = 0; i < this->drop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(22, this->drop(i), target);
  }

  // repeated int32 drop_show = 23;
  for (int i = 0; i < this->drop_show_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(23, this->drop_show(i), target);
  }

  // optional int32 cost = 24;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->cost(), target);
  }

  // optional int32 condition = 25;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->condition(), target);
  }

  // optional int32 unit_head_pic = 26;
  if (has_unit_head_pic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->unit_head_pic(), target);
  }

  // optional int32 permit_buy = 27;
  if (has_permit_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->permit_buy(), target);
  }

  // optional int32 enter_cd = 28;
  if (has_enter_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->enter_cd(), target);
  }

  // optional int32 card_exp = 29;
  if (has_card_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->card_exp(), target);
  }

  // optional int32 vip_buy_count = 30;
  if (has_vip_buy_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->vip_buy_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StageConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 difficulty_type = 11;
    if (has_difficulty_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->difficulty_type());
    }

    // optional int32 cost = 24;
    if (has_cost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost());
    }

    // optional string stage_desc = 9;
    if (has_stage_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stage_desc());
    }

    // optional int32 condition = 25;
    if (has_condition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition());
    }

    // optional int32 monster_group = 16;
    if (has_monster_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monster_group());
    }

    // optional int32 required_char_level = 7;
    if (has_required_char_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->required_char_level());
    }

    // optional int32 close_time = 6;
    if (has_close_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->close_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string chapter_name = 13;
    if (has_chapter_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chapter_name());
    }

    // optional int32 stage_type = 10;
    if (has_stage_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_type());
    }

    // optional int32 background = 18;
    if (has_background()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->background());
    }

    // optional int32 vip_buy_count = 30;
    if (has_vip_buy_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_buy_count());
    }

    // optional int32 card_exp = 29;
    if (has_card_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_exp());
    }

    // optional int32 pre_stage = 2;
    if (has_pre_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pre_stage());
    }

    // optional int32 enter_cd = 28;
    if (has_enter_cd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enter_cd());
    }

    // optional int32 stage_char_exp = 19;
    if (has_stage_char_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_char_exp());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 open_time = 5;
    if (has_open_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_time());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 permit_buy = 27;
    if (has_permit_buy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->permit_buy());
    }

    // optional int32 next_stage = 3;
    if (has_next_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_stage());
    }

    // optional int32 unit_head_pic = 26;
    if (has_unit_head_pic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unit_head_pic());
    }

    // optional int32 day_enter_limit = 4;
    if (has_day_enter_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day_enter_limit());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 gate_hp = 14;
    if (has_gate_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gate_hp());
    }

    // optional int32 stage_coin = 20;
    if (has_stage_coin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_coin());
    }

    // optional string stage_name = 8;
    if (has_stage_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stage_name());
    }

    // optional int32 territory = 17;
    if (has_territory()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->territory());
    }

    // optional int32 chapter_id = 12;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter_id());
    }

  }
  // repeated int32 first_drop = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->first_drop_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->first_drop(i));
    }
    total_size += 2 * this->first_drop_size() + data_size;
  }

  // repeated int32 drop_show = 23;
  {
    int data_size = 0;
    for (int i = 0; i < this->drop_show_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->drop_show(i));
    }
    total_size += 2 * this->drop_show_size() + data_size;
  }

  // repeated int32 drop = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->drop_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->drop(i));
    }
    total_size += 2 * this->drop_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StageConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StageConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StageConfig::MergeFrom(const StageConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  first_drop_.MergeFrom(from.first_drop_);
  drop_show_.MergeFrom(from.drop_show_);
  drop_.MergeFrom(from.drop_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_difficulty_type()) {
      set_difficulty_type(from.difficulty_type());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_stage_desc()) {
      set_stage_desc(from.stage_desc());
    }
    if (from.has_condition()) {
      set_condition(from.condition());
    }
    if (from.has_monster_group()) {
      set_monster_group(from.monster_group());
    }
    if (from.has_required_char_level()) {
      set_required_char_level(from.required_char_level());
    }
    if (from.has_close_time()) {
      set_close_time(from.close_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_chapter_name()) {
      set_chapter_name(from.chapter_name());
    }
    if (from.has_stage_type()) {
      set_stage_type(from.stage_type());
    }
    if (from.has_background()) {
      set_background(from.background());
    }
    if (from.has_vip_buy_count()) {
      set_vip_buy_count(from.vip_buy_count());
    }
    if (from.has_card_exp()) {
      set_card_exp(from.card_exp());
    }
    if (from.has_pre_stage()) {
      set_pre_stage(from.pre_stage());
    }
    if (from.has_enter_cd()) {
      set_enter_cd(from.enter_cd());
    }
    if (from.has_stage_char_exp()) {
      set_stage_char_exp(from.stage_char_exp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_open_time()) {
      set_open_time(from.open_time());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_permit_buy()) {
      set_permit_buy(from.permit_buy());
    }
    if (from.has_next_stage()) {
      set_next_stage(from.next_stage());
    }
    if (from.has_unit_head_pic()) {
      set_unit_head_pic(from.unit_head_pic());
    }
    if (from.has_day_enter_limit()) {
      set_day_enter_limit(from.day_enter_limit());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_gate_hp()) {
      set_gate_hp(from.gate_hp());
    }
    if (from.has_stage_coin()) {
      set_stage_coin(from.stage_coin());
    }
    if (from.has_stage_name()) {
      set_stage_name(from.stage_name());
    }
    if (from.has_territory()) {
      set_territory(from.territory());
    }
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StageConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageConfig::CopyFrom(const StageConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageConfig::IsInitialized() const {

  return true;
}

void StageConfig::Swap(StageConfig* other) {
  if (other != this) {
    std::swap(difficulty_type_, other->difficulty_type_);
    std::swap(cost_, other->cost_);
    std::swap(stage_desc_, other->stage_desc_);
    first_drop_.Swap(&other->first_drop_);
    std::swap(condition_, other->condition_);
    std::swap(monster_group_, other->monster_group_);
    std::swap(required_char_level_, other->required_char_level_);
    std::swap(close_time_, other->close_time_);
    std::swap(chapter_name_, other->chapter_name_);
    std::swap(stage_type_, other->stage_type_);
    std::swap(background_, other->background_);
    std::swap(vip_buy_count_, other->vip_buy_count_);
    std::swap(card_exp_, other->card_exp_);
    std::swap(pre_stage_, other->pre_stage_);
    std::swap(enter_cd_, other->enter_cd_);
    std::swap(stage_char_exp_, other->stage_char_exp_);
    std::swap(open_time_, other->open_time_);
    std::swap(id_, other->id_);
    std::swap(permit_buy_, other->permit_buy_);
    std::swap(next_stage_, other->next_stage_);
    std::swap(unit_head_pic_, other->unit_head_pic_);
    drop_show_.Swap(&other->drop_show_);
    drop_.Swap(&other->drop_);
    std::swap(day_enter_limit_, other->day_enter_limit_);
    std::swap(gate_hp_, other->gate_hp_);
    std::swap(stage_coin_, other->stage_coin_);
    std::swap(stage_name_, other->stage_name_);
    std::swap(territory_, other->territory_);
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StageConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StageConfig_descriptor_;
  metadata.reflection = StageConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

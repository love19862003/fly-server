// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storeConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "storeConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* storeConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  storeConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_storeConfig_2eproto() {
  protobuf_AddDesc_storeConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "storeConfig.proto");
  GOOGLE_CHECK(file != NULL);
  storeConfig_descriptor_ = file->message_type(0);
  static const int storeConfig_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storeConfig, refresh_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storeConfig, show_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storeConfig, open_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storeConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storeConfig, keep_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storeConfig, enable_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storeConfig, drop_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storeConfig, momey_refresh_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storeConfig, refresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storeConfig, vip_daily_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storeConfig, money_refresh_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storeConfig, allow_refresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storeConfig, store_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storeConfig, vip_lv_),
  };
  storeConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      storeConfig_descriptor_,
      storeConfig::default_instance_,
      storeConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storeConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storeConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(storeConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_storeConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    storeConfig_descriptor_, &storeConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_storeConfig_2eproto() {
  delete storeConfig::default_instance_;
  delete storeConfig_reflection_;
}

void protobuf_AddDesc_storeConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021storeConfig.proto\022\022DianShiTech.Config\032"
    "\025ConfigTypeGroup.proto\"\264\002\n\013storeConfig\022\024"
    "\n\014refresh_type\030\016 \001(\005\022\022\n\nshow_count\030\014 \001(\005"
    "\022\021\n\topen_time\030\004 \003(\005\022\n\n\002id\030\001 \001(\005\022\021\n\tkeep_"
    "time\030\005 \001(\005\022\022\n\nenable_vip\030\r \001(\005\022\022\n\ndrop_c"
    "ount\030\013 \001(\005\022\032\n\022momey_refresh_cost\030\t \001(\005\022\024"
    "\n\014refresh_time\030\n \001(\005\022\027\n\017vip_daily_limit\030"
    "\007 \001(\005\022\033\n\023money_refresh_count\030\010 \001(\005\022\025\n\ral"
    "low_refresh\030\006 \001(\005\022\022\n\nstore_type\030\003 \001(\005\022\016\n"
    "\006vip_lv\030\002 \001(\005", 373);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "storeConfig.proto", &protobuf_RegisterTypes);
  storeConfig::default_instance_ = new storeConfig();
  storeConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_storeConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_storeConfig_2eproto {
  StaticDescriptorInitializer_storeConfig_2eproto() {
    protobuf_AddDesc_storeConfig_2eproto();
  }
} static_descriptor_initializer_storeConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int storeConfig::kRefreshTypeFieldNumber;
const int storeConfig::kShowCountFieldNumber;
const int storeConfig::kOpenTimeFieldNumber;
const int storeConfig::kIdFieldNumber;
const int storeConfig::kKeepTimeFieldNumber;
const int storeConfig::kEnableVipFieldNumber;
const int storeConfig::kDropCountFieldNumber;
const int storeConfig::kMomeyRefreshCostFieldNumber;
const int storeConfig::kRefreshTimeFieldNumber;
const int storeConfig::kVipDailyLimitFieldNumber;
const int storeConfig::kMoneyRefreshCountFieldNumber;
const int storeConfig::kAllowRefreshFieldNumber;
const int storeConfig::kStoreTypeFieldNumber;
const int storeConfig::kVipLvFieldNumber;
#endif  // !_MSC_VER

storeConfig::storeConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void storeConfig::InitAsDefaultInstance() {
}

storeConfig::storeConfig(const storeConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void storeConfig::SharedCtor() {
  _cached_size_ = 0;
  refresh_type_ = 0;
  show_count_ = 0;
  id_ = 0;
  keep_time_ = 0;
  enable_vip_ = 0;
  drop_count_ = 0;
  momey_refresh_cost_ = 0;
  refresh_time_ = 0;
  vip_daily_limit_ = 0;
  money_refresh_count_ = 0;
  allow_refresh_ = 0;
  store_type_ = 0;
  vip_lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

storeConfig::~storeConfig() {
  SharedDtor();
}

void storeConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void storeConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* storeConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return storeConfig_descriptor_;
}

const storeConfig& storeConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storeConfig_2eproto();
  return *default_instance_;
}

storeConfig* storeConfig::default_instance_ = NULL;

storeConfig* storeConfig::New() const {
  return new storeConfig;
}

void storeConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    refresh_type_ = 0;
    show_count_ = 0;
    id_ = 0;
    keep_time_ = 0;
    enable_vip_ = 0;
    drop_count_ = 0;
    momey_refresh_cost_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    refresh_time_ = 0;
    vip_daily_limit_ = 0;
    money_refresh_count_ = 0;
    allow_refresh_ = 0;
    store_type_ = 0;
    vip_lv_ = 0;
  }
  open_time_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool storeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vip_lv;
        break;
      }

      // optional int32 vip_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_lv_)));
          set_has_vip_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_store_type;
        break;
      }

      // optional int32 store_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_store_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_type_)));
          set_has_store_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_open_time;
        break;
      }

      // repeated int32 open_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_open_time())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_open_time())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_open_time;
        if (input->ExpectTag(40)) goto parse_keep_time;
        break;
      }

      // optional int32 keep_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keep_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &keep_time_)));
          set_has_keep_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_allow_refresh;
        break;
      }

      // optional int32 allow_refresh = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allow_refresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allow_refresh_)));
          set_has_allow_refresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vip_daily_limit;
        break;
      }

      // optional int32 vip_daily_limit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_daily_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_daily_limit_)));
          set_has_vip_daily_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_money_refresh_count;
        break;
      }

      // optional int32 money_refresh_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money_refresh_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_refresh_count_)));
          set_has_money_refresh_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_momey_refresh_cost;
        break;
      }

      // optional int32 momey_refresh_cost = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_momey_refresh_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &momey_refresh_cost_)));
          set_has_momey_refresh_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_refresh_time;
        break;
      }

      // optional int32 refresh_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refresh_time_)));
          set_has_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_drop_count;
        break;
      }

      // optional int32 drop_count = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drop_count_)));
          set_has_drop_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_show_count;
        break;
      }

      // optional int32 show_count = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &show_count_)));
          set_has_show_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_enable_vip;
        break;
      }

      // optional int32 enable_vip = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enable_vip_)));
          set_has_enable_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_refresh_type;
        break;
      }

      // optional int32 refresh_type = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refresh_type_)));
          set_has_refresh_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void storeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 vip_lv = 2;
  if (has_vip_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vip_lv(), output);
  }

  // optional int32 store_type = 3;
  if (has_store_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->store_type(), output);
  }

  // repeated int32 open_time = 4;
  for (int i = 0; i < this->open_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->open_time(i), output);
  }

  // optional int32 keep_time = 5;
  if (has_keep_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->keep_time(), output);
  }

  // optional int32 allow_refresh = 6;
  if (has_allow_refresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->allow_refresh(), output);
  }

  // optional int32 vip_daily_limit = 7;
  if (has_vip_daily_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->vip_daily_limit(), output);
  }

  // optional int32 money_refresh_count = 8;
  if (has_money_refresh_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->money_refresh_count(), output);
  }

  // optional int32 momey_refresh_cost = 9;
  if (has_momey_refresh_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->momey_refresh_cost(), output);
  }

  // optional int32 refresh_time = 10;
  if (has_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->refresh_time(), output);
  }

  // optional int32 drop_count = 11;
  if (has_drop_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->drop_count(), output);
  }

  // optional int32 show_count = 12;
  if (has_show_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->show_count(), output);
  }

  // optional int32 enable_vip = 13;
  if (has_enable_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->enable_vip(), output);
  }

  // optional int32 refresh_type = 14;
  if (has_refresh_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->refresh_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* storeConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 vip_lv = 2;
  if (has_vip_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vip_lv(), target);
  }

  // optional int32 store_type = 3;
  if (has_store_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->store_type(), target);
  }

  // repeated int32 open_time = 4;
  for (int i = 0; i < this->open_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->open_time(i), target);
  }

  // optional int32 keep_time = 5;
  if (has_keep_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->keep_time(), target);
  }

  // optional int32 allow_refresh = 6;
  if (has_allow_refresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->allow_refresh(), target);
  }

  // optional int32 vip_daily_limit = 7;
  if (has_vip_daily_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->vip_daily_limit(), target);
  }

  // optional int32 money_refresh_count = 8;
  if (has_money_refresh_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->money_refresh_count(), target);
  }

  // optional int32 momey_refresh_cost = 9;
  if (has_momey_refresh_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->momey_refresh_cost(), target);
  }

  // optional int32 refresh_time = 10;
  if (has_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->refresh_time(), target);
  }

  // optional int32 drop_count = 11;
  if (has_drop_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->drop_count(), target);
  }

  // optional int32 show_count = 12;
  if (has_show_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->show_count(), target);
  }

  // optional int32 enable_vip = 13;
  if (has_enable_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->enable_vip(), target);
  }

  // optional int32 refresh_type = 14;
  if (has_refresh_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->refresh_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int storeConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 refresh_type = 14;
    if (has_refresh_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refresh_type());
    }

    // optional int32 show_count = 12;
    if (has_show_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->show_count());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 keep_time = 5;
    if (has_keep_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->keep_time());
    }

    // optional int32 enable_vip = 13;
    if (has_enable_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enable_vip());
    }

    // optional int32 drop_count = 11;
    if (has_drop_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drop_count());
    }

    // optional int32 momey_refresh_cost = 9;
    if (has_momey_refresh_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->momey_refresh_cost());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 refresh_time = 10;
    if (has_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refresh_time());
    }

    // optional int32 vip_daily_limit = 7;
    if (has_vip_daily_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_daily_limit());
    }

    // optional int32 money_refresh_count = 8;
    if (has_money_refresh_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money_refresh_count());
    }

    // optional int32 allow_refresh = 6;
    if (has_allow_refresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allow_refresh());
    }

    // optional int32 store_type = 3;
    if (has_store_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->store_type());
    }

    // optional int32 vip_lv = 2;
    if (has_vip_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_lv());
    }

  }
  // repeated int32 open_time = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->open_time_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->open_time(i));
    }
    total_size += 1 * this->open_time_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void storeConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const storeConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const storeConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void storeConfig::MergeFrom(const storeConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  open_time_.MergeFrom(from.open_time_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refresh_type()) {
      set_refresh_type(from.refresh_type());
    }
    if (from.has_show_count()) {
      set_show_count(from.show_count());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_keep_time()) {
      set_keep_time(from.keep_time());
    }
    if (from.has_enable_vip()) {
      set_enable_vip(from.enable_vip());
    }
    if (from.has_drop_count()) {
      set_drop_count(from.drop_count());
    }
    if (from.has_momey_refresh_cost()) {
      set_momey_refresh_cost(from.momey_refresh_cost());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_refresh_time()) {
      set_refresh_time(from.refresh_time());
    }
    if (from.has_vip_daily_limit()) {
      set_vip_daily_limit(from.vip_daily_limit());
    }
    if (from.has_money_refresh_count()) {
      set_money_refresh_count(from.money_refresh_count());
    }
    if (from.has_allow_refresh()) {
      set_allow_refresh(from.allow_refresh());
    }
    if (from.has_store_type()) {
      set_store_type(from.store_type());
    }
    if (from.has_vip_lv()) {
      set_vip_lv(from.vip_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void storeConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void storeConfig::CopyFrom(const storeConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool storeConfig::IsInitialized() const {

  return true;
}

void storeConfig::Swap(storeConfig* other) {
  if (other != this) {
    std::swap(refresh_type_, other->refresh_type_);
    std::swap(show_count_, other->show_count_);
    open_time_.Swap(&other->open_time_);
    std::swap(id_, other->id_);
    std::swap(keep_time_, other->keep_time_);
    std::swap(enable_vip_, other->enable_vip_);
    std::swap(drop_count_, other->drop_count_);
    std::swap(momey_refresh_cost_, other->momey_refresh_cost_);
    std::swap(refresh_time_, other->refresh_time_);
    std::swap(vip_daily_limit_, other->vip_daily_limit_);
    std::swap(money_refresh_count_, other->money_refresh_count_);
    std::swap(allow_refresh_, other->allow_refresh_);
    std::swap(store_type_, other->store_type_);
    std::swap(vip_lv_, other->vip_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata storeConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = storeConfig_descriptor_;
  metadata.reflection = storeConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleInitDataConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BattleInitDataConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* BattleInitDataConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleInitDataConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BattleInitDataConfig_2eproto() {
  protobuf_AddDesc_BattleInitDataConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BattleInitDataConfig.proto");
  GOOGLE_CHECK(file != NULL);
  BattleInitDataConfig_descriptor_ = file->message_type(0);
  static const int BattleInitDataConfig_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInitDataConfig, battle_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInitDataConfig, challenge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInitDataConfig, search_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInitDataConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInitDataConfig, search_rank_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInitDataConfig, revenge_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInitDataConfig, hide_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInitDataConfig, robot_score_diff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInitDataConfig, base_rank_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInitDataConfig, level_reduce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInitDataConfig, robot_talent_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInitDataConfig, robot_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInitDataConfig, rest_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInitDataConfig, level_increase_),
  };
  BattleInitDataConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleInitDataConfig_descriptor_,
      BattleInitDataConfig::default_instance_,
      BattleInitDataConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInitDataConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInitDataConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleInitDataConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BattleInitDataConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleInitDataConfig_descriptor_, &BattleInitDataConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BattleInitDataConfig_2eproto() {
  delete BattleInitDataConfig::default_instance_;
  delete BattleInitDataConfig_reflection_;
}

void protobuf_AddDesc_BattleInitDataConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032BattleInitDataConfig.proto\022\022DianShiTec"
    "h.Config\032\025ConfigTypeGroup.proto\"\310\002\n\024Batt"
    "leInitDataConfig\022\023\n\013battle_cost\030\003 \001(\005\022\021\n"
    "\tchallenge\030\005 \001(\005\022\023\n\013search_cost\030\002 \001(\005\022\n\n"
    "\002id\030\001 \001(\005\022\031\n\021search_rank_count\030\t \001(\005\022\024\n\014"
    "revenge_cost\030\n \001(\005\022\022\n\nhide_score\030\016 \001(\005\022\030"
    "\n\020robot_score_diff\030\013 \001(\005\022\027\n\017base_rank_po"
    "int\030\004 \001(\005\022\024\n\014level_reduce\030\007 \001(\005\022\032\n\022robot"
    "_talent_point\030\r \001(\005\022\022\n\nrobot_coin\030\014 \001(\005\022"
    "\021\n\trest_date\030\006 \001(\005\022\026\n\016level_increase\030\010 \001"
    "(\005", 402);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BattleInitDataConfig.proto", &protobuf_RegisterTypes);
  BattleInitDataConfig::default_instance_ = new BattleInitDataConfig();
  BattleInitDataConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BattleInitDataConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BattleInitDataConfig_2eproto {
  StaticDescriptorInitializer_BattleInitDataConfig_2eproto() {
    protobuf_AddDesc_BattleInitDataConfig_2eproto();
  }
} static_descriptor_initializer_BattleInitDataConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BattleInitDataConfig::kBattleCostFieldNumber;
const int BattleInitDataConfig::kChallengeFieldNumber;
const int BattleInitDataConfig::kSearchCostFieldNumber;
const int BattleInitDataConfig::kIdFieldNumber;
const int BattleInitDataConfig::kSearchRankCountFieldNumber;
const int BattleInitDataConfig::kRevengeCostFieldNumber;
const int BattleInitDataConfig::kHideScoreFieldNumber;
const int BattleInitDataConfig::kRobotScoreDiffFieldNumber;
const int BattleInitDataConfig::kBaseRankPointFieldNumber;
const int BattleInitDataConfig::kLevelReduceFieldNumber;
const int BattleInitDataConfig::kRobotTalentPointFieldNumber;
const int BattleInitDataConfig::kRobotCoinFieldNumber;
const int BattleInitDataConfig::kRestDateFieldNumber;
const int BattleInitDataConfig::kLevelIncreaseFieldNumber;
#endif  // !_MSC_VER

BattleInitDataConfig::BattleInitDataConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleInitDataConfig::InitAsDefaultInstance() {
}

BattleInitDataConfig::BattleInitDataConfig(const BattleInitDataConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleInitDataConfig::SharedCtor() {
  _cached_size_ = 0;
  battle_cost_ = 0;
  challenge_ = 0;
  search_cost_ = 0;
  id_ = 0;
  search_rank_count_ = 0;
  revenge_cost_ = 0;
  hide_score_ = 0;
  robot_score_diff_ = 0;
  base_rank_point_ = 0;
  level_reduce_ = 0;
  robot_talent_point_ = 0;
  robot_coin_ = 0;
  rest_date_ = 0;
  level_increase_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleInitDataConfig::~BattleInitDataConfig() {
  SharedDtor();
}

void BattleInitDataConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleInitDataConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleInitDataConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleInitDataConfig_descriptor_;
}

const BattleInitDataConfig& BattleInitDataConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleInitDataConfig_2eproto();
  return *default_instance_;
}

BattleInitDataConfig* BattleInitDataConfig::default_instance_ = NULL;

BattleInitDataConfig* BattleInitDataConfig::New() const {
  return new BattleInitDataConfig;
}

void BattleInitDataConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battle_cost_ = 0;
    challenge_ = 0;
    search_cost_ = 0;
    id_ = 0;
    search_rank_count_ = 0;
    revenge_cost_ = 0;
    hide_score_ = 0;
    robot_score_diff_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    base_rank_point_ = 0;
    level_reduce_ = 0;
    robot_talent_point_ = 0;
    robot_coin_ = 0;
    rest_date_ = 0;
    level_increase_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleInitDataConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_search_cost;
        break;
      }

      // optional int32 search_cost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_search_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &search_cost_)));
          set_has_search_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battle_cost;
        break;
      }

      // optional int32 battle_cost = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_cost_)));
          set_has_battle_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_base_rank_point;
        break;
      }

      // optional int32 base_rank_point = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_rank_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_rank_point_)));
          set_has_base_rank_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_challenge;
        break;
      }

      // optional int32 challenge = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challenge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challenge_)));
          set_has_challenge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rest_date;
        break;
      }

      // optional int32 rest_date = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rest_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rest_date_)));
          set_has_rest_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level_reduce;
        break;
      }

      // optional int32 level_reduce = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_reduce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_reduce_)));
          set_has_level_reduce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_level_increase;
        break;
      }

      // optional int32 level_increase = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_increase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_increase_)));
          set_has_level_increase();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_search_rank_count;
        break;
      }

      // optional int32 search_rank_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_search_rank_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &search_rank_count_)));
          set_has_search_rank_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_revenge_cost;
        break;
      }

      // optional int32 revenge_cost = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_revenge_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &revenge_cost_)));
          set_has_revenge_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_robot_score_diff;
        break;
      }

      // optional int32 robot_score_diff = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robot_score_diff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robot_score_diff_)));
          set_has_robot_score_diff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_robot_coin;
        break;
      }

      // optional int32 robot_coin = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robot_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robot_coin_)));
          set_has_robot_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_robot_talent_point;
        break;
      }

      // optional int32 robot_talent_point = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robot_talent_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robot_talent_point_)));
          set_has_robot_talent_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_hide_score;
        break;
      }

      // optional int32 hide_score = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hide_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hide_score_)));
          set_has_hide_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleInitDataConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 search_cost = 2;
  if (has_search_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->search_cost(), output);
  }

  // optional int32 battle_cost = 3;
  if (has_battle_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->battle_cost(), output);
  }

  // optional int32 base_rank_point = 4;
  if (has_base_rank_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->base_rank_point(), output);
  }

  // optional int32 challenge = 5;
  if (has_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->challenge(), output);
  }

  // optional int32 rest_date = 6;
  if (has_rest_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rest_date(), output);
  }

  // optional int32 level_reduce = 7;
  if (has_level_reduce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level_reduce(), output);
  }

  // optional int32 level_increase = 8;
  if (has_level_increase()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->level_increase(), output);
  }

  // optional int32 search_rank_count = 9;
  if (has_search_rank_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->search_rank_count(), output);
  }

  // optional int32 revenge_cost = 10;
  if (has_revenge_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->revenge_cost(), output);
  }

  // optional int32 robot_score_diff = 11;
  if (has_robot_score_diff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->robot_score_diff(), output);
  }

  // optional int32 robot_coin = 12;
  if (has_robot_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->robot_coin(), output);
  }

  // optional int32 robot_talent_point = 13;
  if (has_robot_talent_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->robot_talent_point(), output);
  }

  // optional int32 hide_score = 14;
  if (has_hide_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->hide_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleInitDataConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 search_cost = 2;
  if (has_search_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->search_cost(), target);
  }

  // optional int32 battle_cost = 3;
  if (has_battle_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->battle_cost(), target);
  }

  // optional int32 base_rank_point = 4;
  if (has_base_rank_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->base_rank_point(), target);
  }

  // optional int32 challenge = 5;
  if (has_challenge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->challenge(), target);
  }

  // optional int32 rest_date = 6;
  if (has_rest_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rest_date(), target);
  }

  // optional int32 level_reduce = 7;
  if (has_level_reduce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level_reduce(), target);
  }

  // optional int32 level_increase = 8;
  if (has_level_increase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->level_increase(), target);
  }

  // optional int32 search_rank_count = 9;
  if (has_search_rank_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->search_rank_count(), target);
  }

  // optional int32 revenge_cost = 10;
  if (has_revenge_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->revenge_cost(), target);
  }

  // optional int32 robot_score_diff = 11;
  if (has_robot_score_diff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->robot_score_diff(), target);
  }

  // optional int32 robot_coin = 12;
  if (has_robot_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->robot_coin(), target);
  }

  // optional int32 robot_talent_point = 13;
  if (has_robot_talent_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->robot_talent_point(), target);
  }

  // optional int32 hide_score = 14;
  if (has_hide_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->hide_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleInitDataConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 battle_cost = 3;
    if (has_battle_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_cost());
    }

    // optional int32 challenge = 5;
    if (has_challenge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challenge());
    }

    // optional int32 search_cost = 2;
    if (has_search_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->search_cost());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 search_rank_count = 9;
    if (has_search_rank_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->search_rank_count());
    }

    // optional int32 revenge_cost = 10;
    if (has_revenge_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->revenge_cost());
    }

    // optional int32 hide_score = 14;
    if (has_hide_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hide_score());
    }

    // optional int32 robot_score_diff = 11;
    if (has_robot_score_diff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robot_score_diff());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 base_rank_point = 4;
    if (has_base_rank_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_rank_point());
    }

    // optional int32 level_reduce = 7;
    if (has_level_reduce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level_reduce());
    }

    // optional int32 robot_talent_point = 13;
    if (has_robot_talent_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robot_talent_point());
    }

    // optional int32 robot_coin = 12;
    if (has_robot_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robot_coin());
    }

    // optional int32 rest_date = 6;
    if (has_rest_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rest_date());
    }

    // optional int32 level_increase = 8;
    if (has_level_increase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level_increase());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleInitDataConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleInitDataConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleInitDataConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleInitDataConfig::MergeFrom(const BattleInitDataConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_cost()) {
      set_battle_cost(from.battle_cost());
    }
    if (from.has_challenge()) {
      set_challenge(from.challenge());
    }
    if (from.has_search_cost()) {
      set_search_cost(from.search_cost());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_search_rank_count()) {
      set_search_rank_count(from.search_rank_count());
    }
    if (from.has_revenge_cost()) {
      set_revenge_cost(from.revenge_cost());
    }
    if (from.has_hide_score()) {
      set_hide_score(from.hide_score());
    }
    if (from.has_robot_score_diff()) {
      set_robot_score_diff(from.robot_score_diff());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_base_rank_point()) {
      set_base_rank_point(from.base_rank_point());
    }
    if (from.has_level_reduce()) {
      set_level_reduce(from.level_reduce());
    }
    if (from.has_robot_talent_point()) {
      set_robot_talent_point(from.robot_talent_point());
    }
    if (from.has_robot_coin()) {
      set_robot_coin(from.robot_coin());
    }
    if (from.has_rest_date()) {
      set_rest_date(from.rest_date());
    }
    if (from.has_level_increase()) {
      set_level_increase(from.level_increase());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleInitDataConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleInitDataConfig::CopyFrom(const BattleInitDataConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleInitDataConfig::IsInitialized() const {

  return true;
}

void BattleInitDataConfig::Swap(BattleInitDataConfig* other) {
  if (other != this) {
    std::swap(battle_cost_, other->battle_cost_);
    std::swap(challenge_, other->challenge_);
    std::swap(search_cost_, other->search_cost_);
    std::swap(id_, other->id_);
    std::swap(search_rank_count_, other->search_rank_count_);
    std::swap(revenge_cost_, other->revenge_cost_);
    std::swap(hide_score_, other->hide_score_);
    std::swap(robot_score_diff_, other->robot_score_diff_);
    std::swap(base_rank_point_, other->base_rank_point_);
    std::swap(level_reduce_, other->level_reduce_);
    std::swap(robot_talent_point_, other->robot_talent_point_);
    std::swap(robot_coin_, other->robot_coin_);
    std::swap(rest_date_, other->rest_date_);
    std::swap(level_increase_, other->level_increase_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleInitDataConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleInitDataConfig_descriptor_;
  metadata.reflection = BattleInitDataConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

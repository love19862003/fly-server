// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RankConfig.proto

#ifndef PROTOBUF_RankConfig_2eproto__INCLUDED
#define PROTOBUF_RankConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RankConfig_2eproto();
void protobuf_AssignDesc_RankConfig_2eproto();
void protobuf_ShutdownFile_RankConfig_2eproto();

class RankConfig;

// ===================================================================

class RankConfig : public ::google::protobuf::Message {
 public:
  RankConfig();
  virtual ~RankConfig();

  RankConfig(const RankConfig& from);

  inline RankConfig& operator=(const RankConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankConfig& default_instance();

  void Swap(RankConfig* other);

  // implements Message ----------------------------------------------

  RankConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankConfig& from);
  void MergeFrom(const RankConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sub_rank = 6;
  inline bool has_sub_rank() const;
  inline void clear_sub_rank();
  static const int kSubRankFieldNumber = 6;
  inline ::google::protobuf::int32 sub_rank() const;
  inline void set_sub_rank(::google::protobuf::int32 value);

  // optional int32 rank_pic = 4;
  inline bool has_rank_pic() const;
  inline void clear_rank_pic();
  static const int kRankPicFieldNumber = 4;
  inline ::google::protobuf::int32 rank_pic() const;
  inline void set_rank_pic(::google::protobuf::int32 value);

  // repeated int32 drop_show = 14;
  inline int drop_show_size() const;
  inline void clear_drop_show();
  static const int kDropShowFieldNumber = 14;
  inline ::google::protobuf::int32 drop_show(int index) const;
  inline void set_drop_show(int index, ::google::protobuf::int32 value);
  inline void add_drop_show(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      drop_show() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_drop_show();

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated int32 drop = 13;
  inline int drop_size() const;
  inline void clear_drop();
  static const int kDropFieldNumber = 13;
  inline ::google::protobuf::int32 drop(int index) const;
  inline void set_drop(int index, ::google::protobuf::int32 value);
  inline void add_drop(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      drop() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_drop();

  // optional string rank_name = 3;
  inline bool has_rank_name() const;
  inline void clear_rank_name();
  static const int kRankNameFieldNumber = 3;
  inline const ::std::string& rank_name() const;
  inline void set_rank_name(const ::std::string& value);
  inline void set_rank_name(const char* value);
  inline void set_rank_name(const char* value, size_t size);
  inline ::std::string* mutable_rank_name();
  inline ::std::string* release_rank_name();
  inline void set_allocated_rank_name(::std::string* rank_name);

  // optional int32 min_point = 8;
  inline bool has_min_point() const;
  inline void clear_min_point();
  static const int kMinPointFieldNumber = 8;
  inline ::google::protobuf::int32 min_point() const;
  inline void set_min_point(::google::protobuf::int32 value);

  // optional int32 max_point = 9;
  inline bool has_max_point() const;
  inline void clear_max_point();
  static const int kMaxPointFieldNumber = 9;
  inline ::google::protobuf::int32 max_point() const;
  inline void set_max_point(::google::protobuf::int32 value);

  // repeated .DianShiTech.Config.ConfigTypeGroup first_get_bonus = 10;
  inline int first_get_bonus_size() const;
  inline void clear_first_get_bonus();
  static const int kFirstGetBonusFieldNumber = 10;
  inline const ::DianShiTech::Config::ConfigTypeGroup& first_get_bonus(int index) const;
  inline ::DianShiTech::Config::ConfigTypeGroup* mutable_first_get_bonus(int index);
  inline ::DianShiTech::Config::ConfigTypeGroup* add_first_get_bonus();
  inline const ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >&
      first_get_bonus() const;
  inline ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >*
      mutable_first_get_bonus();

  // optional int32 rob_coin_rate = 11;
  inline bool has_rob_coin_rate() const;
  inline void clear_rob_coin_rate();
  static const int kRobCoinRateFieldNumber = 11;
  inline ::google::protobuf::int32 rob_coin_rate() const;
  inline void set_rob_coin_rate(::google::protobuf::int32 value);

  // optional string rob_desc = 12;
  inline bool has_rob_desc() const;
  inline void clear_rob_desc();
  static const int kRobDescFieldNumber = 12;
  inline const ::std::string& rob_desc() const;
  inline void set_rob_desc(const ::std::string& value);
  inline void set_rob_desc(const char* value);
  inline void set_rob_desc(const char* value, size_t size);
  inline ::std::string* mutable_rob_desc();
  inline ::std::string* release_rob_desc();
  inline void set_allocated_rob_desc(::std::string* rob_desc);

  // optional int32 rank_number = 5;
  inline bool has_rank_number() const;
  inline void clear_rank_number();
  static const int kRankNumberFieldNumber = 5;
  inline ::google::protobuf::int32 rank_number() const;
  inline void set_rank_number(::google::protobuf::int32 value);

  // optional string sub_rank_name = 7;
  inline bool has_sub_rank_name() const;
  inline void clear_sub_rank_name();
  static const int kSubRankNameFieldNumber = 7;
  inline const ::std::string& sub_rank_name() const;
  inline void set_sub_rank_name(const ::std::string& value);
  inline void set_sub_rank_name(const char* value);
  inline void set_sub_rank_name(const char* value, size_t size);
  inline ::std::string* mutable_sub_rank_name();
  inline ::std::string* release_sub_rank_name();
  inline void set_allocated_sub_rank_name(::std::string* sub_rank_name);

  // optional int32 max_rob_coin = 15;
  inline bool has_max_rob_coin() const;
  inline void clear_max_rob_coin();
  static const int kMaxRobCoinFieldNumber = 15;
  inline ::google::protobuf::int32 max_rob_coin() const;
  inline void set_max_rob_coin(::google::protobuf::int32 value);

  // optional int32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DianShiTech.Config.RankConfig)
 private:
  inline void set_has_sub_rank();
  inline void clear_has_sub_rank();
  inline void set_has_rank_pic();
  inline void clear_has_rank_pic();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_rank_name();
  inline void clear_has_rank_name();
  inline void set_has_min_point();
  inline void clear_has_min_point();
  inline void set_has_max_point();
  inline void clear_has_max_point();
  inline void set_has_rob_coin_rate();
  inline void clear_has_rob_coin_rate();
  inline void set_has_rob_desc();
  inline void clear_has_rob_desc();
  inline void set_has_rank_number();
  inline void clear_has_rank_number();
  inline void set_has_sub_rank_name();
  inline void clear_has_sub_rank_name();
  inline void set_has_max_rob_coin();
  inline void clear_has_max_rob_coin();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 sub_rank_;
  ::google::protobuf::int32 rank_pic_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > drop_show_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > drop_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 min_point_;
  ::std::string* rank_name_;
  ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup > first_get_bonus_;
  ::google::protobuf::int32 max_point_;
  ::google::protobuf::int32 rob_coin_rate_;
  ::std::string* rob_desc_;
  ::std::string* sub_rank_name_;
  ::google::protobuf::int32 rank_number_;
  ::google::protobuf::int32 max_rob_coin_;
  ::google::protobuf::int32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_RankConfig_2eproto();
  friend void protobuf_AssignDesc_RankConfig_2eproto();
  friend void protobuf_ShutdownFile_RankConfig_2eproto();

  void InitAsDefaultInstance();
  static RankConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// RankConfig

// optional int32 sub_rank = 6;
inline bool RankConfig::has_sub_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankConfig::set_has_sub_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankConfig::clear_has_sub_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankConfig::clear_sub_rank() {
  sub_rank_ = 0;
  clear_has_sub_rank();
}
inline ::google::protobuf::int32 RankConfig::sub_rank() const {
  return sub_rank_;
}
inline void RankConfig::set_sub_rank(::google::protobuf::int32 value) {
  set_has_sub_rank();
  sub_rank_ = value;
}

// optional int32 rank_pic = 4;
inline bool RankConfig::has_rank_pic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankConfig::set_has_rank_pic() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankConfig::clear_has_rank_pic() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankConfig::clear_rank_pic() {
  rank_pic_ = 0;
  clear_has_rank_pic();
}
inline ::google::protobuf::int32 RankConfig::rank_pic() const {
  return rank_pic_;
}
inline void RankConfig::set_rank_pic(::google::protobuf::int32 value) {
  set_has_rank_pic();
  rank_pic_ = value;
}

// repeated int32 drop_show = 14;
inline int RankConfig::drop_show_size() const {
  return drop_show_.size();
}
inline void RankConfig::clear_drop_show() {
  drop_show_.Clear();
}
inline ::google::protobuf::int32 RankConfig::drop_show(int index) const {
  return drop_show_.Get(index);
}
inline void RankConfig::set_drop_show(int index, ::google::protobuf::int32 value) {
  drop_show_.Set(index, value);
}
inline void RankConfig::add_drop_show(::google::protobuf::int32 value) {
  drop_show_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RankConfig::drop_show() const {
  return drop_show_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RankConfig::mutable_drop_show() {
  return &drop_show_;
}

// optional int32 id = 1;
inline bool RankConfig::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RankConfig::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RankConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RankConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RankConfig::id() const {
  return id_;
}
inline void RankConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated int32 drop = 13;
inline int RankConfig::drop_size() const {
  return drop_.size();
}
inline void RankConfig::clear_drop() {
  drop_.Clear();
}
inline ::google::protobuf::int32 RankConfig::drop(int index) const {
  return drop_.Get(index);
}
inline void RankConfig::set_drop(int index, ::google::protobuf::int32 value) {
  drop_.Set(index, value);
}
inline void RankConfig::add_drop(::google::protobuf::int32 value) {
  drop_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RankConfig::drop() const {
  return drop_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RankConfig::mutable_drop() {
  return &drop_;
}

// optional string rank_name = 3;
inline bool RankConfig::has_rank_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RankConfig::set_has_rank_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RankConfig::clear_has_rank_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RankConfig::clear_rank_name() {
  if (rank_name_ != &::google::protobuf::internal::kEmptyString) {
    rank_name_->clear();
  }
  clear_has_rank_name();
}
inline const ::std::string& RankConfig::rank_name() const {
  return *rank_name_;
}
inline void RankConfig::set_rank_name(const ::std::string& value) {
  set_has_rank_name();
  if (rank_name_ == &::google::protobuf::internal::kEmptyString) {
    rank_name_ = new ::std::string;
  }
  rank_name_->assign(value);
}
inline void RankConfig::set_rank_name(const char* value) {
  set_has_rank_name();
  if (rank_name_ == &::google::protobuf::internal::kEmptyString) {
    rank_name_ = new ::std::string;
  }
  rank_name_->assign(value);
}
inline void RankConfig::set_rank_name(const char* value, size_t size) {
  set_has_rank_name();
  if (rank_name_ == &::google::protobuf::internal::kEmptyString) {
    rank_name_ = new ::std::string;
  }
  rank_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RankConfig::mutable_rank_name() {
  set_has_rank_name();
  if (rank_name_ == &::google::protobuf::internal::kEmptyString) {
    rank_name_ = new ::std::string;
  }
  return rank_name_;
}
inline ::std::string* RankConfig::release_rank_name() {
  clear_has_rank_name();
  if (rank_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rank_name_;
    rank_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RankConfig::set_allocated_rank_name(::std::string* rank_name) {
  if (rank_name_ != &::google::protobuf::internal::kEmptyString) {
    delete rank_name_;
  }
  if (rank_name) {
    set_has_rank_name();
    rank_name_ = rank_name;
  } else {
    clear_has_rank_name();
    rank_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 min_point = 8;
inline bool RankConfig::has_min_point() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RankConfig::set_has_min_point() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RankConfig::clear_has_min_point() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RankConfig::clear_min_point() {
  min_point_ = 0;
  clear_has_min_point();
}
inline ::google::protobuf::int32 RankConfig::min_point() const {
  return min_point_;
}
inline void RankConfig::set_min_point(::google::protobuf::int32 value) {
  set_has_min_point();
  min_point_ = value;
}

// optional int32 max_point = 9;
inline bool RankConfig::has_max_point() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RankConfig::set_has_max_point() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RankConfig::clear_has_max_point() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RankConfig::clear_max_point() {
  max_point_ = 0;
  clear_has_max_point();
}
inline ::google::protobuf::int32 RankConfig::max_point() const {
  return max_point_;
}
inline void RankConfig::set_max_point(::google::protobuf::int32 value) {
  set_has_max_point();
  max_point_ = value;
}

// repeated .DianShiTech.Config.ConfigTypeGroup first_get_bonus = 10;
inline int RankConfig::first_get_bonus_size() const {
  return first_get_bonus_.size();
}
inline void RankConfig::clear_first_get_bonus() {
  first_get_bonus_.Clear();
}
inline const ::DianShiTech::Config::ConfigTypeGroup& RankConfig::first_get_bonus(int index) const {
  return first_get_bonus_.Get(index);
}
inline ::DianShiTech::Config::ConfigTypeGroup* RankConfig::mutable_first_get_bonus(int index) {
  return first_get_bonus_.Mutable(index);
}
inline ::DianShiTech::Config::ConfigTypeGroup* RankConfig::add_first_get_bonus() {
  return first_get_bonus_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >&
RankConfig::first_get_bonus() const {
  return first_get_bonus_;
}
inline ::google::protobuf::RepeatedPtrField< ::DianShiTech::Config::ConfigTypeGroup >*
RankConfig::mutable_first_get_bonus() {
  return &first_get_bonus_;
}

// optional int32 rob_coin_rate = 11;
inline bool RankConfig::has_rob_coin_rate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RankConfig::set_has_rob_coin_rate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RankConfig::clear_has_rob_coin_rate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RankConfig::clear_rob_coin_rate() {
  rob_coin_rate_ = 0;
  clear_has_rob_coin_rate();
}
inline ::google::protobuf::int32 RankConfig::rob_coin_rate() const {
  return rob_coin_rate_;
}
inline void RankConfig::set_rob_coin_rate(::google::protobuf::int32 value) {
  set_has_rob_coin_rate();
  rob_coin_rate_ = value;
}

// optional string rob_desc = 12;
inline bool RankConfig::has_rob_desc() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RankConfig::set_has_rob_desc() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RankConfig::clear_has_rob_desc() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RankConfig::clear_rob_desc() {
  if (rob_desc_ != &::google::protobuf::internal::kEmptyString) {
    rob_desc_->clear();
  }
  clear_has_rob_desc();
}
inline const ::std::string& RankConfig::rob_desc() const {
  return *rob_desc_;
}
inline void RankConfig::set_rob_desc(const ::std::string& value) {
  set_has_rob_desc();
  if (rob_desc_ == &::google::protobuf::internal::kEmptyString) {
    rob_desc_ = new ::std::string;
  }
  rob_desc_->assign(value);
}
inline void RankConfig::set_rob_desc(const char* value) {
  set_has_rob_desc();
  if (rob_desc_ == &::google::protobuf::internal::kEmptyString) {
    rob_desc_ = new ::std::string;
  }
  rob_desc_->assign(value);
}
inline void RankConfig::set_rob_desc(const char* value, size_t size) {
  set_has_rob_desc();
  if (rob_desc_ == &::google::protobuf::internal::kEmptyString) {
    rob_desc_ = new ::std::string;
  }
  rob_desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RankConfig::mutable_rob_desc() {
  set_has_rob_desc();
  if (rob_desc_ == &::google::protobuf::internal::kEmptyString) {
    rob_desc_ = new ::std::string;
  }
  return rob_desc_;
}
inline ::std::string* RankConfig::release_rob_desc() {
  clear_has_rob_desc();
  if (rob_desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rob_desc_;
    rob_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RankConfig::set_allocated_rob_desc(::std::string* rob_desc) {
  if (rob_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete rob_desc_;
  }
  if (rob_desc) {
    set_has_rob_desc();
    rob_desc_ = rob_desc;
  } else {
    clear_has_rob_desc();
    rob_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 rank_number = 5;
inline bool RankConfig::has_rank_number() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RankConfig::set_has_rank_number() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RankConfig::clear_has_rank_number() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RankConfig::clear_rank_number() {
  rank_number_ = 0;
  clear_has_rank_number();
}
inline ::google::protobuf::int32 RankConfig::rank_number() const {
  return rank_number_;
}
inline void RankConfig::set_rank_number(::google::protobuf::int32 value) {
  set_has_rank_number();
  rank_number_ = value;
}

// optional string sub_rank_name = 7;
inline bool RankConfig::has_sub_rank_name() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RankConfig::set_has_sub_rank_name() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RankConfig::clear_has_sub_rank_name() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RankConfig::clear_sub_rank_name() {
  if (sub_rank_name_ != &::google::protobuf::internal::kEmptyString) {
    sub_rank_name_->clear();
  }
  clear_has_sub_rank_name();
}
inline const ::std::string& RankConfig::sub_rank_name() const {
  return *sub_rank_name_;
}
inline void RankConfig::set_sub_rank_name(const ::std::string& value) {
  set_has_sub_rank_name();
  if (sub_rank_name_ == &::google::protobuf::internal::kEmptyString) {
    sub_rank_name_ = new ::std::string;
  }
  sub_rank_name_->assign(value);
}
inline void RankConfig::set_sub_rank_name(const char* value) {
  set_has_sub_rank_name();
  if (sub_rank_name_ == &::google::protobuf::internal::kEmptyString) {
    sub_rank_name_ = new ::std::string;
  }
  sub_rank_name_->assign(value);
}
inline void RankConfig::set_sub_rank_name(const char* value, size_t size) {
  set_has_sub_rank_name();
  if (sub_rank_name_ == &::google::protobuf::internal::kEmptyString) {
    sub_rank_name_ = new ::std::string;
  }
  sub_rank_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RankConfig::mutable_sub_rank_name() {
  set_has_sub_rank_name();
  if (sub_rank_name_ == &::google::protobuf::internal::kEmptyString) {
    sub_rank_name_ = new ::std::string;
  }
  return sub_rank_name_;
}
inline ::std::string* RankConfig::release_sub_rank_name() {
  clear_has_sub_rank_name();
  if (sub_rank_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sub_rank_name_;
    sub_rank_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RankConfig::set_allocated_sub_rank_name(::std::string* sub_rank_name) {
  if (sub_rank_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sub_rank_name_;
  }
  if (sub_rank_name) {
    set_has_sub_rank_name();
    sub_rank_name_ = sub_rank_name;
  } else {
    clear_has_sub_rank_name();
    sub_rank_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 max_rob_coin = 15;
inline bool RankConfig::has_max_rob_coin() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RankConfig::set_has_max_rob_coin() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RankConfig::clear_has_max_rob_coin() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RankConfig::clear_max_rob_coin() {
  max_rob_coin_ = 0;
  clear_has_max_rob_coin();
}
inline ::google::protobuf::int32 RankConfig::max_rob_coin() const {
  return max_rob_coin_;
}
inline void RankConfig::set_max_rob_coin(::google::protobuf::int32 value) {
  set_has_max_rob_coin();
  max_rob_coin_ = value;
}

// optional int32 rank = 2;
inline bool RankConfig::has_rank() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RankConfig::set_has_rank() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RankConfig::clear_has_rank() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RankConfig::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 RankConfig::rank() const {
  return rank_;
}
inline void RankConfig::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RankConfig_2eproto__INCLUDED

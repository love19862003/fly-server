// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CharLevelConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CharLevelConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* CharLevelConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharLevelConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CharLevelConfig_2eproto() {
  protobuf_AddDesc_CharLevelConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CharLevelConfig.proto");
  GOOGLE_CHECK(file != NULL);
  CharLevelConfig_descriptor_ = file->message_type(0);
  static const int CharLevelConfig_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharLevelConfig, totalexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharLevelConfig, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharLevelConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharLevelConfig, vitality_get_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharLevelConfig, gate_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharLevelConfig, unit_slot_unlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharLevelConfig, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharLevelConfig, gate2_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharLevelConfig, leadship_),
  };
  CharLevelConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharLevelConfig_descriptor_,
      CharLevelConfig::default_instance_,
      CharLevelConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharLevelConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharLevelConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharLevelConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CharLevelConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharLevelConfig_descriptor_, &CharLevelConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CharLevelConfig_2eproto() {
  delete CharLevelConfig::default_instance_;
  delete CharLevelConfig_reflection_;
}

void protobuf_AddDesc_CharLevelConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025CharLevelConfig.proto\022\022DianShiTech.Con"
    "fig\032\025ConfigTypeGroup.proto\"\260\001\n\017CharLevel"
    "Config\022\020\n\010totalexp\030\004 \001(\005\022\013\n\003exp\030\003 \001(\005\022\n\n"
    "\002id\030\001 \001(\005\022\024\n\014vitality_get\030\t \001(\005\022\017\n\007gate_"
    "hp\030\006 \001(\005\022\030\n\020unit_slot_unlock\030\010 \001(\005\022\r\n\005le"
    "vel\030\002 \001(\005\022\020\n\010gate2_hp\030\007 \001(\005\022\020\n\010leadship\030"
    "\005 \001(\005", 245);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CharLevelConfig.proto", &protobuf_RegisterTypes);
  CharLevelConfig::default_instance_ = new CharLevelConfig();
  CharLevelConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CharLevelConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CharLevelConfig_2eproto {
  StaticDescriptorInitializer_CharLevelConfig_2eproto() {
    protobuf_AddDesc_CharLevelConfig_2eproto();
  }
} static_descriptor_initializer_CharLevelConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CharLevelConfig::kTotalexpFieldNumber;
const int CharLevelConfig::kExpFieldNumber;
const int CharLevelConfig::kIdFieldNumber;
const int CharLevelConfig::kVitalityGetFieldNumber;
const int CharLevelConfig::kGateHpFieldNumber;
const int CharLevelConfig::kUnitSlotUnlockFieldNumber;
const int CharLevelConfig::kLevelFieldNumber;
const int CharLevelConfig::kGate2HpFieldNumber;
const int CharLevelConfig::kLeadshipFieldNumber;
#endif  // !_MSC_VER

CharLevelConfig::CharLevelConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharLevelConfig::InitAsDefaultInstance() {
}

CharLevelConfig::CharLevelConfig(const CharLevelConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharLevelConfig::SharedCtor() {
  _cached_size_ = 0;
  totalexp_ = 0;
  exp_ = 0;
  id_ = 0;
  vitality_get_ = 0;
  gate_hp_ = 0;
  unit_slot_unlock_ = 0;
  level_ = 0;
  gate2_hp_ = 0;
  leadship_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharLevelConfig::~CharLevelConfig() {
  SharedDtor();
}

void CharLevelConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharLevelConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharLevelConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharLevelConfig_descriptor_;
}

const CharLevelConfig& CharLevelConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLevelConfig_2eproto();
  return *default_instance_;
}

CharLevelConfig* CharLevelConfig::default_instance_ = NULL;

CharLevelConfig* CharLevelConfig::New() const {
  return new CharLevelConfig;
}

void CharLevelConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    totalexp_ = 0;
    exp_ = 0;
    id_ = 0;
    vitality_get_ = 0;
    gate_hp_ = 0;
    unit_slot_unlock_ = 0;
    level_ = 0;
    gate2_hp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    leadship_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharLevelConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional int32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_totalexp;
        break;
      }

      // optional int32 totalexp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalexp_)));
          set_has_totalexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_leadship;
        break;
      }

      // optional int32 leadship = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leadship:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leadship_)));
          set_has_leadship();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gate_hp;
        break;
      }

      // optional int32 gate_hp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gate_hp_)));
          set_has_gate_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gate2_hp;
        break;
      }

      // optional int32 gate2_hp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate2_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gate2_hp_)));
          set_has_gate2_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_unit_slot_unlock;
        break;
      }

      // optional int32 unit_slot_unlock = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit_slot_unlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unit_slot_unlock_)));
          set_has_unit_slot_unlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_vitality_get;
        break;
      }

      // optional int32 vitality_get = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vitality_get:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vitality_get_)));
          set_has_vitality_get();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharLevelConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  // optional int32 totalexp = 4;
  if (has_totalexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->totalexp(), output);
  }

  // optional int32 leadship = 5;
  if (has_leadship()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->leadship(), output);
  }

  // optional int32 gate_hp = 6;
  if (has_gate_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gate_hp(), output);
  }

  // optional int32 gate2_hp = 7;
  if (has_gate2_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gate2_hp(), output);
  }

  // optional int32 unit_slot_unlock = 8;
  if (has_unit_slot_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->unit_slot_unlock(), output);
  }

  // optional int32 vitality_get = 9;
  if (has_vitality_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->vitality_get(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharLevelConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }

  // optional int32 totalexp = 4;
  if (has_totalexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->totalexp(), target);
  }

  // optional int32 leadship = 5;
  if (has_leadship()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->leadship(), target);
  }

  // optional int32 gate_hp = 6;
  if (has_gate_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gate_hp(), target);
  }

  // optional int32 gate2_hp = 7;
  if (has_gate2_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gate2_hp(), target);
  }

  // optional int32 unit_slot_unlock = 8;
  if (has_unit_slot_unlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->unit_slot_unlock(), target);
  }

  // optional int32 vitality_get = 9;
  if (has_vitality_get()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->vitality_get(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharLevelConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 totalexp = 4;
    if (has_totalexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalexp());
    }

    // optional int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 vitality_get = 9;
    if (has_vitality_get()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vitality_get());
    }

    // optional int32 gate_hp = 6;
    if (has_gate_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gate_hp());
    }

    // optional int32 unit_slot_unlock = 8;
    if (has_unit_slot_unlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unit_slot_unlock());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 gate2_hp = 7;
    if (has_gate2_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gate2_hp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 leadship = 5;
    if (has_leadship()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leadship());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharLevelConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharLevelConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharLevelConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharLevelConfig::MergeFrom(const CharLevelConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalexp()) {
      set_totalexp(from.totalexp());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_vitality_get()) {
      set_vitality_get(from.vitality_get());
    }
    if (from.has_gate_hp()) {
      set_gate_hp(from.gate_hp());
    }
    if (from.has_unit_slot_unlock()) {
      set_unit_slot_unlock(from.unit_slot_unlock());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_gate2_hp()) {
      set_gate2_hp(from.gate2_hp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_leadship()) {
      set_leadship(from.leadship());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharLevelConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharLevelConfig::CopyFrom(const CharLevelConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharLevelConfig::IsInitialized() const {

  return true;
}

void CharLevelConfig::Swap(CharLevelConfig* other) {
  if (other != this) {
    std::swap(totalexp_, other->totalexp_);
    std::swap(exp_, other->exp_);
    std::swap(id_, other->id_);
    std::swap(vitality_get_, other->vitality_get_);
    std::swap(gate_hp_, other->gate_hp_);
    std::swap(unit_slot_unlock_, other->unit_slot_unlock_);
    std::swap(level_, other->level_);
    std::swap(gate2_hp_, other->gate2_hp_);
    std::swap(leadship_, other->leadship_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharLevelConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharLevelConfig_descriptor_;
  metadata.reflection = CharLevelConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

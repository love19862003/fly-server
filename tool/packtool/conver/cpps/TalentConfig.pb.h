// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TalentConfig.proto

#ifndef PROTOBUF_TalentConfig_2eproto__INCLUDED
#define PROTOBUF_TalentConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TalentConfig_2eproto();
void protobuf_AssignDesc_TalentConfig_2eproto();
void protobuf_ShutdownFile_TalentConfig_2eproto();

class TalentConfig;

// ===================================================================

class TalentConfig : public ::google::protobuf::Message {
 public:
  TalentConfig();
  virtual ~TalentConfig();

  TalentConfig(const TalentConfig& from);

  inline TalentConfig& operator=(const TalentConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TalentConfig& default_instance();

  void Swap(TalentConfig* other);

  // implements Message ----------------------------------------------

  TalentConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TalentConfig& from);
  void MergeFrom(const TalentConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 max_level = 5;
  inline bool has_max_level() const;
  inline void clear_max_level();
  static const int kMaxLevelFieldNumber = 5;
  inline ::google::protobuf::int32 max_level() const;
  inline void set_max_level(::google::protobuf::int32 value);

  // optional int32 talent_point = 7;
  inline bool has_talent_point() const;
  inline void clear_talent_point();
  static const int kTalentPointFieldNumber = 7;
  inline ::google::protobuf::int32 talent_point() const;
  inline void set_talent_point(::google::protobuf::int32 value);

  // optional int32 talent_root = 3;
  inline bool has_talent_root() const;
  inline void clear_talent_root();
  static const int kTalentRootFieldNumber = 3;
  inline ::google::protobuf::int32 talent_root() const;
  inline void set_talent_root(::google::protobuf::int32 value);

  // optional int32 talent_cost_type = 8;
  inline bool has_talent_cost_type() const;
  inline void clear_talent_cost_type();
  static const int kTalentCostTypeFieldNumber = 8;
  inline ::google::protobuf::int32 talent_cost_type() const;
  inline void set_talent_cost_type(::google::protobuf::int32 value);

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 type = 10;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 10;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 skill = 11;
  inline bool has_skill() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 11;
  inline ::google::protobuf::int32 skill() const;
  inline void set_skill(::google::protobuf::int32 value);

  // optional int32 condition_talent = 14;
  inline bool has_condition_talent() const;
  inline void clear_condition_talent();
  static const int kConditionTalentFieldNumber = 14;
  inline ::google::protobuf::int32 condition_talent() const;
  inline void set_condition_talent(::google::protobuf::int32 value);

  // optional int32 talent_next_level_time = 15;
  inline bool has_talent_next_level_time() const;
  inline void clear_talent_next_level_time();
  static const int kTalentNextLevelTimeFieldNumber = 15;
  inline ::google::protobuf::int32 talent_next_level_time() const;
  inline void set_talent_next_level_time(::google::protobuf::int32 value);

  // optional int32 next_id = 2;
  inline bool has_next_id() const;
  inline void clear_next_id();
  static const int kNextIdFieldNumber = 2;
  inline ::google::protobuf::int32 next_id() const;
  inline void set_next_id(::google::protobuf::int32 value);

  // optional int32 total_talent_point = 13;
  inline bool has_total_talent_point() const;
  inline void clear_total_talent_point();
  static const int kTotalTalentPointFieldNumber = 13;
  inline ::google::protobuf::int32 total_talent_point() const;
  inline void set_total_talent_point(::google::protobuf::int32 value);

  // optional int32 clear_cd_cost = 16;
  inline bool has_clear_cd_cost() const;
  inline void clear_clear_cd_cost();
  static const int kClearCdCostFieldNumber = 16;
  inline ::google::protobuf::int32 clear_cd_cost() const;
  inline void set_clear_cd_cost(::google::protobuf::int32 value);

  // optional int32 player_level = 12;
  inline bool has_player_level() const;
  inline void clear_player_level();
  static const int kPlayerLevelFieldNumber = 12;
  inline ::google::protobuf::int32 player_level() const;
  inline void set_player_level(::google::protobuf::int32 value);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 cost = 9;
  inline bool has_cost() const;
  inline void clear_cost();
  static const int kCostFieldNumber = 9;
  inline ::google::protobuf::int32 cost() const;
  inline void set_cost(::google::protobuf::int32 value);

  // optional int32 background = 6;
  inline bool has_background() const;
  inline void clear_background();
  static const int kBackgroundFieldNumber = 6;
  inline ::google::protobuf::int32 background() const;
  inline void set_background(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DianShiTech.Config.TalentConfig)
 private:
  inline void set_has_max_level();
  inline void clear_has_max_level();
  inline void set_has_talent_point();
  inline void clear_has_talent_point();
  inline void set_has_talent_root();
  inline void clear_has_talent_root();
  inline void set_has_talent_cost_type();
  inline void clear_has_talent_cost_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_skill();
  inline void clear_has_skill();
  inline void set_has_condition_talent();
  inline void clear_has_condition_talent();
  inline void set_has_talent_next_level_time();
  inline void clear_has_talent_next_level_time();
  inline void set_has_next_id();
  inline void clear_has_next_id();
  inline void set_has_total_talent_point();
  inline void clear_has_total_talent_point();
  inline void set_has_clear_cd_cost();
  inline void clear_has_clear_cd_cost();
  inline void set_has_player_level();
  inline void clear_has_player_level();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_cost();
  inline void clear_has_cost();
  inline void set_has_background();
  inline void clear_has_background();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 max_level_;
  ::google::protobuf::int32 talent_point_;
  ::google::protobuf::int32 talent_root_;
  ::google::protobuf::int32 talent_cost_type_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 skill_;
  ::google::protobuf::int32 condition_talent_;
  ::google::protobuf::int32 talent_next_level_time_;
  ::google::protobuf::int32 next_id_;
  ::google::protobuf::int32 total_talent_point_;
  ::google::protobuf::int32 clear_cd_cost_;
  ::google::protobuf::int32 player_level_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 cost_;
  ::google::protobuf::int32 background_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_TalentConfig_2eproto();
  friend void protobuf_AssignDesc_TalentConfig_2eproto();
  friend void protobuf_ShutdownFile_TalentConfig_2eproto();

  void InitAsDefaultInstance();
  static TalentConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// TalentConfig

// optional int32 max_level = 5;
inline bool TalentConfig::has_max_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TalentConfig::set_has_max_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TalentConfig::clear_has_max_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TalentConfig::clear_max_level() {
  max_level_ = 0;
  clear_has_max_level();
}
inline ::google::protobuf::int32 TalentConfig::max_level() const {
  return max_level_;
}
inline void TalentConfig::set_max_level(::google::protobuf::int32 value) {
  set_has_max_level();
  max_level_ = value;
}

// optional int32 talent_point = 7;
inline bool TalentConfig::has_talent_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TalentConfig::set_has_talent_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TalentConfig::clear_has_talent_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TalentConfig::clear_talent_point() {
  talent_point_ = 0;
  clear_has_talent_point();
}
inline ::google::protobuf::int32 TalentConfig::talent_point() const {
  return talent_point_;
}
inline void TalentConfig::set_talent_point(::google::protobuf::int32 value) {
  set_has_talent_point();
  talent_point_ = value;
}

// optional int32 talent_root = 3;
inline bool TalentConfig::has_talent_root() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TalentConfig::set_has_talent_root() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TalentConfig::clear_has_talent_root() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TalentConfig::clear_talent_root() {
  talent_root_ = 0;
  clear_has_talent_root();
}
inline ::google::protobuf::int32 TalentConfig::talent_root() const {
  return talent_root_;
}
inline void TalentConfig::set_talent_root(::google::protobuf::int32 value) {
  set_has_talent_root();
  talent_root_ = value;
}

// optional int32 talent_cost_type = 8;
inline bool TalentConfig::has_talent_cost_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TalentConfig::set_has_talent_cost_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TalentConfig::clear_has_talent_cost_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TalentConfig::clear_talent_cost_type() {
  talent_cost_type_ = 0;
  clear_has_talent_cost_type();
}
inline ::google::protobuf::int32 TalentConfig::talent_cost_type() const {
  return talent_cost_type_;
}
inline void TalentConfig::set_talent_cost_type(::google::protobuf::int32 value) {
  set_has_talent_cost_type();
  talent_cost_type_ = value;
}

// optional int32 id = 1;
inline bool TalentConfig::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TalentConfig::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TalentConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TalentConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TalentConfig::id() const {
  return id_;
}
inline void TalentConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 10;
inline bool TalentConfig::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TalentConfig::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TalentConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TalentConfig::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 TalentConfig::type() const {
  return type_;
}
inline void TalentConfig::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 skill = 11;
inline bool TalentConfig::has_skill() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TalentConfig::set_has_skill() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TalentConfig::clear_has_skill() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TalentConfig::clear_skill() {
  skill_ = 0;
  clear_has_skill();
}
inline ::google::protobuf::int32 TalentConfig::skill() const {
  return skill_;
}
inline void TalentConfig::set_skill(::google::protobuf::int32 value) {
  set_has_skill();
  skill_ = value;
}

// optional int32 condition_talent = 14;
inline bool TalentConfig::has_condition_talent() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TalentConfig::set_has_condition_talent() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TalentConfig::clear_has_condition_talent() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TalentConfig::clear_condition_talent() {
  condition_talent_ = 0;
  clear_has_condition_talent();
}
inline ::google::protobuf::int32 TalentConfig::condition_talent() const {
  return condition_talent_;
}
inline void TalentConfig::set_condition_talent(::google::protobuf::int32 value) {
  set_has_condition_talent();
  condition_talent_ = value;
}

// optional int32 talent_next_level_time = 15;
inline bool TalentConfig::has_talent_next_level_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TalentConfig::set_has_talent_next_level_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TalentConfig::clear_has_talent_next_level_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TalentConfig::clear_talent_next_level_time() {
  talent_next_level_time_ = 0;
  clear_has_talent_next_level_time();
}
inline ::google::protobuf::int32 TalentConfig::talent_next_level_time() const {
  return talent_next_level_time_;
}
inline void TalentConfig::set_talent_next_level_time(::google::protobuf::int32 value) {
  set_has_talent_next_level_time();
  talent_next_level_time_ = value;
}

// optional int32 next_id = 2;
inline bool TalentConfig::has_next_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TalentConfig::set_has_next_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TalentConfig::clear_has_next_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TalentConfig::clear_next_id() {
  next_id_ = 0;
  clear_has_next_id();
}
inline ::google::protobuf::int32 TalentConfig::next_id() const {
  return next_id_;
}
inline void TalentConfig::set_next_id(::google::protobuf::int32 value) {
  set_has_next_id();
  next_id_ = value;
}

// optional int32 total_talent_point = 13;
inline bool TalentConfig::has_total_talent_point() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TalentConfig::set_has_total_talent_point() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TalentConfig::clear_has_total_talent_point() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TalentConfig::clear_total_talent_point() {
  total_talent_point_ = 0;
  clear_has_total_talent_point();
}
inline ::google::protobuf::int32 TalentConfig::total_talent_point() const {
  return total_talent_point_;
}
inline void TalentConfig::set_total_talent_point(::google::protobuf::int32 value) {
  set_has_total_talent_point();
  total_talent_point_ = value;
}

// optional int32 clear_cd_cost = 16;
inline bool TalentConfig::has_clear_cd_cost() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TalentConfig::set_has_clear_cd_cost() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TalentConfig::clear_has_clear_cd_cost() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TalentConfig::clear_clear_cd_cost() {
  clear_cd_cost_ = 0;
  clear_has_clear_cd_cost();
}
inline ::google::protobuf::int32 TalentConfig::clear_cd_cost() const {
  return clear_cd_cost_;
}
inline void TalentConfig::set_clear_cd_cost(::google::protobuf::int32 value) {
  set_has_clear_cd_cost();
  clear_cd_cost_ = value;
}

// optional int32 player_level = 12;
inline bool TalentConfig::has_player_level() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TalentConfig::set_has_player_level() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TalentConfig::clear_has_player_level() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TalentConfig::clear_player_level() {
  player_level_ = 0;
  clear_has_player_level();
}
inline ::google::protobuf::int32 TalentConfig::player_level() const {
  return player_level_;
}
inline void TalentConfig::set_player_level(::google::protobuf::int32 value) {
  set_has_player_level();
  player_level_ = value;
}

// optional int32 level = 4;
inline bool TalentConfig::has_level() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TalentConfig::set_has_level() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TalentConfig::clear_has_level() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TalentConfig::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 TalentConfig::level() const {
  return level_;
}
inline void TalentConfig::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 cost = 9;
inline bool TalentConfig::has_cost() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TalentConfig::set_has_cost() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TalentConfig::clear_has_cost() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TalentConfig::clear_cost() {
  cost_ = 0;
  clear_has_cost();
}
inline ::google::protobuf::int32 TalentConfig::cost() const {
  return cost_;
}
inline void TalentConfig::set_cost(::google::protobuf::int32 value) {
  set_has_cost();
  cost_ = value;
}

// optional int32 background = 6;
inline bool TalentConfig::has_background() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TalentConfig::set_has_background() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TalentConfig::clear_has_background() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TalentConfig::clear_background() {
  background_ = 0;
  clear_has_background();
}
inline ::google::protobuf::int32 TalentConfig::background() const {
  return background_;
}
inline void TalentConfig::set_background(::google::protobuf::int32 value) {
  set_has_background();
  background_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TalentConfig_2eproto__INCLUDED

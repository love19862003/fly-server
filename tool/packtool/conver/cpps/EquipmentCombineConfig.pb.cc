// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EquipmentCombineConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EquipmentCombineConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* EquipmentCombineConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentCombineConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_EquipmentCombineConfig_2eproto() {
  protobuf_AddDesc_EquipmentCombineConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EquipmentCombineConfig.proto");
  GOOGLE_CHECK(file != NULL);
  EquipmentCombineConfig_descriptor_ = file->message_type(0);
  static const int EquipmentCombineConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentCombineConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentCombineConfig, target_equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentCombineConfig, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentCombineConfig, count_),
  };
  EquipmentCombineConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentCombineConfig_descriptor_,
      EquipmentCombineConfig::default_instance_,
      EquipmentCombineConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentCombineConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentCombineConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentCombineConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EquipmentCombineConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentCombineConfig_descriptor_, &EquipmentCombineConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EquipmentCombineConfig_2eproto() {
  delete EquipmentCombineConfig::default_instance_;
  delete EquipmentCombineConfig_reflection_;
}

void protobuf_AddDesc_EquipmentCombineConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034EquipmentCombineConfig.proto\022\022DianShiT"
    "ech.Config\032\025ConfigTypeGroup.proto\"\177\n\026Equ"
    "ipmentCombineConfig\022\n\n\002id\030\001 \001(\005\022\024\n\014targe"
    "t_equip\030\003 \001(\005\0224\n\007consume\030\002 \003(\0132#.DianShi"
    "Tech.Config.ConfigTypeGroup\022\r\n\005count\030\004 \001"
    "(\005", 202);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EquipmentCombineConfig.proto", &protobuf_RegisterTypes);
  EquipmentCombineConfig::default_instance_ = new EquipmentCombineConfig();
  EquipmentCombineConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EquipmentCombineConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EquipmentCombineConfig_2eproto {
  StaticDescriptorInitializer_EquipmentCombineConfig_2eproto() {
    protobuf_AddDesc_EquipmentCombineConfig_2eproto();
  }
} static_descriptor_initializer_EquipmentCombineConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int EquipmentCombineConfig::kIdFieldNumber;
const int EquipmentCombineConfig::kTargetEquipFieldNumber;
const int EquipmentCombineConfig::kConsumeFieldNumber;
const int EquipmentCombineConfig::kCountFieldNumber;
#endif  // !_MSC_VER

EquipmentCombineConfig::EquipmentCombineConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentCombineConfig::InitAsDefaultInstance() {
}

EquipmentCombineConfig::EquipmentCombineConfig(const EquipmentCombineConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentCombineConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  target_equip_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentCombineConfig::~EquipmentCombineConfig() {
  SharedDtor();
}

void EquipmentCombineConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentCombineConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentCombineConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentCombineConfig_descriptor_;
}

const EquipmentCombineConfig& EquipmentCombineConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentCombineConfig_2eproto();
  return *default_instance_;
}

EquipmentCombineConfig* EquipmentCombineConfig::default_instance_ = NULL;

EquipmentCombineConfig* EquipmentCombineConfig::New() const {
  return new EquipmentCombineConfig;
}

void EquipmentCombineConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    target_equip_ = 0;
    count_ = 0;
  }
  consume_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentCombineConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_consume;
        break;
      }

      // repeated .DianShiTech.Config.ConfigTypeGroup consume = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consume()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_consume;
        if (input->ExpectTag(24)) goto parse_target_equip;
        break;
      }

      // optional int32 target_equip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_equip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_equip_)));
          set_has_target_equip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional int32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentCombineConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup consume = 2;
  for (int i = 0; i < this->consume_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->consume(i), output);
  }

  // optional int32 target_equip = 3;
  if (has_target_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->target_equip(), output);
  }

  // optional int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentCombineConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup consume = 2;
  for (int i = 0; i < this->consume_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->consume(i), target);
  }

  // optional int32 target_equip = 3;
  if (has_target_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->target_equip(), target);
  }

  // optional int32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentCombineConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 target_equip = 3;
    if (has_target_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_equip());
    }

    // optional int32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .DianShiTech.Config.ConfigTypeGroup consume = 2;
  total_size += 1 * this->consume_size();
  for (int i = 0; i < this->consume_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consume(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentCombineConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentCombineConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentCombineConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentCombineConfig::MergeFrom(const EquipmentCombineConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  consume_.MergeFrom(from.consume_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_target_equip()) {
      set_target_equip(from.target_equip());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentCombineConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentCombineConfig::CopyFrom(const EquipmentCombineConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentCombineConfig::IsInitialized() const {

  return true;
}

void EquipmentCombineConfig::Swap(EquipmentCombineConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(target_equip_, other->target_equip_);
    consume_.Swap(&other->consume_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentCombineConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentCombineConfig_descriptor_;
  metadata.reflection = EquipmentCombineConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

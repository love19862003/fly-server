// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rank_match_robotConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rank_match_robotConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* rank_match_robotConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rank_match_robotConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rank_5fmatch_5frobotConfig_2eproto() {
  protobuf_AddDesc_rank_5fmatch_5frobotConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rank_match_robotConfig.proto");
  GOOGLE_CHECK(file != NULL);
  rank_match_robotConfig_descriptor_ = file->message_type(0);
  static const int rank_match_robotConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_match_robotConfig, minrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_match_robotConfig, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_match_robotConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_match_robotConfig, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_match_robotConfig, maxrank_),
  };
  rank_match_robotConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rank_match_robotConfig_descriptor_,
      rank_match_robotConfig::default_instance_,
      rank_match_robotConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_match_robotConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_match_robotConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rank_match_robotConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rank_5fmatch_5frobotConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rank_match_robotConfig_descriptor_, &rank_match_robotConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rank_5fmatch_5frobotConfig_2eproto() {
  delete rank_match_robotConfig::default_instance_;
  delete rank_match_robotConfig_reflection_;
}

void protobuf_AddDesc_rank_5fmatch_5frobotConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034rank_match_robotConfig.proto\022\022DianShiT"
    "ech.Config\032\025ConfigTypeGroup.proto\"\210\001\n\026ra"
    "nk_match_robotConfig\022\017\n\007minrank\030\002 \001(\005\0221\n"
    "\004card\030\005 \003(\0132#.DianShiTech.Config.ConfigT"
    "ypeGroup\022\n\n\002id\030\001 \001(\005\022\r\n\005level\030\004 \001(\005\022\017\n\007m"
    "axrank\030\003 \001(\005", 212);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rank_match_robotConfig.proto", &protobuf_RegisterTypes);
  rank_match_robotConfig::default_instance_ = new rank_match_robotConfig();
  rank_match_robotConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rank_5fmatch_5frobotConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rank_5fmatch_5frobotConfig_2eproto {
  StaticDescriptorInitializer_rank_5fmatch_5frobotConfig_2eproto() {
    protobuf_AddDesc_rank_5fmatch_5frobotConfig_2eproto();
  }
} static_descriptor_initializer_rank_5fmatch_5frobotConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int rank_match_robotConfig::kMinrankFieldNumber;
const int rank_match_robotConfig::kCardFieldNumber;
const int rank_match_robotConfig::kIdFieldNumber;
const int rank_match_robotConfig::kLevelFieldNumber;
const int rank_match_robotConfig::kMaxrankFieldNumber;
#endif  // !_MSC_VER

rank_match_robotConfig::rank_match_robotConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rank_match_robotConfig::InitAsDefaultInstance() {
}

rank_match_robotConfig::rank_match_robotConfig(const rank_match_robotConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rank_match_robotConfig::SharedCtor() {
  _cached_size_ = 0;
  minrank_ = 0;
  id_ = 0;
  level_ = 0;
  maxrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rank_match_robotConfig::~rank_match_robotConfig() {
  SharedDtor();
}

void rank_match_robotConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rank_match_robotConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rank_match_robotConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rank_match_robotConfig_descriptor_;
}

const rank_match_robotConfig& rank_match_robotConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_5fmatch_5frobotConfig_2eproto();
  return *default_instance_;
}

rank_match_robotConfig* rank_match_robotConfig::default_instance_ = NULL;

rank_match_robotConfig* rank_match_robotConfig::New() const {
  return new rank_match_robotConfig;
}

void rank_match_robotConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    minrank_ = 0;
    id_ = 0;
    level_ = 0;
    maxrank_ = 0;
  }
  card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rank_match_robotConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minrank;
        break;
      }

      // optional int32 minrank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minrank_)));
          set_has_minrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxrank;
        break;
      }

      // optional int32 maxrank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxrank_)));
          set_has_maxrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_card;
        break;
      }

      // repeated .DianShiTech.Config.ConfigTypeGroup card = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_card;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rank_match_robotConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 minrank = 2;
  if (has_minrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minrank(), output);
  }

  // optional int32 maxrank = 3;
  if (has_maxrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxrank(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup card = 5;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rank_match_robotConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 minrank = 2;
  if (has_minrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minrank(), target);
  }

  // optional int32 maxrank = 3;
  if (has_maxrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxrank(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // repeated .DianShiTech.Config.ConfigTypeGroup card = 5;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rank_match_robotConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 minrank = 2;
    if (has_minrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minrank());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 maxrank = 3;
    if (has_maxrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxrank());
    }

  }
  // repeated .DianShiTech.Config.ConfigTypeGroup card = 5;
  total_size += 1 * this->card_size();
  for (int i = 0; i < this->card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rank_match_robotConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rank_match_robotConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rank_match_robotConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rank_match_robotConfig::MergeFrom(const rank_match_robotConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_minrank()) {
      set_minrank(from.minrank());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_maxrank()) {
      set_maxrank(from.maxrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rank_match_robotConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rank_match_robotConfig::CopyFrom(const rank_match_robotConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rank_match_robotConfig::IsInitialized() const {

  return true;
}

void rank_match_robotConfig::Swap(rank_match_robotConfig* other) {
  if (other != this) {
    std::swap(minrank_, other->minrank_);
    card_.Swap(&other->card_);
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(maxrank_, other->maxrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rank_match_robotConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rank_match_robotConfig_descriptor_;
  metadata.reflection = rank_match_robotConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

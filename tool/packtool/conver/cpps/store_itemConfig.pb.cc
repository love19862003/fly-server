// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: store_itemConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "store_itemConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* store_itemConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  store_itemConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_store_5fitemConfig_2eproto() {
  protobuf_AddDesc_store_5fitemConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "store_itemConfig.proto");
  GOOGLE_CHECK(file != NULL);
  store_itemConfig_descriptor_ = file->message_type(0);
  static const int store_itemConfig_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(store_itemConfig, vip_buy_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(store_itemConfig, vip_limit_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(store_itemConfig, show_currency_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(store_itemConfig, vip_show_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(store_itemConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(store_itemConfig, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(store_itemConfig, buy_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(store_itemConfig, add_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(store_itemConfig, buy_currency_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(store_itemConfig, show_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(store_itemConfig, drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(store_itemConfig, min_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(store_itemConfig, buy_daily_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(store_itemConfig, max_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(store_itemConfig, store_type_),
  };
  store_itemConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      store_itemConfig_descriptor_,
      store_itemConfig::default_instance_,
      store_itemConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(store_itemConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(store_itemConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(store_itemConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_store_5fitemConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    store_itemConfig_descriptor_, &store_itemConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_store_5fitemConfig_2eproto() {
  delete store_itemConfig::default_instance_;
  delete store_itemConfig_reflection_;
}

void protobuf_AddDesc_store_5fitemConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DianShiTech::Config::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026store_itemConfig.proto\022\022DianShiTech.Co"
    "nfig\032\025ConfigTypeGroup.proto\"\277\002\n\020store_it"
    "emConfig\022\022\n\nvip_buy_lv\030\003 \001(\005\022\025\n\rvip_limi"
    "t_add\030\005 \001(\005\022\032\n\022show_currency_type\030\013 \001(\005\022"
    "\023\n\013vip_show_lv\030\006 \001(\005\022\n\n\002id\030\001 \001(\005\022\016\n\006weig"
    "ht\030\017 \001(\005\022\021\n\tbuy_price\030\014 \001(\005\022\020\n\010add_cost\030"
    "\016 \001(\005\022\031\n\021buy_currency_type\030\r \001(\005\022\022\n\nshow"
    "_price\030\n \001(\005\022\014\n\004drop\030\t \001(\005\022\021\n\tmin_level\030"
    "\007 \001(\005\022\027\n\017buy_daily_limit\030\004 \001(\005\022\021\n\tmax_le"
    "vel\030\010 \001(\005\022\022\n\nstore_type\030\002 \001(\005", 389);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "store_itemConfig.proto", &protobuf_RegisterTypes);
  store_itemConfig::default_instance_ = new store_itemConfig();
  store_itemConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_store_5fitemConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_store_5fitemConfig_2eproto {
  StaticDescriptorInitializer_store_5fitemConfig_2eproto() {
    protobuf_AddDesc_store_5fitemConfig_2eproto();
  }
} static_descriptor_initializer_store_5fitemConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int store_itemConfig::kVipBuyLvFieldNumber;
const int store_itemConfig::kVipLimitAddFieldNumber;
const int store_itemConfig::kShowCurrencyTypeFieldNumber;
const int store_itemConfig::kVipShowLvFieldNumber;
const int store_itemConfig::kIdFieldNumber;
const int store_itemConfig::kWeightFieldNumber;
const int store_itemConfig::kBuyPriceFieldNumber;
const int store_itemConfig::kAddCostFieldNumber;
const int store_itemConfig::kBuyCurrencyTypeFieldNumber;
const int store_itemConfig::kShowPriceFieldNumber;
const int store_itemConfig::kDropFieldNumber;
const int store_itemConfig::kMinLevelFieldNumber;
const int store_itemConfig::kBuyDailyLimitFieldNumber;
const int store_itemConfig::kMaxLevelFieldNumber;
const int store_itemConfig::kStoreTypeFieldNumber;
#endif  // !_MSC_VER

store_itemConfig::store_itemConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void store_itemConfig::InitAsDefaultInstance() {
}

store_itemConfig::store_itemConfig(const store_itemConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void store_itemConfig::SharedCtor() {
  _cached_size_ = 0;
  vip_buy_lv_ = 0;
  vip_limit_add_ = 0;
  show_currency_type_ = 0;
  vip_show_lv_ = 0;
  id_ = 0;
  weight_ = 0;
  buy_price_ = 0;
  add_cost_ = 0;
  buy_currency_type_ = 0;
  show_price_ = 0;
  drop_ = 0;
  min_level_ = 0;
  buy_daily_limit_ = 0;
  max_level_ = 0;
  store_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

store_itemConfig::~store_itemConfig() {
  SharedDtor();
}

void store_itemConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void store_itemConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* store_itemConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return store_itemConfig_descriptor_;
}

const store_itemConfig& store_itemConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_store_5fitemConfig_2eproto();
  return *default_instance_;
}

store_itemConfig* store_itemConfig::default_instance_ = NULL;

store_itemConfig* store_itemConfig::New() const {
  return new store_itemConfig;
}

void store_itemConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vip_buy_lv_ = 0;
    vip_limit_add_ = 0;
    show_currency_type_ = 0;
    vip_show_lv_ = 0;
    id_ = 0;
    weight_ = 0;
    buy_price_ = 0;
    add_cost_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    buy_currency_type_ = 0;
    show_price_ = 0;
    drop_ = 0;
    min_level_ = 0;
    buy_daily_limit_ = 0;
    max_level_ = 0;
    store_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool store_itemConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_store_type;
        break;
      }

      // optional int32 store_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_store_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_type_)));
          set_has_store_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vip_buy_lv;
        break;
      }

      // optional int32 vip_buy_lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_buy_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_buy_lv_)));
          set_has_vip_buy_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buy_daily_limit;
        break;
      }

      // optional int32 buy_daily_limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_daily_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_daily_limit_)));
          set_has_buy_daily_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vip_limit_add;
        break;
      }

      // optional int32 vip_limit_add = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_limit_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_limit_add_)));
          set_has_vip_limit_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vip_show_lv;
        break;
      }

      // optional int32 vip_show_lv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_show_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_show_lv_)));
          set_has_vip_show_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_min_level;
        break;
      }

      // optional int32 min_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_level_)));
          set_has_min_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_max_level;
        break;
      }

      // optional int32 max_level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_level_)));
          set_has_max_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_drop;
        break;
      }

      // optional int32 drop = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drop_)));
          set_has_drop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_show_price;
        break;
      }

      // optional int32 show_price = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &show_price_)));
          set_has_show_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_show_currency_type;
        break;
      }

      // optional int32 show_currency_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_currency_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &show_currency_type_)));
          set_has_show_currency_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_buy_price;
        break;
      }

      // optional int32 buy_price = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_price_)));
          set_has_buy_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_buy_currency_type;
        break;
      }

      // optional int32 buy_currency_type = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_currency_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_currency_type_)));
          set_has_buy_currency_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_add_cost;
        break;
      }

      // optional int32 add_cost = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_cost_)));
          set_has_add_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_weight;
        break;
      }

      // optional int32 weight = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void store_itemConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 store_type = 2;
  if (has_store_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->store_type(), output);
  }

  // optional int32 vip_buy_lv = 3;
  if (has_vip_buy_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vip_buy_lv(), output);
  }

  // optional int32 buy_daily_limit = 4;
  if (has_buy_daily_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->buy_daily_limit(), output);
  }

  // optional int32 vip_limit_add = 5;
  if (has_vip_limit_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->vip_limit_add(), output);
  }

  // optional int32 vip_show_lv = 6;
  if (has_vip_show_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->vip_show_lv(), output);
  }

  // optional int32 min_level = 7;
  if (has_min_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->min_level(), output);
  }

  // optional int32 max_level = 8;
  if (has_max_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->max_level(), output);
  }

  // optional int32 drop = 9;
  if (has_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->drop(), output);
  }

  // optional int32 show_price = 10;
  if (has_show_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->show_price(), output);
  }

  // optional int32 show_currency_type = 11;
  if (has_show_currency_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->show_currency_type(), output);
  }

  // optional int32 buy_price = 12;
  if (has_buy_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->buy_price(), output);
  }

  // optional int32 buy_currency_type = 13;
  if (has_buy_currency_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->buy_currency_type(), output);
  }

  // optional int32 add_cost = 14;
  if (has_add_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->add_cost(), output);
  }

  // optional int32 weight = 15;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* store_itemConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 store_type = 2;
  if (has_store_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->store_type(), target);
  }

  // optional int32 vip_buy_lv = 3;
  if (has_vip_buy_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vip_buy_lv(), target);
  }

  // optional int32 buy_daily_limit = 4;
  if (has_buy_daily_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->buy_daily_limit(), target);
  }

  // optional int32 vip_limit_add = 5;
  if (has_vip_limit_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->vip_limit_add(), target);
  }

  // optional int32 vip_show_lv = 6;
  if (has_vip_show_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->vip_show_lv(), target);
  }

  // optional int32 min_level = 7;
  if (has_min_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->min_level(), target);
  }

  // optional int32 max_level = 8;
  if (has_max_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->max_level(), target);
  }

  // optional int32 drop = 9;
  if (has_drop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->drop(), target);
  }

  // optional int32 show_price = 10;
  if (has_show_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->show_price(), target);
  }

  // optional int32 show_currency_type = 11;
  if (has_show_currency_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->show_currency_type(), target);
  }

  // optional int32 buy_price = 12;
  if (has_buy_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->buy_price(), target);
  }

  // optional int32 buy_currency_type = 13;
  if (has_buy_currency_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->buy_currency_type(), target);
  }

  // optional int32 add_cost = 14;
  if (has_add_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->add_cost(), target);
  }

  // optional int32 weight = 15;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int store_itemConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 vip_buy_lv = 3;
    if (has_vip_buy_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_buy_lv());
    }

    // optional int32 vip_limit_add = 5;
    if (has_vip_limit_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_limit_add());
    }

    // optional int32 show_currency_type = 11;
    if (has_show_currency_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->show_currency_type());
    }

    // optional int32 vip_show_lv = 6;
    if (has_vip_show_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_show_lv());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 weight = 15;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weight());
    }

    // optional int32 buy_price = 12;
    if (has_buy_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_price());
    }

    // optional int32 add_cost = 14;
    if (has_add_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_cost());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 buy_currency_type = 13;
    if (has_buy_currency_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_currency_type());
    }

    // optional int32 show_price = 10;
    if (has_show_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->show_price());
    }

    // optional int32 drop = 9;
    if (has_drop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drop());
    }

    // optional int32 min_level = 7;
    if (has_min_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_level());
    }

    // optional int32 buy_daily_limit = 4;
    if (has_buy_daily_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_daily_limit());
    }

    // optional int32 max_level = 8;
    if (has_max_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_level());
    }

    // optional int32 store_type = 2;
    if (has_store_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->store_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void store_itemConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const store_itemConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const store_itemConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void store_itemConfig::MergeFrom(const store_itemConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vip_buy_lv()) {
      set_vip_buy_lv(from.vip_buy_lv());
    }
    if (from.has_vip_limit_add()) {
      set_vip_limit_add(from.vip_limit_add());
    }
    if (from.has_show_currency_type()) {
      set_show_currency_type(from.show_currency_type());
    }
    if (from.has_vip_show_lv()) {
      set_vip_show_lv(from.vip_show_lv());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_buy_price()) {
      set_buy_price(from.buy_price());
    }
    if (from.has_add_cost()) {
      set_add_cost(from.add_cost());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_buy_currency_type()) {
      set_buy_currency_type(from.buy_currency_type());
    }
    if (from.has_show_price()) {
      set_show_price(from.show_price());
    }
    if (from.has_drop()) {
      set_drop(from.drop());
    }
    if (from.has_min_level()) {
      set_min_level(from.min_level());
    }
    if (from.has_buy_daily_limit()) {
      set_buy_daily_limit(from.buy_daily_limit());
    }
    if (from.has_max_level()) {
      set_max_level(from.max_level());
    }
    if (from.has_store_type()) {
      set_store_type(from.store_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void store_itemConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void store_itemConfig::CopyFrom(const store_itemConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool store_itemConfig::IsInitialized() const {

  return true;
}

void store_itemConfig::Swap(store_itemConfig* other) {
  if (other != this) {
    std::swap(vip_buy_lv_, other->vip_buy_lv_);
    std::swap(vip_limit_add_, other->vip_limit_add_);
    std::swap(show_currency_type_, other->show_currency_type_);
    std::swap(vip_show_lv_, other->vip_show_lv_);
    std::swap(id_, other->id_);
    std::swap(weight_, other->weight_);
    std::swap(buy_price_, other->buy_price_);
    std::swap(add_cost_, other->add_cost_);
    std::swap(buy_currency_type_, other->buy_currency_type_);
    std::swap(show_price_, other->show_price_);
    std::swap(drop_, other->drop_);
    std::swap(min_level_, other->min_level_);
    std::swap(buy_daily_limit_, other->buy_daily_limit_);
    std::swap(max_level_, other->max_level_);
    std::swap(store_type_, other->store_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata store_itemConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = store_itemConfig_descriptor_;
  metadata.reflection = store_itemConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MoneytreeConfig.proto

#ifndef PROTOBUF_MoneytreeConfig_2eproto__INCLUDED
#define PROTOBUF_MoneytreeConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace DianShiTech {
namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MoneytreeConfig_2eproto();
void protobuf_AssignDesc_MoneytreeConfig_2eproto();
void protobuf_ShutdownFile_MoneytreeConfig_2eproto();

class MoneytreeConfig;

// ===================================================================

class MoneytreeConfig : public ::google::protobuf::Message {
 public:
  MoneytreeConfig();
  virtual ~MoneytreeConfig();

  MoneytreeConfig(const MoneytreeConfig& from);

  inline MoneytreeConfig& operator=(const MoneytreeConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MoneytreeConfig& default_instance();

  void Swap(MoneytreeConfig* other);

  // implements Message ----------------------------------------------

  MoneytreeConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MoneytreeConfig& from);
  void MergeFrom(const MoneytreeConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 base_chance = 2;
  inline bool has_base_chance() const;
  inline void clear_base_chance();
  static const int kBaseChanceFieldNumber = 2;
  inline ::google::protobuf::int32 base_chance() const;
  inline void set_base_chance(::google::protobuf::int32 value);

  // optional int32 add_chance = 3;
  inline bool has_add_chance() const;
  inline void clear_add_chance();
  static const int kAddChanceFieldNumber = 3;
  inline ::google::protobuf::int32 add_chance() const;
  inline void set_add_chance(::google::protobuf::int32 value);

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 vip_currency_add_count = 6;
  inline bool has_vip_currency_add_count() const;
  inline void clear_vip_currency_add_count();
  static const int kVipCurrencyAddCountFieldNumber = 6;
  inline ::google::protobuf::int32 vip_currency_add_count() const;
  inline void set_vip_currency_add_count(::google::protobuf::int32 value);

  // optional int32 normal_currency_add_count = 5;
  inline bool has_normal_currency_add_count() const;
  inline void clear_normal_currency_add_count();
  static const int kNormalCurrencyAddCountFieldNumber = 5;
  inline ::google::protobuf::int32 normal_currency_add_count() const;
  inline void set_normal_currency_add_count(::google::protobuf::int32 value);

  // optional int32 base_currency_count = 4;
  inline bool has_base_currency_count() const;
  inline void clear_base_currency_count();
  static const int kBaseCurrencyCountFieldNumber = 4;
  inline ::google::protobuf::int32 base_currency_count() const;
  inline void set_base_currency_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DianShiTech.Config.MoneytreeConfig)
 private:
  inline void set_has_base_chance();
  inline void clear_has_base_chance();
  inline void set_has_add_chance();
  inline void clear_has_add_chance();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_vip_currency_add_count();
  inline void clear_has_vip_currency_add_count();
  inline void set_has_normal_currency_add_count();
  inline void clear_has_normal_currency_add_count();
  inline void set_has_base_currency_count();
  inline void clear_has_base_currency_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 base_chance_;
  ::google::protobuf::int32 add_chance_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 vip_currency_add_count_;
  ::google::protobuf::int32 normal_currency_add_count_;
  ::google::protobuf::int32 base_currency_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_MoneytreeConfig_2eproto();
  friend void protobuf_AssignDesc_MoneytreeConfig_2eproto();
  friend void protobuf_ShutdownFile_MoneytreeConfig_2eproto();

  void InitAsDefaultInstance();
  static MoneytreeConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// MoneytreeConfig

// optional int32 base_chance = 2;
inline bool MoneytreeConfig::has_base_chance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoneytreeConfig::set_has_base_chance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MoneytreeConfig::clear_has_base_chance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MoneytreeConfig::clear_base_chance() {
  base_chance_ = 0;
  clear_has_base_chance();
}
inline ::google::protobuf::int32 MoneytreeConfig::base_chance() const {
  return base_chance_;
}
inline void MoneytreeConfig::set_base_chance(::google::protobuf::int32 value) {
  set_has_base_chance();
  base_chance_ = value;
}

// optional int32 add_chance = 3;
inline bool MoneytreeConfig::has_add_chance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MoneytreeConfig::set_has_add_chance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MoneytreeConfig::clear_has_add_chance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MoneytreeConfig::clear_add_chance() {
  add_chance_ = 0;
  clear_has_add_chance();
}
inline ::google::protobuf::int32 MoneytreeConfig::add_chance() const {
  return add_chance_;
}
inline void MoneytreeConfig::set_add_chance(::google::protobuf::int32 value) {
  set_has_add_chance();
  add_chance_ = value;
}

// optional int32 id = 1;
inline bool MoneytreeConfig::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MoneytreeConfig::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MoneytreeConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MoneytreeConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 MoneytreeConfig::id() const {
  return id_;
}
inline void MoneytreeConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 vip_currency_add_count = 6;
inline bool MoneytreeConfig::has_vip_currency_add_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MoneytreeConfig::set_has_vip_currency_add_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MoneytreeConfig::clear_has_vip_currency_add_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MoneytreeConfig::clear_vip_currency_add_count() {
  vip_currency_add_count_ = 0;
  clear_has_vip_currency_add_count();
}
inline ::google::protobuf::int32 MoneytreeConfig::vip_currency_add_count() const {
  return vip_currency_add_count_;
}
inline void MoneytreeConfig::set_vip_currency_add_count(::google::protobuf::int32 value) {
  set_has_vip_currency_add_count();
  vip_currency_add_count_ = value;
}

// optional int32 normal_currency_add_count = 5;
inline bool MoneytreeConfig::has_normal_currency_add_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MoneytreeConfig::set_has_normal_currency_add_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MoneytreeConfig::clear_has_normal_currency_add_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MoneytreeConfig::clear_normal_currency_add_count() {
  normal_currency_add_count_ = 0;
  clear_has_normal_currency_add_count();
}
inline ::google::protobuf::int32 MoneytreeConfig::normal_currency_add_count() const {
  return normal_currency_add_count_;
}
inline void MoneytreeConfig::set_normal_currency_add_count(::google::protobuf::int32 value) {
  set_has_normal_currency_add_count();
  normal_currency_add_count_ = value;
}

// optional int32 base_currency_count = 4;
inline bool MoneytreeConfig::has_base_currency_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MoneytreeConfig::set_has_base_currency_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MoneytreeConfig::clear_has_base_currency_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MoneytreeConfig::clear_base_currency_count() {
  base_currency_count_ = 0;
  clear_has_base_currency_count();
}
inline ::google::protobuf::int32 MoneytreeConfig::base_currency_count() const {
  return base_currency_count_;
}
inline void MoneytreeConfig::set_base_currency_count(::google::protobuf::int32 value) {
  set_has_base_currency_count();
  base_currency_count_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace DianShiTech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MoneytreeConfig_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerDataS2C.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PlayerDataS2C.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Pro {

namespace {

const ::google::protobuf::Descriptor* AccountData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerItems_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerDaily_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerDaily_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* Store_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Store_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Store_StoreType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StoreRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreRecord_Record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreRecord_Record_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerStore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerStore_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSync_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSync_ItemSyncData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSync_ItemSyncData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSync_ItemSyncData_ItemSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSync_ItemSyncData_ItemSync_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSync_QuestSyncData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSync_QuestSyncData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSync_QuestSyncData_QuestSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSync_QuestSyncData_QuestSync_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSync_DailySyncData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSync_DailySyncData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSync_StoreSyncData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSync_StoreSyncData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSync_StoreSyncData_StoreRecordSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSync_StoreSyncData_StoreRecordSync_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerSync_Action_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_PlayerDataS2C_2eproto() {
  protobuf_AddDesc_PlayerDataS2C_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PlayerDataS2C.proto");
  GOOGLE_CHECK(file != NULL);
  AccountData_descriptor_ = file->message_type(0);
  static const int AccountData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, downchannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, totallogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, cell_),
  };
  AccountData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountData_descriptor_,
      AccountData::default_instance_,
      AccountData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountData));
  PlayerBase_descriptor_ = file->message_type(1);
  static const int PlayerBase_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBase, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBase, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBase, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBase, freemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBase, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBase, token_),
  };
  PlayerBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerBase_descriptor_,
      PlayerBase::default_instance_,
      PlayerBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerBase));
  Item_descriptor_ = file->message_type(2);
  static const int Item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, config_),
  };
  Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_descriptor_,
      Item::default_instance_,
      Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item));
  PlayerItems_descriptor_ = file->message_type(3);
  static const int PlayerItems_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerItems, items_),
  };
  PlayerItems_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerItems_descriptor_,
      PlayerItems::default_instance_,
      PlayerItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerItems, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerItems, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerItems));
  Quest_descriptor_ = file->message_type(4);
  static const int Quest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest, progress_),
  };
  Quest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quest_descriptor_,
      Quest::default_instance_,
      Quest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quest));
  PlayerQuest_descriptor_ = file->message_type(5);
  static const int PlayerQuest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuest, quests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuest, donequests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuest, achievement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuest, doneachievement_),
  };
  PlayerQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerQuest_descriptor_,
      PlayerQuest::default_instance_,
      PlayerQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerQuest));
  PlayerDaily_descriptor_ = file->message_type(6);
  static const int PlayerDaily_offsets_[1] = {
  };
  PlayerDaily_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerDaily_descriptor_,
      PlayerDaily::default_instance_,
      PlayerDaily_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDaily, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDaily, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerDaily));
  ShopCell_descriptor_ = file->message_type(7);
  static const int ShopCell_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCell, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCell, config_),
  };
  ShopCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopCell_descriptor_,
      ShopCell::default_instance_,
      ShopCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopCell));
  Store_descriptor_ = file->message_type(8);
  static const int Store_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Store, cells_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Store, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Store, nextrefreshtime_),
  };
  Store_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Store_descriptor_,
      Store::default_instance_,
      Store_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Store, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Store, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Store));
  Store_StoreType_descriptor_ = Store_descriptor_->enum_type(0);
  StoreRecord_descriptor_ = file->message_type(9);
  static const int StoreRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRecord, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRecord, record_),
  };
  StoreRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreRecord_descriptor_,
      StoreRecord::default_instance_,
      StoreRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreRecord));
  StoreRecord_Record_descriptor_ = StoreRecord_descriptor_->nested_type(0);
  static const int StoreRecord_Record_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRecord_Record, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRecord_Record, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRecord_Record, last_time_),
  };
  StoreRecord_Record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreRecord_Record_descriptor_,
      StoreRecord_Record::default_instance_,
      StoreRecord_Record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRecord_Record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRecord_Record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreRecord_Record));
  PlayerStore_descriptor_ = file->message_type(10);
  static const int PlayerStore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStore, store_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStore, record_),
  };
  PlayerStore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerStore_descriptor_,
      PlayerStore::default_instance_,
      PlayerStore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerStore));
  PlayerData_descriptor_ = file->message_type(11);
  static const int PlayerData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, quest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, daily_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, store_),
  };
  PlayerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerData_descriptor_,
      PlayerData::default_instance_,
      PlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerData));
  PlayerSync_descriptor_ = file->message_type(12);
  static const int PlayerSync_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync, quest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync, daily_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync, store_),
  };
  PlayerSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSync_descriptor_,
      PlayerSync::default_instance_,
      PlayerSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSync));
  PlayerSync_ItemSyncData_descriptor_ = PlayerSync_descriptor_->nested_type(0);
  static const int PlayerSync_ItemSyncData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_ItemSyncData, data_),
  };
  PlayerSync_ItemSyncData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSync_ItemSyncData_descriptor_,
      PlayerSync_ItemSyncData::default_instance_,
      PlayerSync_ItemSyncData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_ItemSyncData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_ItemSyncData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSync_ItemSyncData));
  PlayerSync_ItemSyncData_ItemSync_descriptor_ = PlayerSync_ItemSyncData_descriptor_->nested_type(0);
  static const int PlayerSync_ItemSyncData_ItemSync_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_ItemSyncData_ItemSync, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_ItemSyncData_ItemSync, action_),
  };
  PlayerSync_ItemSyncData_ItemSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSync_ItemSyncData_ItemSync_descriptor_,
      PlayerSync_ItemSyncData_ItemSync::default_instance_,
      PlayerSync_ItemSyncData_ItemSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_ItemSyncData_ItemSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_ItemSyncData_ItemSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSync_ItemSyncData_ItemSync));
  PlayerSync_QuestSyncData_descriptor_ = PlayerSync_descriptor_->nested_type(1);
  static const int PlayerSync_QuestSyncData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_QuestSyncData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_QuestSyncData, done_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_QuestSyncData, achievement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_QuestSyncData, doneachievement_),
  };
  PlayerSync_QuestSyncData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSync_QuestSyncData_descriptor_,
      PlayerSync_QuestSyncData::default_instance_,
      PlayerSync_QuestSyncData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_QuestSyncData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_QuestSyncData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSync_QuestSyncData));
  PlayerSync_QuestSyncData_QuestSync_descriptor_ = PlayerSync_QuestSyncData_descriptor_->nested_type(0);
  static const int PlayerSync_QuestSyncData_QuestSync_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_QuestSyncData_QuestSync, quest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_QuestSyncData_QuestSync, action_),
  };
  PlayerSync_QuestSyncData_QuestSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSync_QuestSyncData_QuestSync_descriptor_,
      PlayerSync_QuestSyncData_QuestSync::default_instance_,
      PlayerSync_QuestSyncData_QuestSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_QuestSyncData_QuestSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_QuestSyncData_QuestSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSync_QuestSyncData_QuestSync));
  PlayerSync_DailySyncData_descriptor_ = PlayerSync_descriptor_->nested_type(2);
  static const int PlayerSync_DailySyncData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_DailySyncData, bsync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_DailySyncData, data_),
  };
  PlayerSync_DailySyncData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSync_DailySyncData_descriptor_,
      PlayerSync_DailySyncData::default_instance_,
      PlayerSync_DailySyncData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_DailySyncData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_DailySyncData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSync_DailySyncData));
  PlayerSync_StoreSyncData_descriptor_ = PlayerSync_descriptor_->nested_type(3);
  static const int PlayerSync_StoreSyncData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_StoreSyncData, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_StoreSyncData, store_),
  };
  PlayerSync_StoreSyncData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSync_StoreSyncData_descriptor_,
      PlayerSync_StoreSyncData::default_instance_,
      PlayerSync_StoreSyncData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_StoreSyncData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_StoreSyncData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSync_StoreSyncData));
  PlayerSync_StoreSyncData_StoreRecordSync_descriptor_ = PlayerSync_StoreSyncData_descriptor_->nested_type(0);
  static const int PlayerSync_StoreSyncData_StoreRecordSync_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_StoreSyncData_StoreRecordSync, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_StoreSyncData_StoreRecordSync, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_StoreSyncData_StoreRecordSync, type_),
  };
  PlayerSync_StoreSyncData_StoreRecordSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSync_StoreSyncData_StoreRecordSync_descriptor_,
      PlayerSync_StoreSyncData_StoreRecordSync::default_instance_,
      PlayerSync_StoreSyncData_StoreRecordSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_StoreSyncData_StoreRecordSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSync_StoreSyncData_StoreRecordSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSync_StoreSyncData_StoreRecordSync));
  PlayerSync_Action_descriptor_ = PlayerSync_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PlayerDataS2C_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountData_descriptor_, &AccountData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerBase_descriptor_, &PlayerBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_descriptor_, &Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerItems_descriptor_, &PlayerItems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quest_descriptor_, &Quest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerQuest_descriptor_, &PlayerQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerDaily_descriptor_, &PlayerDaily::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopCell_descriptor_, &ShopCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Store_descriptor_, &Store::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreRecord_descriptor_, &StoreRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreRecord_Record_descriptor_, &StoreRecord_Record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerStore_descriptor_, &PlayerStore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerData_descriptor_, &PlayerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSync_descriptor_, &PlayerSync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSync_ItemSyncData_descriptor_, &PlayerSync_ItemSyncData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSync_ItemSyncData_ItemSync_descriptor_, &PlayerSync_ItemSyncData_ItemSync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSync_QuestSyncData_descriptor_, &PlayerSync_QuestSyncData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSync_QuestSyncData_QuestSync_descriptor_, &PlayerSync_QuestSyncData_QuestSync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSync_DailySyncData_descriptor_, &PlayerSync_DailySyncData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSync_StoreSyncData_descriptor_, &PlayerSync_StoreSyncData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSync_StoreSyncData_StoreRecordSync_descriptor_, &PlayerSync_StoreSyncData_StoreRecordSync::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PlayerDataS2C_2eproto() {
  delete AccountData::default_instance_;
  delete AccountData_reflection_;
  delete PlayerBase::default_instance_;
  delete PlayerBase_reflection_;
  delete Item::default_instance_;
  delete Item_reflection_;
  delete PlayerItems::default_instance_;
  delete PlayerItems_reflection_;
  delete Quest::default_instance_;
  delete Quest_reflection_;
  delete PlayerQuest::default_instance_;
  delete PlayerQuest_reflection_;
  delete PlayerDaily::default_instance_;
  delete PlayerDaily_reflection_;
  delete ShopCell::default_instance_;
  delete ShopCell_reflection_;
  delete Store::default_instance_;
  delete Store_reflection_;
  delete StoreRecord::default_instance_;
  delete StoreRecord_reflection_;
  delete StoreRecord_Record::default_instance_;
  delete StoreRecord_Record_reflection_;
  delete PlayerStore::default_instance_;
  delete PlayerStore_reflection_;
  delete PlayerData::default_instance_;
  delete PlayerData_reflection_;
  delete PlayerSync::default_instance_;
  delete PlayerSync_reflection_;
  delete PlayerSync_ItemSyncData::default_instance_;
  delete PlayerSync_ItemSyncData_reflection_;
  delete PlayerSync_ItemSyncData_ItemSync::default_instance_;
  delete PlayerSync_ItemSyncData_ItemSync_reflection_;
  delete PlayerSync_QuestSyncData::default_instance_;
  delete PlayerSync_QuestSyncData_reflection_;
  delete PlayerSync_QuestSyncData_QuestSync::default_instance_;
  delete PlayerSync_QuestSyncData_QuestSync_reflection_;
  delete PlayerSync_DailySyncData::default_instance_;
  delete PlayerSync_DailySyncData_reflection_;
  delete PlayerSync_StoreSyncData::default_instance_;
  delete PlayerSync_StoreSyncData_reflection_;
  delete PlayerSync_StoreSyncData_StoreRecordSync::default_instance_;
  delete PlayerSync_StoreSyncData_StoreRecordSync_reflection_;
}

void protobuf_AddDesc_PlayerDataS2C_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023PlayerDataS2C.proto\022\003Pro\"\250\001\n\013AccountDa"
    "ta\022\013\n\003pid\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\020\n\010passwor"
    "d\030\003 \001(\t\022\017\n\007channel\030\004 \001(\t\022\023\n\013downChannel\030"
    "\005 \001(\t\022\020\n\010nickName\030\006 \001(\t\022\022\n\ntotalLogin\030\007 "
    "\001(\r\022\022\n\ncreateTime\030\010 \001(\r\022\014\n\004cell\030\t \001(\t\"i\n"
    "\nPlayerBase\022\r\n\005level\030\001 \001(\r\022\014\n\004coin\030\002 \001(\r"
    "\022\r\n\005money\030\003 \001(\r\022\021\n\tfreeMoney\030\004 \001(\r\022\r\n\005po"
    "wer\030\005 \001(\r\022\r\n\005token\030\006 \001(\r\"\"\n\004Item\022\n\n\002id\030\001"
    " \001(\r\022\016\n\006config\030\002 \001(\r\"\'\n\013PlayerItems\022\030\n\005i"
    "tems\030\001 \003(\0132\t.Pro.Item\"5\n\005Quest\022\n\n\002id\030\003 \001"
    "(\r\022\016\n\006config\030\001 \001(\r\022\020\n\010progress\030\002 \001(\r\"w\n\013"
    "PlayerQuest\022\032\n\006quests\030\001 \003(\0132\n.Pro.Quest\022"
    "\022\n\ndoneQuests\030\002 \003(\r\022\037\n\013achievement\030\003 \003(\013"
    "2\n.Pro.Quest\022\027\n\017doneAchievement\030\004 \003(\r\"\r\n"
    "\013PlayerDaily\"&\n\010ShopCell\022\n\n\002id\030\001 \001(\r\022\016\n\006"
    "config\030\002 \001(\r\"\200\001\n\005Store\022\034\n\005cells\030\001 \003(\0132\r."
    "Pro.ShopCell\022\"\n\004type\030\002 \001(\0162\024.Pro.Store.S"
    "toreType\022\027\n\017nextRefreshTime\030\003 \001(\r\"\034\n\tSto"
    "reType\022\017\n\013Type_Normal\020\001\"\222\001\n\013StoreRecord\022"
    "\"\n\004type\030\001 \001(\0162\024.Pro.Store.StoreType\022\'\n\006r"
    "ecord\030\002 \003(\0132\027.Pro.StoreRecord.Record\0326\n\006"
    "Record\022\n\n\002id\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\022\021\n\tlas"
    "t_time\030\003 \001(\r\"J\n\013PlayerStore\022\031\n\005store\030\001 \003"
    "(\0132\n.Pro.Store\022 \n\006record\030\002 \003(\0132\020.Pro.Sto"
    "reRecord\"\273\001\n\nPlayerData\022\n\n\002id\030\001 \001(\r\022\035\n\004b"
    "ase\030\002 \001(\0132\017.Pro.PlayerBase\022\037\n\005items\030\003 \001("
    "\0132\020.Pro.PlayerItems\022\037\n\005quest\030\004 \001(\0132\020.Pro"
    ".PlayerQuest\022\037\n\005daily\030\005 \001(\0132\020.Pro.Player"
    "Daily\022\037\n\005store\030\006 \001(\0132\020.Pro.PlayerStore\"\303"
    "\007\n\nPlayerSync\022\035\n\004base\030\001 \001(\0132\017.Pro.Player"
    "Base\022*\n\004item\030\002 \001(\0132\034.Pro.PlayerSync.Item"
    "SyncData\022,\n\005quest\030\003 \001(\0132\035.Pro.PlayerSync"
    ".QuestSyncData\022,\n\005daily\030\004 \001(\0132\035.Pro.Play"
    "erSync.DailySyncData\022,\n\005store\030\005 \001(\0132\035.Pr"
    "o.PlayerSync.StoreSyncData\032\207\001\n\014ItemSyncD"
    "ata\022*\n\004data\030\001 \003(\0132\034.Pro.PlayerSync.ItemS"
    "yncData\032K\n\010ItemSync\022\027\n\004item\030\001 \001(\0132\t.Pro."
    "Item\022&\n\006action\030\002 \001(\0162\026.Pro.PlayerSync.Ac"
    "tion\032\357\001\n\rQuestSyncData\0225\n\004data\030\001 \003(\0132\'.P"
    "ro.PlayerSync.QuestSyncData.QuestSync\022\014\n"
    "\004done\030\002 \003(\r\022<\n\013achievement\030\003 \003(\0132\'.Pro.P"
    "layerSync.QuestSyncData.QuestSync\022\027\n\017don"
    "eAchievement\030\004 \003(\r\032B\n\tQuestSync\022\r\n\005Quest"
    "\030\001 \001(\r\022&\n\006action\030\002 \001(\0162\026.Pro.PlayerSync."
    "Action\032>\n\rDailySyncData\022\r\n\005bSync\030\001 \001(\010\022\036"
    "\n\004data\030\002 \001(\0132\020.Pro.PlayerDaily\032\362\001\n\rStore"
    "SyncData\022=\n\006record\030\001 \003(\0132-.Pro.PlayerSyn"
    "c.StoreSyncData.StoreRecordSync\022\031\n\005store"
    "\030\002 \003(\0132\n.Pro.Store\032\206\001\n\017StoreRecordSync\022&"
    "\n\006action\030\001 \001(\0162\026.Pro.PlayerSync.Action\022\'"
    "\n\006record\030\002 \003(\0132\027.Pro.StoreRecord.Record\022"
    "\"\n\004type\030\003 \001(\0162\024.Pro.Store.StoreType\"/\n\006A"
    "ction\022\t\n\005_ADD_\020\001\022\014\n\010_UPDATE_\020\002\022\014\n\010_REMOV"
    "E_\020\003", 2124);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PlayerDataS2C.proto", &protobuf_RegisterTypes);
  AccountData::default_instance_ = new AccountData();
  PlayerBase::default_instance_ = new PlayerBase();
  Item::default_instance_ = new Item();
  PlayerItems::default_instance_ = new PlayerItems();
  Quest::default_instance_ = new Quest();
  PlayerQuest::default_instance_ = new PlayerQuest();
  PlayerDaily::default_instance_ = new PlayerDaily();
  ShopCell::default_instance_ = new ShopCell();
  Store::default_instance_ = new Store();
  StoreRecord::default_instance_ = new StoreRecord();
  StoreRecord_Record::default_instance_ = new StoreRecord_Record();
  PlayerStore::default_instance_ = new PlayerStore();
  PlayerData::default_instance_ = new PlayerData();
  PlayerSync::default_instance_ = new PlayerSync();
  PlayerSync_ItemSyncData::default_instance_ = new PlayerSync_ItemSyncData();
  PlayerSync_ItemSyncData_ItemSync::default_instance_ = new PlayerSync_ItemSyncData_ItemSync();
  PlayerSync_QuestSyncData::default_instance_ = new PlayerSync_QuestSyncData();
  PlayerSync_QuestSyncData_QuestSync::default_instance_ = new PlayerSync_QuestSyncData_QuestSync();
  PlayerSync_DailySyncData::default_instance_ = new PlayerSync_DailySyncData();
  PlayerSync_StoreSyncData::default_instance_ = new PlayerSync_StoreSyncData();
  PlayerSync_StoreSyncData_StoreRecordSync::default_instance_ = new PlayerSync_StoreSyncData_StoreRecordSync();
  AccountData::default_instance_->InitAsDefaultInstance();
  PlayerBase::default_instance_->InitAsDefaultInstance();
  Item::default_instance_->InitAsDefaultInstance();
  PlayerItems::default_instance_->InitAsDefaultInstance();
  Quest::default_instance_->InitAsDefaultInstance();
  PlayerQuest::default_instance_->InitAsDefaultInstance();
  PlayerDaily::default_instance_->InitAsDefaultInstance();
  ShopCell::default_instance_->InitAsDefaultInstance();
  Store::default_instance_->InitAsDefaultInstance();
  StoreRecord::default_instance_->InitAsDefaultInstance();
  StoreRecord_Record::default_instance_->InitAsDefaultInstance();
  PlayerStore::default_instance_->InitAsDefaultInstance();
  PlayerData::default_instance_->InitAsDefaultInstance();
  PlayerSync::default_instance_->InitAsDefaultInstance();
  PlayerSync_ItemSyncData::default_instance_->InitAsDefaultInstance();
  PlayerSync_ItemSyncData_ItemSync::default_instance_->InitAsDefaultInstance();
  PlayerSync_QuestSyncData::default_instance_->InitAsDefaultInstance();
  PlayerSync_QuestSyncData_QuestSync::default_instance_->InitAsDefaultInstance();
  PlayerSync_DailySyncData::default_instance_->InitAsDefaultInstance();
  PlayerSync_StoreSyncData::default_instance_->InitAsDefaultInstance();
  PlayerSync_StoreSyncData_StoreRecordSync::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PlayerDataS2C_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PlayerDataS2C_2eproto {
  StaticDescriptorInitializer_PlayerDataS2C_2eproto() {
    protobuf_AddDesc_PlayerDataS2C_2eproto();
  }
} static_descriptor_initializer_PlayerDataS2C_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AccountData::kPidFieldNumber;
const int AccountData::kNameFieldNumber;
const int AccountData::kPasswordFieldNumber;
const int AccountData::kChannelFieldNumber;
const int AccountData::kDownChannelFieldNumber;
const int AccountData::kNickNameFieldNumber;
const int AccountData::kTotalLoginFieldNumber;
const int AccountData::kCreateTimeFieldNumber;
const int AccountData::kCellFieldNumber;
#endif  // !_MSC_VER

AccountData::AccountData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountData::InitAsDefaultInstance() {
}

AccountData::AccountData(const AccountData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountData::SharedCtor() {
  _cached_size_ = 0;
  pid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  downchannel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  totallogin_ = 0u;
  createtime_ = 0u;
  cell_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountData::~AccountData() {
  SharedDtor();
}

void AccountData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (downchannel_ != &::google::protobuf::internal::kEmptyString) {
    delete downchannel_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (cell_ != &::google::protobuf::internal::kEmptyString) {
    delete cell_;
  }
  if (this != default_instance_) {
  }
}

void AccountData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountData_descriptor_;
}

const AccountData& AccountData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerDataS2C_2eproto();
  return *default_instance_;
}

AccountData* AccountData::default_instance_ = NULL;

AccountData* AccountData::New() const {
  return new AccountData;
}

void AccountData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
    if (has_downchannel()) {
      if (downchannel_ != &::google::protobuf::internal::kEmptyString) {
        downchannel_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    totallogin_ = 0u;
    createtime_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_cell()) {
      if (cell_ != &::google::protobuf::internal::kEmptyString) {
        cell_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_channel;
        break;
      }

      // optional string channel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_downChannel;
        break;
      }

      // optional string downChannel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_downChannel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_downchannel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->downchannel().data(), this->downchannel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_nickName;
        break;
      }

      // optional string nickName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_totalLogin;
        break;
      }

      // optional uint32 totalLogin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalLogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totallogin_)));
          set_has_totallogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_createTime;
        break;
      }

      // optional uint32 createTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_cell;
        break;
      }

      // optional string cell = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cell()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cell().data(), this->cell().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }

  // optional string channel = 4;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->channel(), output);
  }

  // optional string downChannel = 5;
  if (has_downchannel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->downchannel().data(), this->downchannel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->downchannel(), output);
  }

  // optional string nickName = 6;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->nickname(), output);
  }

  // optional uint32 totalLogin = 7;
  if (has_totallogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->totallogin(), output);
  }

  // optional uint32 createTime = 8;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->createtime(), output);
  }

  // optional string cell = 9;
  if (has_cell()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cell().data(), this->cell().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->cell(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional string channel = 4;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->channel(), target);
  }

  // optional string downChannel = 5;
  if (has_downchannel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->downchannel().data(), this->downchannel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->downchannel(), target);
  }

  // optional string nickName = 6;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->nickname(), target);
  }

  // optional uint32 totalLogin = 7;
  if (has_totallogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->totallogin(), target);
  }

  // optional uint32 createTime = 8;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->createtime(), target);
  }

  // optional string cell = 9;
  if (has_cell()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cell().data(), this->cell().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->cell(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string channel = 4;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // optional string downChannel = 5;
    if (has_downchannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->downchannel());
    }

    // optional string nickName = 6;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional uint32 totalLogin = 7;
    if (has_totallogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totallogin());
    }

    // optional uint32 createTime = 8;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string cell = 9;
    if (has_cell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cell());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountData::MergeFrom(const AccountData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_downchannel()) {
      set_downchannel(from.downchannel());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_totallogin()) {
      set_totallogin(from.totallogin());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cell()) {
      set_cell(from.cell());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountData::CopyFrom(const AccountData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountData::IsInitialized() const {

  return true;
}

void AccountData::Swap(AccountData* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(name_, other->name_);
    std::swap(password_, other->password_);
    std::swap(channel_, other->channel_);
    std::swap(downchannel_, other->downchannel_);
    std::swap(nickname_, other->nickname_);
    std::swap(totallogin_, other->totallogin_);
    std::swap(createtime_, other->createtime_);
    std::swap(cell_, other->cell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountData_descriptor_;
  metadata.reflection = AccountData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerBase::kLevelFieldNumber;
const int PlayerBase::kCoinFieldNumber;
const int PlayerBase::kMoneyFieldNumber;
const int PlayerBase::kFreeMoneyFieldNumber;
const int PlayerBase::kPowerFieldNumber;
const int PlayerBase::kTokenFieldNumber;
#endif  // !_MSC_VER

PlayerBase::PlayerBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerBase::InitAsDefaultInstance() {
}

PlayerBase::PlayerBase(const PlayerBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerBase::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  coin_ = 0u;
  money_ = 0u;
  freemoney_ = 0u;
  power_ = 0u;
  token_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerBase::~PlayerBase() {
  SharedDtor();
}

void PlayerBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerBase_descriptor_;
}

const PlayerBase& PlayerBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerDataS2C_2eproto();
  return *default_instance_;
}

PlayerBase* PlayerBase::default_instance_ = NULL;

PlayerBase* PlayerBase::New() const {
  return new PlayerBase;
}

void PlayerBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    coin_ = 0u;
    money_ = 0u;
    freemoney_ = 0u;
    power_ = 0u;
    token_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coin;
        break;
      }

      // optional uint32 coin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }

      // optional uint32 money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_freeMoney;
        break;
      }

      // optional uint32 freeMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freemoney_)));
          set_has_freemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_power;
        break;
      }

      // optional uint32 power = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_token;
        break;
      }

      // optional uint32 token = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // optional uint32 coin = 2;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->coin(), output);
  }

  // optional uint32 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->money(), output);
  }

  // optional uint32 freeMoney = 4;
  if (has_freemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->freemoney(), output);
  }

  // optional uint32 power = 5;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->power(), output);
  }

  // optional uint32 token = 6;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // optional uint32 coin = 2;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->coin(), target);
  }

  // optional uint32 money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->money(), target);
  }

  // optional uint32 freeMoney = 4;
  if (has_freemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->freemoney(), target);
  }

  // optional uint32 power = 5;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->power(), target);
  }

  // optional uint32 token = 6;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 coin = 2;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // optional uint32 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

    // optional uint32 freeMoney = 4;
    if (has_freemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freemoney());
    }

    // optional uint32 power = 5;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power());
    }

    // optional uint32 token = 6;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerBase::MergeFrom(const PlayerBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_freemoney()) {
      set_freemoney(from.freemoney());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerBase::CopyFrom(const PlayerBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerBase::IsInitialized() const {

  return true;
}

void PlayerBase::Swap(PlayerBase* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(coin_, other->coin_);
    std::swap(money_, other->money_);
    std::swap(freemoney_, other->freemoney_);
    std::swap(power_, other->power_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerBase_descriptor_;
  metadata.reflection = PlayerBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item::kIdFieldNumber;
const int Item::kConfigFieldNumber;
#endif  // !_MSC_VER

Item::Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item::InitAsDefaultInstance() {
}

Item::Item(const Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  config_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item::~Item() {
  SharedDtor();
}

void Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_descriptor_;
}

const Item& Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerDataS2C_2eproto();
  return *default_instance_;
}

Item* Item::default_instance_ = NULL;

Item* Item::New() const {
  return new Item;
}

void Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    config_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_config;
        break;
      }

      // optional uint32 config = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_config:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_)));
          set_has_config();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 config = 2;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->config(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 config = 2;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->config(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 config = 2;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->config());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_config()) {
      set_config(from.config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {

  return true;
}

void Item::Swap(Item* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_descriptor_;
  metadata.reflection = Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerItems::kItemsFieldNumber;
#endif  // !_MSC_VER

PlayerItems::PlayerItems()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerItems::InitAsDefaultInstance() {
}

PlayerItems::PlayerItems(const PlayerItems& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerItems::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerItems::~PlayerItems() {
  SharedDtor();
}

void PlayerItems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerItems_descriptor_;
}

const PlayerItems& PlayerItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerDataS2C_2eproto();
  return *default_instance_;
}

PlayerItems* PlayerItems::default_instance_ = NULL;

PlayerItems* PlayerItems::New() const {
  return new PlayerItems;
}

void PlayerItems::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Pro.Item items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Pro.Item items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Pro.Item items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerItems::ByteSize() const {
  int total_size = 0;

  // repeated .Pro.Item items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerItems::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerItems* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerItems*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerItems::MergeFrom(const PlayerItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerItems::CopyFrom(const PlayerItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerItems::IsInitialized() const {

  return true;
}

void PlayerItems::Swap(PlayerItems* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerItems_descriptor_;
  metadata.reflection = PlayerItems_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quest::kIdFieldNumber;
const int Quest::kConfigFieldNumber;
const int Quest::kProgressFieldNumber;
#endif  // !_MSC_VER

Quest::Quest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quest::InitAsDefaultInstance() {
}

Quest::Quest(const Quest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quest::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  config_ = 0u;
  progress_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quest::~Quest() {
  SharedDtor();
}

void Quest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quest_descriptor_;
}

const Quest& Quest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerDataS2C_2eproto();
  return *default_instance_;
}

Quest* Quest::default_instance_ = NULL;

Quest* Quest::New() const {
  return new Quest;
}

void Quest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    config_ = 0u;
    progress_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 config = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_)));
          set_has_config();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_progress;
        break;
      }

      // optional uint32 progress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 config = 1;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->config(), output);
  }

  // optional uint32 progress = 2;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->progress(), output);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 config = 1;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->config(), target);
  }

  // optional uint32 progress = 2;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->progress(), target);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 config = 1;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->config());
    }

    // optional uint32 progress = 2;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->progress());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quest::MergeFrom(const Quest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_config()) {
      set_config(from.config());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quest::CopyFrom(const Quest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quest::IsInitialized() const {

  return true;
}

void Quest::Swap(Quest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(config_, other->config_);
    std::swap(progress_, other->progress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quest_descriptor_;
  metadata.reflection = Quest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerQuest::kQuestsFieldNumber;
const int PlayerQuest::kDoneQuestsFieldNumber;
const int PlayerQuest::kAchievementFieldNumber;
const int PlayerQuest::kDoneAchievementFieldNumber;
#endif  // !_MSC_VER

PlayerQuest::PlayerQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerQuest::InitAsDefaultInstance() {
}

PlayerQuest::PlayerQuest(const PlayerQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerQuest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerQuest::~PlayerQuest() {
  SharedDtor();
}

void PlayerQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerQuest_descriptor_;
}

const PlayerQuest& PlayerQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerDataS2C_2eproto();
  return *default_instance_;
}

PlayerQuest* PlayerQuest::default_instance_ = NULL;

PlayerQuest* PlayerQuest::New() const {
  return new PlayerQuest;
}

void PlayerQuest::Clear() {
  quests_.Clear();
  donequests_.Clear();
  achievement_.Clear();
  doneachievement_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Pro.Quest quests = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_quests;
        if (input->ExpectTag(16)) goto parse_doneQuests;
        break;
      }

      // repeated uint32 doneQuests = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doneQuests:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_donequests())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_donequests())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_doneQuests;
        if (input->ExpectTag(26)) goto parse_achievement;
        break;
      }

      // repeated .Pro.Quest achievement = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_achievement;
        if (input->ExpectTag(32)) goto parse_doneAchievement;
        break;
      }

      // repeated uint32 doneAchievement = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doneAchievement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_doneachievement())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_doneachievement())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_doneAchievement;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Pro.Quest quests = 1;
  for (int i = 0; i < this->quests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->quests(i), output);
  }

  // repeated uint32 doneQuests = 2;
  for (int i = 0; i < this->donequests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->donequests(i), output);
  }

  // repeated .Pro.Quest achievement = 3;
  for (int i = 0; i < this->achievement_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->achievement(i), output);
  }

  // repeated uint32 doneAchievement = 4;
  for (int i = 0; i < this->doneachievement_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->doneachievement(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Pro.Quest quests = 1;
  for (int i = 0; i < this->quests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->quests(i), target);
  }

  // repeated uint32 doneQuests = 2;
  for (int i = 0; i < this->donequests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->donequests(i), target);
  }

  // repeated .Pro.Quest achievement = 3;
  for (int i = 0; i < this->achievement_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->achievement(i), target);
  }

  // repeated uint32 doneAchievement = 4;
  for (int i = 0; i < this->doneachievement_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->doneachievement(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerQuest::ByteSize() const {
  int total_size = 0;

  // repeated .Pro.Quest quests = 1;
  total_size += 1 * this->quests_size();
  for (int i = 0; i < this->quests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quests(i));
  }

  // repeated uint32 doneQuests = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->donequests_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->donequests(i));
    }
    total_size += 1 * this->donequests_size() + data_size;
  }

  // repeated .Pro.Quest achievement = 3;
  total_size += 1 * this->achievement_size();
  for (int i = 0; i < this->achievement_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievement(i));
  }

  // repeated uint32 doneAchievement = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->doneachievement_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->doneachievement(i));
    }
    total_size += 1 * this->doneachievement_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerQuest::MergeFrom(const PlayerQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  quests_.MergeFrom(from.quests_);
  donequests_.MergeFrom(from.donequests_);
  achievement_.MergeFrom(from.achievement_);
  doneachievement_.MergeFrom(from.doneachievement_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerQuest::CopyFrom(const PlayerQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerQuest::IsInitialized() const {

  return true;
}

void PlayerQuest::Swap(PlayerQuest* other) {
  if (other != this) {
    quests_.Swap(&other->quests_);
    donequests_.Swap(&other->donequests_);
    achievement_.Swap(&other->achievement_);
    doneachievement_.Swap(&other->doneachievement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerQuest_descriptor_;
  metadata.reflection = PlayerQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PlayerDaily::PlayerDaily()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerDaily::InitAsDefaultInstance() {
}

PlayerDaily::PlayerDaily(const PlayerDaily& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerDaily::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerDaily::~PlayerDaily() {
  SharedDtor();
}

void PlayerDaily::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerDaily::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerDaily::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerDaily_descriptor_;
}

const PlayerDaily& PlayerDaily::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerDataS2C_2eproto();
  return *default_instance_;
}

PlayerDaily* PlayerDaily::default_instance_ = NULL;

PlayerDaily* PlayerDaily::New() const {
  return new PlayerDaily;
}

void PlayerDaily::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerDaily::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PlayerDaily::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerDaily::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerDaily::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerDaily::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerDaily* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerDaily*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerDaily::MergeFrom(const PlayerDaily& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerDaily::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerDaily::CopyFrom(const PlayerDaily& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDaily::IsInitialized() const {

  return true;
}

void PlayerDaily::Swap(PlayerDaily* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerDaily::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerDaily_descriptor_;
  metadata.reflection = PlayerDaily_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopCell::kIdFieldNumber;
const int ShopCell::kConfigFieldNumber;
#endif  // !_MSC_VER

ShopCell::ShopCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShopCell::InitAsDefaultInstance() {
}

ShopCell::ShopCell(const ShopCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShopCell::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  config_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopCell::~ShopCell() {
  SharedDtor();
}

void ShopCell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShopCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopCell_descriptor_;
}

const ShopCell& ShopCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerDataS2C_2eproto();
  return *default_instance_;
}

ShopCell* ShopCell::default_instance_ = NULL;

ShopCell* ShopCell::New() const {
  return new ShopCell;
}

void ShopCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    config_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_config;
        break;
      }

      // optional uint32 config = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_config:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_)));
          set_has_config();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShopCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 config = 2;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->config(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShopCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 config = 2;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->config(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShopCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 config = 2;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->config());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopCell::MergeFrom(const ShopCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_config()) {
      set_config(from.config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopCell::CopyFrom(const ShopCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopCell::IsInitialized() const {

  return true;
}

void ShopCell::Swap(ShopCell* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopCell_descriptor_;
  metadata.reflection = ShopCell_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Store_StoreType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Store_StoreType_descriptor_;
}
bool Store_StoreType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Store_StoreType Store::Type_Normal;
const Store_StoreType Store::StoreType_MIN;
const Store_StoreType Store::StoreType_MAX;
const int Store::StoreType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Store::kCellsFieldNumber;
const int Store::kTypeFieldNumber;
const int Store::kNextRefreshTimeFieldNumber;
#endif  // !_MSC_VER

Store::Store()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Store::InitAsDefaultInstance() {
}

Store::Store(const Store& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Store::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  nextrefreshtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Store::~Store() {
  SharedDtor();
}

void Store::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Store::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Store::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Store_descriptor_;
}

const Store& Store::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerDataS2C_2eproto();
  return *default_instance_;
}

Store* Store::default_instance_ = NULL;

Store* Store::New() const {
  return new Store;
}

void Store::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    type_ = 1;
    nextrefreshtime_ = 0u;
  }
  cells_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Store::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Pro.ShopCell cells = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cells()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cells;
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .Pro.Store.StoreType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Pro::Store_StoreType_IsValid(value)) {
            set_type(static_cast< ::Pro::Store_StoreType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nextRefreshTime;
        break;
      }

      // optional uint32 nextRefreshTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextRefreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextrefreshtime_)));
          set_has_nextrefreshtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Store::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Pro.ShopCell cells = 1;
  for (int i = 0; i < this->cells_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cells(i), output);
  }

  // optional .Pro.Store.StoreType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint32 nextRefreshTime = 3;
  if (has_nextrefreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nextrefreshtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Store::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Pro.ShopCell cells = 1;
  for (int i = 0; i < this->cells_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cells(i), target);
  }

  // optional .Pro.Store.StoreType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint32 nextRefreshTime = 3;
  if (has_nextrefreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nextrefreshtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Store::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .Pro.Store.StoreType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 nextRefreshTime = 3;
    if (has_nextrefreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextrefreshtime());
    }

  }
  // repeated .Pro.ShopCell cells = 1;
  total_size += 1 * this->cells_size();
  for (int i = 0; i < this->cells_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cells(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Store::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Store* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Store*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Store::MergeFrom(const Store& from) {
  GOOGLE_CHECK_NE(&from, this);
  cells_.MergeFrom(from.cells_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_nextrefreshtime()) {
      set_nextrefreshtime(from.nextrefreshtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Store::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Store::CopyFrom(const Store& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Store::IsInitialized() const {

  return true;
}

void Store::Swap(Store* other) {
  if (other != this) {
    cells_.Swap(&other->cells_);
    std::swap(type_, other->type_);
    std::swap(nextrefreshtime_, other->nextrefreshtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Store::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Store_descriptor_;
  metadata.reflection = Store_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoreRecord_Record::kIdFieldNumber;
const int StoreRecord_Record::kCountFieldNumber;
const int StoreRecord_Record::kLastTimeFieldNumber;
#endif  // !_MSC_VER

StoreRecord_Record::StoreRecord_Record()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoreRecord_Record::InitAsDefaultInstance() {
}

StoreRecord_Record::StoreRecord_Record(const StoreRecord_Record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoreRecord_Record::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  count_ = 0u;
  last_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreRecord_Record::~StoreRecord_Record() {
  SharedDtor();
}

void StoreRecord_Record::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoreRecord_Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreRecord_Record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreRecord_Record_descriptor_;
}

const StoreRecord_Record& StoreRecord_Record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerDataS2C_2eproto();
  return *default_instance_;
}

StoreRecord_Record* StoreRecord_Record::default_instance_ = NULL;

StoreRecord_Record* StoreRecord_Record::New() const {
  return new StoreRecord_Record;
}

void StoreRecord_Record::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    count_ = 0u;
    last_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreRecord_Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_time;
        break;
      }

      // optional uint32 last_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreRecord_Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // optional uint32 last_time = 3;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreRecord_Record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // optional uint32 last_time = 3;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreRecord_Record::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 last_time = 3;
    if (has_last_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreRecord_Record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreRecord_Record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreRecord_Record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreRecord_Record::MergeFrom(const StoreRecord_Record& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreRecord_Record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreRecord_Record::CopyFrom(const StoreRecord_Record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreRecord_Record::IsInitialized() const {

  return true;
}

void StoreRecord_Record::Swap(StoreRecord_Record* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(last_time_, other->last_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreRecord_Record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreRecord_Record_descriptor_;
  metadata.reflection = StoreRecord_Record_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StoreRecord::kTypeFieldNumber;
const int StoreRecord::kRecordFieldNumber;
#endif  // !_MSC_VER

StoreRecord::StoreRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoreRecord::InitAsDefaultInstance() {
}

StoreRecord::StoreRecord(const StoreRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoreRecord::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreRecord::~StoreRecord() {
  SharedDtor();
}

void StoreRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoreRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreRecord_descriptor_;
}

const StoreRecord& StoreRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerDataS2C_2eproto();
  return *default_instance_;
}

StoreRecord* StoreRecord::default_instance_ = NULL;

StoreRecord* StoreRecord::New() const {
  return new StoreRecord;
}

void StoreRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
  }
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Pro.Store.StoreType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Pro::Store_StoreType_IsValid(value)) {
            set_type(static_cast< ::Pro::Store_StoreType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_record;
        break;
      }

      // repeated .Pro.StoreRecord.Record record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Pro.Store.StoreType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .Pro.StoreRecord.Record record = 2;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Pro.Store.StoreType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .Pro.StoreRecord.Record record = 2;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Pro.Store.StoreType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .Pro.StoreRecord.Record record = 2;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreRecord::MergeFrom(const StoreRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreRecord::CopyFrom(const StoreRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreRecord::IsInitialized() const {

  return true;
}

void StoreRecord::Swap(StoreRecord* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreRecord_descriptor_;
  metadata.reflection = StoreRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerStore::kStoreFieldNumber;
const int PlayerStore::kRecordFieldNumber;
#endif  // !_MSC_VER

PlayerStore::PlayerStore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerStore::InitAsDefaultInstance() {
}

PlayerStore::PlayerStore(const PlayerStore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerStore::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerStore::~PlayerStore() {
  SharedDtor();
}

void PlayerStore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerStore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerStore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerStore_descriptor_;
}

const PlayerStore& PlayerStore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerDataS2C_2eproto();
  return *default_instance_;
}

PlayerStore* PlayerStore::default_instance_ = NULL;

PlayerStore* PlayerStore::New() const {
  return new PlayerStore;
}

void PlayerStore::Clear() {
  store_.Clear();
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerStore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Pro.Store store = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_store:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_store()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_store;
        if (input->ExpectTag(18)) goto parse_record;
        break;
      }

      // repeated .Pro.StoreRecord record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerStore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Pro.Store store = 1;
  for (int i = 0; i < this->store_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->store(i), output);
  }

  // repeated .Pro.StoreRecord record = 2;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerStore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Pro.Store store = 1;
  for (int i = 0; i < this->store_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->store(i), target);
  }

  // repeated .Pro.StoreRecord record = 2;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerStore::ByteSize() const {
  int total_size = 0;

  // repeated .Pro.Store store = 1;
  total_size += 1 * this->store_size();
  for (int i = 0; i < this->store_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->store(i));
  }

  // repeated .Pro.StoreRecord record = 2;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerStore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerStore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerStore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerStore::MergeFrom(const PlayerStore& from) {
  GOOGLE_CHECK_NE(&from, this);
  store_.MergeFrom(from.store_);
  record_.MergeFrom(from.record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerStore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerStore::CopyFrom(const PlayerStore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerStore::IsInitialized() const {

  return true;
}

void PlayerStore::Swap(PlayerStore* other) {
  if (other != this) {
    store_.Swap(&other->store_);
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerStore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerStore_descriptor_;
  metadata.reflection = PlayerStore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerData::kIdFieldNumber;
const int PlayerData::kBaseFieldNumber;
const int PlayerData::kItemsFieldNumber;
const int PlayerData::kQuestFieldNumber;
const int PlayerData::kDailyFieldNumber;
const int PlayerData::kStoreFieldNumber;
#endif  // !_MSC_VER

PlayerData::PlayerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerData::InitAsDefaultInstance() {
  base_ = const_cast< ::Pro::PlayerBase*>(&::Pro::PlayerBase::default_instance());
  items_ = const_cast< ::Pro::PlayerItems*>(&::Pro::PlayerItems::default_instance());
  quest_ = const_cast< ::Pro::PlayerQuest*>(&::Pro::PlayerQuest::default_instance());
  daily_ = const_cast< ::Pro::PlayerDaily*>(&::Pro::PlayerDaily::default_instance());
  store_ = const_cast< ::Pro::PlayerStore*>(&::Pro::PlayerStore::default_instance());
}

PlayerData::PlayerData(const PlayerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  base_ = NULL;
  items_ = NULL;
  quest_ = NULL;
  daily_ = NULL;
  store_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerData::~PlayerData() {
  SharedDtor();
}

void PlayerData::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete items_;
    delete quest_;
    delete daily_;
    delete store_;
  }
}

void PlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerData_descriptor_;
}

const PlayerData& PlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerDataS2C_2eproto();
  return *default_instance_;
}

PlayerData* PlayerData::default_instance_ = NULL;

PlayerData* PlayerData::New() const {
  return new PlayerData;
}

void PlayerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_base()) {
      if (base_ != NULL) base_->::Pro::PlayerBase::Clear();
    }
    if (has_items()) {
      if (items_ != NULL) items_->::Pro::PlayerItems::Clear();
    }
    if (has_quest()) {
      if (quest_ != NULL) quest_->::Pro::PlayerQuest::Clear();
    }
    if (has_daily()) {
      if (daily_ != NULL) daily_->::Pro::PlayerDaily::Clear();
    }
    if (has_store()) {
      if (store_ != NULL) store_->::Pro::PlayerStore::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_base;
        break;
      }

      // optional .Pro.PlayerBase base = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // optional .Pro.PlayerItems items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_quest;
        break;
      }

      // optional .Pro.PlayerQuest quest = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_daily;
        break;
      }

      // optional .Pro.PlayerDaily daily = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daily:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_daily()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_store;
        break;
      }

      // optional .Pro.PlayerStore store = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_store:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_store()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .Pro.PlayerBase base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base(), output);
  }

  // optional .Pro.PlayerItems items = 3;
  if (has_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(), output);
  }

  // optional .Pro.PlayerQuest quest = 4;
  if (has_quest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->quest(), output);
  }

  // optional .Pro.PlayerDaily daily = 5;
  if (has_daily()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->daily(), output);
  }

  // optional .Pro.PlayerStore store = 6;
  if (has_store()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->store(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .Pro.PlayerBase base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->base(), target);
  }

  // optional .Pro.PlayerItems items = 3;
  if (has_items()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(), target);
  }

  // optional .Pro.PlayerQuest quest = 4;
  if (has_quest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->quest(), target);
  }

  // optional .Pro.PlayerDaily daily = 5;
  if (has_daily()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->daily(), target);
  }

  // optional .Pro.PlayerStore store = 6;
  if (has_store()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->store(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .Pro.PlayerBase base = 2;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .Pro.PlayerItems items = 3;
    if (has_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items());
    }

    // optional .Pro.PlayerQuest quest = 4;
    if (has_quest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quest());
    }

    // optional .Pro.PlayerDaily daily = 5;
    if (has_daily()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->daily());
    }

    // optional .Pro.PlayerStore store = 6;
    if (has_store()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->store());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerData::MergeFrom(const PlayerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_base()) {
      mutable_base()->::Pro::PlayerBase::MergeFrom(from.base());
    }
    if (from.has_items()) {
      mutable_items()->::Pro::PlayerItems::MergeFrom(from.items());
    }
    if (from.has_quest()) {
      mutable_quest()->::Pro::PlayerQuest::MergeFrom(from.quest());
    }
    if (from.has_daily()) {
      mutable_daily()->::Pro::PlayerDaily::MergeFrom(from.daily());
    }
    if (from.has_store()) {
      mutable_store()->::Pro::PlayerStore::MergeFrom(from.store());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerData::CopyFrom(const PlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerData::IsInitialized() const {

  return true;
}

void PlayerData::Swap(PlayerData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(base_, other->base_);
    std::swap(items_, other->items_);
    std::swap(quest_, other->quest_);
    std::swap(daily_, other->daily_);
    std::swap(store_, other->store_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerData_descriptor_;
  metadata.reflection = PlayerData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PlayerSync_Action_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSync_Action_descriptor_;
}
bool PlayerSync_Action_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PlayerSync_Action PlayerSync::_ADD_;
const PlayerSync_Action PlayerSync::_UPDATE_;
const PlayerSync_Action PlayerSync::_REMOVE_;
const PlayerSync_Action PlayerSync::Action_MIN;
const PlayerSync_Action PlayerSync::Action_MAX;
const int PlayerSync::Action_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PlayerSync_ItemSyncData_ItemSync::kItemFieldNumber;
const int PlayerSync_ItemSyncData_ItemSync::kActionFieldNumber;
#endif  // !_MSC_VER

PlayerSync_ItemSyncData_ItemSync::PlayerSync_ItemSyncData_ItemSync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerSync_ItemSyncData_ItemSync::InitAsDefaultInstance() {
  item_ = const_cast< ::Pro::Item*>(&::Pro::Item::default_instance());
}

PlayerSync_ItemSyncData_ItemSync::PlayerSync_ItemSyncData_ItemSync(const PlayerSync_ItemSyncData_ItemSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSync_ItemSyncData_ItemSync::SharedCtor() {
  _cached_size_ = 0;
  item_ = NULL;
  action_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSync_ItemSyncData_ItemSync::~PlayerSync_ItemSyncData_ItemSync() {
  SharedDtor();
}

void PlayerSync_ItemSyncData_ItemSync::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void PlayerSync_ItemSyncData_ItemSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSync_ItemSyncData_ItemSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSync_ItemSyncData_ItemSync_descriptor_;
}

const PlayerSync_ItemSyncData_ItemSync& PlayerSync_ItemSyncData_ItemSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerDataS2C_2eproto();
  return *default_instance_;
}

PlayerSync_ItemSyncData_ItemSync* PlayerSync_ItemSyncData_ItemSync::default_instance_ = NULL;

PlayerSync_ItemSyncData_ItemSync* PlayerSync_ItemSyncData_ItemSync::New() const {
  return new PlayerSync_ItemSyncData_ItemSync;
}

void PlayerSync_ItemSyncData_ItemSync::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_item()) {
      if (item_ != NULL) item_->::Pro::Item::Clear();
    }
    action_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSync_ItemSyncData_ItemSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Pro.Item item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action;
        break;
      }

      // optional .Pro.PlayerSync.Action action = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Pro::PlayerSync_Action_IsValid(value)) {
            set_action(static_cast< ::Pro::PlayerSync_Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerSync_ItemSyncData_ItemSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Pro.Item item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(), output);
  }

  // optional .Pro.PlayerSync.Action action = 2;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSync_ItemSyncData_ItemSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Pro.Item item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(), target);
  }

  // optional .Pro.PlayerSync.Action action = 2;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSync_ItemSyncData_ItemSync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Pro.Item item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

    // optional .Pro.PlayerSync.Action action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSync_ItemSyncData_ItemSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSync_ItemSyncData_ItemSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSync_ItemSyncData_ItemSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSync_ItemSyncData_ItemSync::MergeFrom(const PlayerSync_ItemSyncData_ItemSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::Pro::Item::MergeFrom(from.item());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSync_ItemSyncData_ItemSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSync_ItemSyncData_ItemSync::CopyFrom(const PlayerSync_ItemSyncData_ItemSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSync_ItemSyncData_ItemSync::IsInitialized() const {

  return true;
}

void PlayerSync_ItemSyncData_ItemSync::Swap(PlayerSync_ItemSyncData_ItemSync* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerSync_ItemSyncData_ItemSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSync_ItemSyncData_ItemSync_descriptor_;
  metadata.reflection = PlayerSync_ItemSyncData_ItemSync_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PlayerSync_ItemSyncData::kDataFieldNumber;
#endif  // !_MSC_VER

PlayerSync_ItemSyncData::PlayerSync_ItemSyncData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerSync_ItemSyncData::InitAsDefaultInstance() {
}

PlayerSync_ItemSyncData::PlayerSync_ItemSyncData(const PlayerSync_ItemSyncData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSync_ItemSyncData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSync_ItemSyncData::~PlayerSync_ItemSyncData() {
  SharedDtor();
}

void PlayerSync_ItemSyncData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerSync_ItemSyncData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSync_ItemSyncData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSync_ItemSyncData_descriptor_;
}

const PlayerSync_ItemSyncData& PlayerSync_ItemSyncData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerDataS2C_2eproto();
  return *default_instance_;
}

PlayerSync_ItemSyncData* PlayerSync_ItemSyncData::default_instance_ = NULL;

PlayerSync_ItemSyncData* PlayerSync_ItemSyncData::New() const {
  return new PlayerSync_ItemSyncData;
}

void PlayerSync_ItemSyncData::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSync_ItemSyncData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Pro.PlayerSync.ItemSyncData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerSync_ItemSyncData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Pro.PlayerSync.ItemSyncData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSync_ItemSyncData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Pro.PlayerSync.ItemSyncData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSync_ItemSyncData::ByteSize() const {
  int total_size = 0;

  // repeated .Pro.PlayerSync.ItemSyncData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSync_ItemSyncData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSync_ItemSyncData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSync_ItemSyncData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSync_ItemSyncData::MergeFrom(const PlayerSync_ItemSyncData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSync_ItemSyncData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSync_ItemSyncData::CopyFrom(const PlayerSync_ItemSyncData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSync_ItemSyncData::IsInitialized() const {

  return true;
}

void PlayerSync_ItemSyncData::Swap(PlayerSync_ItemSyncData* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerSync_ItemSyncData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSync_ItemSyncData_descriptor_;
  metadata.reflection = PlayerSync_ItemSyncData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PlayerSync_QuestSyncData_QuestSync::kQuestFieldNumber;
const int PlayerSync_QuestSyncData_QuestSync::kActionFieldNumber;
#endif  // !_MSC_VER

PlayerSync_QuestSyncData_QuestSync::PlayerSync_QuestSyncData_QuestSync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerSync_QuestSyncData_QuestSync::InitAsDefaultInstance() {
}

PlayerSync_QuestSyncData_QuestSync::PlayerSync_QuestSyncData_QuestSync(const PlayerSync_QuestSyncData_QuestSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSync_QuestSyncData_QuestSync::SharedCtor() {
  _cached_size_ = 0;
  quest_ = 0u;
  action_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSync_QuestSyncData_QuestSync::~PlayerSync_QuestSyncData_QuestSync() {
  SharedDtor();
}

void PlayerSync_QuestSyncData_QuestSync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerSync_QuestSyncData_QuestSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSync_QuestSyncData_QuestSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSync_QuestSyncData_QuestSync_descriptor_;
}

const PlayerSync_QuestSyncData_QuestSync& PlayerSync_QuestSyncData_QuestSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerDataS2C_2eproto();
  return *default_instance_;
}

PlayerSync_QuestSyncData_QuestSync* PlayerSync_QuestSyncData_QuestSync::default_instance_ = NULL;

PlayerSync_QuestSyncData_QuestSync* PlayerSync_QuestSyncData_QuestSync::New() const {
  return new PlayerSync_QuestSyncData_QuestSync;
}

void PlayerSync_QuestSyncData_QuestSync::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quest_ = 0u;
    action_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSync_QuestSyncData_QuestSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Quest = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quest_)));
          set_has_quest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action;
        break;
      }

      // optional .Pro.PlayerSync.Action action = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Pro::PlayerSync_Action_IsValid(value)) {
            set_action(static_cast< ::Pro::PlayerSync_Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerSync_QuestSyncData_QuestSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 Quest = 1;
  if (has_quest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->quest(), output);
  }

  // optional .Pro.PlayerSync.Action action = 2;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSync_QuestSyncData_QuestSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Quest = 1;
  if (has_quest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->quest(), target);
  }

  // optional .Pro.PlayerSync.Action action = 2;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSync_QuestSyncData_QuestSync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Quest = 1;
    if (has_quest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quest());
    }

    // optional .Pro.PlayerSync.Action action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSync_QuestSyncData_QuestSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSync_QuestSyncData_QuestSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSync_QuestSyncData_QuestSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSync_QuestSyncData_QuestSync::MergeFrom(const PlayerSync_QuestSyncData_QuestSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quest()) {
      set_quest(from.quest());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSync_QuestSyncData_QuestSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSync_QuestSyncData_QuestSync::CopyFrom(const PlayerSync_QuestSyncData_QuestSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSync_QuestSyncData_QuestSync::IsInitialized() const {

  return true;
}

void PlayerSync_QuestSyncData_QuestSync::Swap(PlayerSync_QuestSyncData_QuestSync* other) {
  if (other != this) {
    std::swap(quest_, other->quest_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerSync_QuestSyncData_QuestSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSync_QuestSyncData_QuestSync_descriptor_;
  metadata.reflection = PlayerSync_QuestSyncData_QuestSync_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PlayerSync_QuestSyncData::kDataFieldNumber;
const int PlayerSync_QuestSyncData::kDoneFieldNumber;
const int PlayerSync_QuestSyncData::kAchievementFieldNumber;
const int PlayerSync_QuestSyncData::kDoneAchievementFieldNumber;
#endif  // !_MSC_VER

PlayerSync_QuestSyncData::PlayerSync_QuestSyncData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerSync_QuestSyncData::InitAsDefaultInstance() {
}

PlayerSync_QuestSyncData::PlayerSync_QuestSyncData(const PlayerSync_QuestSyncData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSync_QuestSyncData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSync_QuestSyncData::~PlayerSync_QuestSyncData() {
  SharedDtor();
}

void PlayerSync_QuestSyncData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerSync_QuestSyncData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSync_QuestSyncData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSync_QuestSyncData_descriptor_;
}

const PlayerSync_QuestSyncData& PlayerSync_QuestSyncData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerDataS2C_2eproto();
  return *default_instance_;
}

PlayerSync_QuestSyncData* PlayerSync_QuestSyncData::default_instance_ = NULL;

PlayerSync_QuestSyncData* PlayerSync_QuestSyncData::New() const {
  return new PlayerSync_QuestSyncData;
}

void PlayerSync_QuestSyncData::Clear() {
  data_.Clear();
  done_.Clear();
  achievement_.Clear();
  doneachievement_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSync_QuestSyncData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Pro.PlayerSync.QuestSyncData.QuestSync data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(16)) goto parse_done;
        break;
      }

      // repeated uint32 done = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_done())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_done())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_done;
        if (input->ExpectTag(26)) goto parse_achievement;
        break;
      }

      // repeated .Pro.PlayerSync.QuestSyncData.QuestSync achievement = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_achievement;
        if (input->ExpectTag(32)) goto parse_doneAchievement;
        break;
      }

      // repeated uint32 doneAchievement = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doneAchievement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_doneachievement())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_doneachievement())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_doneAchievement;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerSync_QuestSyncData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Pro.PlayerSync.QuestSyncData.QuestSync data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // repeated uint32 done = 2;
  for (int i = 0; i < this->done_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->done(i), output);
  }

  // repeated .Pro.PlayerSync.QuestSyncData.QuestSync achievement = 3;
  for (int i = 0; i < this->achievement_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->achievement(i), output);
  }

  // repeated uint32 doneAchievement = 4;
  for (int i = 0; i < this->doneachievement_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->doneachievement(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSync_QuestSyncData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Pro.PlayerSync.QuestSyncData.QuestSync data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // repeated uint32 done = 2;
  for (int i = 0; i < this->done_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->done(i), target);
  }

  // repeated .Pro.PlayerSync.QuestSyncData.QuestSync achievement = 3;
  for (int i = 0; i < this->achievement_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->achievement(i), target);
  }

  // repeated uint32 doneAchievement = 4;
  for (int i = 0; i < this->doneachievement_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->doneachievement(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSync_QuestSyncData::ByteSize() const {
  int total_size = 0;

  // repeated .Pro.PlayerSync.QuestSyncData.QuestSync data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  // repeated uint32 done = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->done_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->done(i));
    }
    total_size += 1 * this->done_size() + data_size;
  }

  // repeated .Pro.PlayerSync.QuestSyncData.QuestSync achievement = 3;
  total_size += 1 * this->achievement_size();
  for (int i = 0; i < this->achievement_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievement(i));
  }

  // repeated uint32 doneAchievement = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->doneachievement_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->doneachievement(i));
    }
    total_size += 1 * this->doneachievement_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSync_QuestSyncData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSync_QuestSyncData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSync_QuestSyncData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSync_QuestSyncData::MergeFrom(const PlayerSync_QuestSyncData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  done_.MergeFrom(from.done_);
  achievement_.MergeFrom(from.achievement_);
  doneachievement_.MergeFrom(from.doneachievement_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSync_QuestSyncData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSync_QuestSyncData::CopyFrom(const PlayerSync_QuestSyncData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSync_QuestSyncData::IsInitialized() const {

  return true;
}

void PlayerSync_QuestSyncData::Swap(PlayerSync_QuestSyncData* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    done_.Swap(&other->done_);
    achievement_.Swap(&other->achievement_);
    doneachievement_.Swap(&other->doneachievement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerSync_QuestSyncData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSync_QuestSyncData_descriptor_;
  metadata.reflection = PlayerSync_QuestSyncData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PlayerSync_DailySyncData::kBSyncFieldNumber;
const int PlayerSync_DailySyncData::kDataFieldNumber;
#endif  // !_MSC_VER

PlayerSync_DailySyncData::PlayerSync_DailySyncData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerSync_DailySyncData::InitAsDefaultInstance() {
  data_ = const_cast< ::Pro::PlayerDaily*>(&::Pro::PlayerDaily::default_instance());
}

PlayerSync_DailySyncData::PlayerSync_DailySyncData(const PlayerSync_DailySyncData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSync_DailySyncData::SharedCtor() {
  _cached_size_ = 0;
  bsync_ = false;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSync_DailySyncData::~PlayerSync_DailySyncData() {
  SharedDtor();
}

void PlayerSync_DailySyncData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void PlayerSync_DailySyncData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSync_DailySyncData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSync_DailySyncData_descriptor_;
}

const PlayerSync_DailySyncData& PlayerSync_DailySyncData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerDataS2C_2eproto();
  return *default_instance_;
}

PlayerSync_DailySyncData* PlayerSync_DailySyncData::default_instance_ = NULL;

PlayerSync_DailySyncData* PlayerSync_DailySyncData::New() const {
  return new PlayerSync_DailySyncData;
}

void PlayerSync_DailySyncData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bsync_ = false;
    if (has_data()) {
      if (data_ != NULL) data_->::Pro::PlayerDaily::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSync_DailySyncData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bSync = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bsync_)));
          set_has_bsync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .Pro.PlayerDaily data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerSync_DailySyncData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bSync = 1;
  if (has_bsync()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bsync(), output);
  }

  // optional .Pro.PlayerDaily data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSync_DailySyncData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool bSync = 1;
  if (has_bsync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bsync(), target);
  }

  // optional .Pro.PlayerDaily data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSync_DailySyncData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bSync = 1;
    if (has_bsync()) {
      total_size += 1 + 1;
    }

    // optional .Pro.PlayerDaily data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSync_DailySyncData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSync_DailySyncData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSync_DailySyncData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSync_DailySyncData::MergeFrom(const PlayerSync_DailySyncData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bsync()) {
      set_bsync(from.bsync());
    }
    if (from.has_data()) {
      mutable_data()->::Pro::PlayerDaily::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSync_DailySyncData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSync_DailySyncData::CopyFrom(const PlayerSync_DailySyncData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSync_DailySyncData::IsInitialized() const {

  return true;
}

void PlayerSync_DailySyncData::Swap(PlayerSync_DailySyncData* other) {
  if (other != this) {
    std::swap(bsync_, other->bsync_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerSync_DailySyncData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSync_DailySyncData_descriptor_;
  metadata.reflection = PlayerSync_DailySyncData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PlayerSync_StoreSyncData_StoreRecordSync::kActionFieldNumber;
const int PlayerSync_StoreSyncData_StoreRecordSync::kRecordFieldNumber;
const int PlayerSync_StoreSyncData_StoreRecordSync::kTypeFieldNumber;
#endif  // !_MSC_VER

PlayerSync_StoreSyncData_StoreRecordSync::PlayerSync_StoreSyncData_StoreRecordSync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerSync_StoreSyncData_StoreRecordSync::InitAsDefaultInstance() {
}

PlayerSync_StoreSyncData_StoreRecordSync::PlayerSync_StoreSyncData_StoreRecordSync(const PlayerSync_StoreSyncData_StoreRecordSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSync_StoreSyncData_StoreRecordSync::SharedCtor() {
  _cached_size_ = 0;
  action_ = 1;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSync_StoreSyncData_StoreRecordSync::~PlayerSync_StoreSyncData_StoreRecordSync() {
  SharedDtor();
}

void PlayerSync_StoreSyncData_StoreRecordSync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerSync_StoreSyncData_StoreRecordSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSync_StoreSyncData_StoreRecordSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSync_StoreSyncData_StoreRecordSync_descriptor_;
}

const PlayerSync_StoreSyncData_StoreRecordSync& PlayerSync_StoreSyncData_StoreRecordSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerDataS2C_2eproto();
  return *default_instance_;
}

PlayerSync_StoreSyncData_StoreRecordSync* PlayerSync_StoreSyncData_StoreRecordSync::default_instance_ = NULL;

PlayerSync_StoreSyncData_StoreRecordSync* PlayerSync_StoreSyncData_StoreRecordSync::New() const {
  return new PlayerSync_StoreSyncData_StoreRecordSync;
}

void PlayerSync_StoreSyncData_StoreRecordSync::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 1;
    type_ = 1;
  }
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSync_StoreSyncData_StoreRecordSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Pro.PlayerSync.Action action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Pro::PlayerSync_Action_IsValid(value)) {
            set_action(static_cast< ::Pro::PlayerSync_Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_record;
        break;
      }

      // repeated .Pro.StoreRecord.Record record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_record;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Pro.Store.StoreType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Pro::Store_StoreType_IsValid(value)) {
            set_type(static_cast< ::Pro::Store_StoreType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerSync_StoreSyncData_StoreRecordSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Pro.PlayerSync.Action action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // repeated .Pro.StoreRecord.Record record = 2;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->record(i), output);
  }

  // optional .Pro.Store.StoreType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSync_StoreSyncData_StoreRecordSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Pro.PlayerSync.Action action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // repeated .Pro.StoreRecord.Record record = 2;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->record(i), target);
  }

  // optional .Pro.Store.StoreType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSync_StoreSyncData_StoreRecordSync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Pro.PlayerSync.Action action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional .Pro.Store.StoreType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .Pro.StoreRecord.Record record = 2;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSync_StoreSyncData_StoreRecordSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSync_StoreSyncData_StoreRecordSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSync_StoreSyncData_StoreRecordSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSync_StoreSyncData_StoreRecordSync::MergeFrom(const PlayerSync_StoreSyncData_StoreRecordSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSync_StoreSyncData_StoreRecordSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSync_StoreSyncData_StoreRecordSync::CopyFrom(const PlayerSync_StoreSyncData_StoreRecordSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSync_StoreSyncData_StoreRecordSync::IsInitialized() const {

  return true;
}

void PlayerSync_StoreSyncData_StoreRecordSync::Swap(PlayerSync_StoreSyncData_StoreRecordSync* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    record_.Swap(&other->record_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerSync_StoreSyncData_StoreRecordSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSync_StoreSyncData_StoreRecordSync_descriptor_;
  metadata.reflection = PlayerSync_StoreSyncData_StoreRecordSync_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PlayerSync_StoreSyncData::kRecordFieldNumber;
const int PlayerSync_StoreSyncData::kStoreFieldNumber;
#endif  // !_MSC_VER

PlayerSync_StoreSyncData::PlayerSync_StoreSyncData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerSync_StoreSyncData::InitAsDefaultInstance() {
}

PlayerSync_StoreSyncData::PlayerSync_StoreSyncData(const PlayerSync_StoreSyncData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSync_StoreSyncData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSync_StoreSyncData::~PlayerSync_StoreSyncData() {
  SharedDtor();
}

void PlayerSync_StoreSyncData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerSync_StoreSyncData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSync_StoreSyncData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSync_StoreSyncData_descriptor_;
}

const PlayerSync_StoreSyncData& PlayerSync_StoreSyncData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerDataS2C_2eproto();
  return *default_instance_;
}

PlayerSync_StoreSyncData* PlayerSync_StoreSyncData::default_instance_ = NULL;

PlayerSync_StoreSyncData* PlayerSync_StoreSyncData::New() const {
  return new PlayerSync_StoreSyncData;
}

void PlayerSync_StoreSyncData::Clear() {
  record_.Clear();
  store_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSync_StoreSyncData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Pro.PlayerSync.StoreSyncData.StoreRecordSync record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_record;
        if (input->ExpectTag(18)) goto parse_store;
        break;
      }

      // repeated .Pro.Store store = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_store:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_store()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_store;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerSync_StoreSyncData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Pro.PlayerSync.StoreSyncData.StoreRecordSync record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record(i), output);
  }

  // repeated .Pro.Store store = 2;
  for (int i = 0; i < this->store_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->store(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSync_StoreSyncData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Pro.PlayerSync.StoreSyncData.StoreRecordSync record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record(i), target);
  }

  // repeated .Pro.Store store = 2;
  for (int i = 0; i < this->store_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->store(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSync_StoreSyncData::ByteSize() const {
  int total_size = 0;

  // repeated .Pro.PlayerSync.StoreSyncData.StoreRecordSync record = 1;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  // repeated .Pro.Store store = 2;
  total_size += 1 * this->store_size();
  for (int i = 0; i < this->store_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->store(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSync_StoreSyncData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSync_StoreSyncData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSync_StoreSyncData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSync_StoreSyncData::MergeFrom(const PlayerSync_StoreSyncData& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  store_.MergeFrom(from.store_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSync_StoreSyncData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSync_StoreSyncData::CopyFrom(const PlayerSync_StoreSyncData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSync_StoreSyncData::IsInitialized() const {

  return true;
}

void PlayerSync_StoreSyncData::Swap(PlayerSync_StoreSyncData* other) {
  if (other != this) {
    record_.Swap(&other->record_);
    store_.Swap(&other->store_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerSync_StoreSyncData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSync_StoreSyncData_descriptor_;
  metadata.reflection = PlayerSync_StoreSyncData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PlayerSync::kBaseFieldNumber;
const int PlayerSync::kItemFieldNumber;
const int PlayerSync::kQuestFieldNumber;
const int PlayerSync::kDailyFieldNumber;
const int PlayerSync::kStoreFieldNumber;
#endif  // !_MSC_VER

PlayerSync::PlayerSync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerSync::InitAsDefaultInstance() {
  base_ = const_cast< ::Pro::PlayerBase*>(&::Pro::PlayerBase::default_instance());
  item_ = const_cast< ::Pro::PlayerSync_ItemSyncData*>(&::Pro::PlayerSync_ItemSyncData::default_instance());
  quest_ = const_cast< ::Pro::PlayerSync_QuestSyncData*>(&::Pro::PlayerSync_QuestSyncData::default_instance());
  daily_ = const_cast< ::Pro::PlayerSync_DailySyncData*>(&::Pro::PlayerSync_DailySyncData::default_instance());
  store_ = const_cast< ::Pro::PlayerSync_StoreSyncData*>(&::Pro::PlayerSync_StoreSyncData::default_instance());
}

PlayerSync::PlayerSync(const PlayerSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSync::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  item_ = NULL;
  quest_ = NULL;
  daily_ = NULL;
  store_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSync::~PlayerSync() {
  SharedDtor();
}

void PlayerSync::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete item_;
    delete quest_;
    delete daily_;
    delete store_;
  }
}

void PlayerSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSync_descriptor_;
}

const PlayerSync& PlayerSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerDataS2C_2eproto();
  return *default_instance_;
}

PlayerSync* PlayerSync::default_instance_ = NULL;

PlayerSync* PlayerSync::New() const {
  return new PlayerSync;
}

void PlayerSync::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::Pro::PlayerBase::Clear();
    }
    if (has_item()) {
      if (item_ != NULL) item_->::Pro::PlayerSync_ItemSyncData::Clear();
    }
    if (has_quest()) {
      if (quest_ != NULL) quest_->::Pro::PlayerSync_QuestSyncData::Clear();
    }
    if (has_daily()) {
      if (daily_ != NULL) daily_->::Pro::PlayerSync_DailySyncData::Clear();
    }
    if (has_store()) {
      if (store_ != NULL) store_->::Pro::PlayerSync_StoreSyncData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Pro.PlayerBase base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // optional .Pro.PlayerSync.ItemSyncData item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_quest;
        break;
      }

      // optional .Pro.PlayerSync.QuestSyncData quest = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_daily;
        break;
      }

      // optional .Pro.PlayerSync.DailySyncData daily = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daily:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_daily()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_store;
        break;
      }

      // optional .Pro.PlayerSync.StoreSyncData store = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_store:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_store()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Pro.PlayerBase base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional .Pro.PlayerSync.ItemSyncData item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(), output);
  }

  // optional .Pro.PlayerSync.QuestSyncData quest = 3;
  if (has_quest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->quest(), output);
  }

  // optional .Pro.PlayerSync.DailySyncData daily = 4;
  if (has_daily()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->daily(), output);
  }

  // optional .Pro.PlayerSync.StoreSyncData store = 5;
  if (has_store()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->store(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Pro.PlayerBase base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional .Pro.PlayerSync.ItemSyncData item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(), target);
  }

  // optional .Pro.PlayerSync.QuestSyncData quest = 3;
  if (has_quest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->quest(), target);
  }

  // optional .Pro.PlayerSync.DailySyncData daily = 4;
  if (has_daily()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->daily(), target);
  }

  // optional .Pro.PlayerSync.StoreSyncData store = 5;
  if (has_store()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->store(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Pro.PlayerBase base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .Pro.PlayerSync.ItemSyncData item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

    // optional .Pro.PlayerSync.QuestSyncData quest = 3;
    if (has_quest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quest());
    }

    // optional .Pro.PlayerSync.DailySyncData daily = 4;
    if (has_daily()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->daily());
    }

    // optional .Pro.PlayerSync.StoreSyncData store = 5;
    if (has_store()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->store());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSync::MergeFrom(const PlayerSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::Pro::PlayerBase::MergeFrom(from.base());
    }
    if (from.has_item()) {
      mutable_item()->::Pro::PlayerSync_ItemSyncData::MergeFrom(from.item());
    }
    if (from.has_quest()) {
      mutable_quest()->::Pro::PlayerSync_QuestSyncData::MergeFrom(from.quest());
    }
    if (from.has_daily()) {
      mutable_daily()->::Pro::PlayerSync_DailySyncData::MergeFrom(from.daily());
    }
    if (from.has_store()) {
      mutable_store()->::Pro::PlayerSync_StoreSyncData::MergeFrom(from.store());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSync::CopyFrom(const PlayerSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSync::IsInitialized() const {

  return true;
}

void PlayerSync::Swap(PlayerSync* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(item_, other->item_);
    std::swap(quest_, other->quest_);
    std::swap(daily_, other->daily_);
    std::swap(store_, other->store_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSync_descriptor_;
  metadata.reflection = PlayerSync_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pro

// @@protoc_insertion_point(global_scope)

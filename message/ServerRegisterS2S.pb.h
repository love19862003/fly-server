// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerRegisterS2S.proto

#ifndef PROTOBUF_ServerRegisterS2S_2eproto__INCLUDED
#define PROTOBUF_ServerRegisterS2S_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Pro {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ServerRegisterS2S_2eproto();
void protobuf_AssignDesc_ServerRegisterS2S_2eproto();
void protobuf_ShutdownFile_ServerRegisterS2S_2eproto();

class ServerRegisterS2S;

enum ServerRegisterS2S_ServerType {
  ServerRegisterS2S_ServerType_GATE = 1,
  ServerRegisterS2S_ServerType_GAME = 2,
  ServerRegisterS2S_ServerType_CELL = 3
};
bool ServerRegisterS2S_ServerType_IsValid(int value);
const ServerRegisterS2S_ServerType ServerRegisterS2S_ServerType_ServerType_MIN = ServerRegisterS2S_ServerType_GATE;
const ServerRegisterS2S_ServerType ServerRegisterS2S_ServerType_ServerType_MAX = ServerRegisterS2S_ServerType_CELL;
const int ServerRegisterS2S_ServerType_ServerType_ARRAYSIZE = ServerRegisterS2S_ServerType_ServerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerRegisterS2S_ServerType_descriptor();
inline const ::std::string& ServerRegisterS2S_ServerType_Name(ServerRegisterS2S_ServerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerRegisterS2S_ServerType_descriptor(), value);
}
inline bool ServerRegisterS2S_ServerType_Parse(
    const ::std::string& name, ServerRegisterS2S_ServerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerRegisterS2S_ServerType>(
    ServerRegisterS2S_ServerType_descriptor(), name, value);
}
// ===================================================================

class ServerRegisterS2S : public ::google::protobuf::Message {
 public:
  ServerRegisterS2S();
  virtual ~ServerRegisterS2S();

  ServerRegisterS2S(const ServerRegisterS2S& from);

  inline ServerRegisterS2S& operator=(const ServerRegisterS2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerRegisterS2S& default_instance();

  void Swap(ServerRegisterS2S* other);

  // implements Message ----------------------------------------------

  ServerRegisterS2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerRegisterS2S& from);
  void MergeFrom(const ServerRegisterS2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ServerRegisterS2S_ServerType ServerType;
  static const ServerType GATE = ServerRegisterS2S_ServerType_GATE;
  static const ServerType GAME = ServerRegisterS2S_ServerType_GAME;
  static const ServerType CELL = ServerRegisterS2S_ServerType_CELL;
  static inline bool ServerType_IsValid(int value) {
    return ServerRegisterS2S_ServerType_IsValid(value);
  }
  static const ServerType ServerType_MIN =
    ServerRegisterS2S_ServerType_ServerType_MIN;
  static const ServerType ServerType_MAX =
    ServerRegisterS2S_ServerType_ServerType_MAX;
  static const int ServerType_ARRAYSIZE =
    ServerRegisterS2S_ServerType_ServerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ServerType_descriptor() {
    return ServerRegisterS2S_ServerType_descriptor();
  }
  static inline const ::std::string& ServerType_Name(ServerType value) {
    return ServerRegisterS2S_ServerType_Name(value);
  }
  static inline bool ServerType_Parse(const ::std::string& name,
      ServerType* value) {
    return ServerRegisterS2S_ServerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string server = 1;
  inline bool has_server() const;
  inline void clear_server();
  static const int kServerFieldNumber = 1;
  inline const ::std::string& server() const;
  inline void set_server(const ::std::string& value);
  inline void set_server(const char* value);
  inline void set_server(const char* value, size_t size);
  inline ::std::string* mutable_server();
  inline ::std::string* release_server();
  inline void set_allocated_server(::std::string* server);

  // optional int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional int32 online = 3;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 3;
  inline ::google::protobuf::int32 online() const;
  inline void set_online(::google::protobuf::int32 value);

  // optional string address = 4;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 4;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // optional string timeZone = 5;
  inline bool has_timezone() const;
  inline void clear_timezone();
  static const int kTimeZoneFieldNumber = 5;
  inline const ::std::string& timezone() const;
  inline void set_timezone(const ::std::string& value);
  inline void set_timezone(const char* value);
  inline void set_timezone(const char* value, size_t size);
  inline ::std::string* mutable_timezone();
  inline ::std::string* release_timezone();
  inline void set_allocated_timezone(::std::string* timezone);

  // optional uint32 time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional .Pro.ServerRegisterS2S.ServerType type = 7;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::Pro::ServerRegisterS2S_ServerType type() const;
  inline void set_type(::Pro::ServerRegisterS2S_ServerType value);

  // @@protoc_insertion_point(class_scope:Pro.ServerRegisterS2S)
 private:
  inline void set_has_server();
  inline void clear_has_server();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_online();
  inline void clear_has_online();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_timezone();
  inline void clear_has_timezone();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* server_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 online_;
  ::std::string* address_;
  ::std::string* timezone_;
  ::google::protobuf::uint32 time_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ServerRegisterS2S_2eproto();
  friend void protobuf_AssignDesc_ServerRegisterS2S_2eproto();
  friend void protobuf_ShutdownFile_ServerRegisterS2S_2eproto();

  void InitAsDefaultInstance();
  static ServerRegisterS2S* default_instance_;
};
// ===================================================================


// ===================================================================

// ServerRegisterS2S

// optional string server = 1;
inline bool ServerRegisterS2S::has_server() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerRegisterS2S::set_has_server() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerRegisterS2S::clear_has_server() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerRegisterS2S::clear_server() {
  if (server_ != &::google::protobuf::internal::kEmptyString) {
    server_->clear();
  }
  clear_has_server();
}
inline const ::std::string& ServerRegisterS2S::server() const {
  return *server_;
}
inline void ServerRegisterS2S::set_server(const ::std::string& value) {
  set_has_server();
  if (server_ == &::google::protobuf::internal::kEmptyString) {
    server_ = new ::std::string;
  }
  server_->assign(value);
}
inline void ServerRegisterS2S::set_server(const char* value) {
  set_has_server();
  if (server_ == &::google::protobuf::internal::kEmptyString) {
    server_ = new ::std::string;
  }
  server_->assign(value);
}
inline void ServerRegisterS2S::set_server(const char* value, size_t size) {
  set_has_server();
  if (server_ == &::google::protobuf::internal::kEmptyString) {
    server_ = new ::std::string;
  }
  server_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerRegisterS2S::mutable_server() {
  set_has_server();
  if (server_ == &::google::protobuf::internal::kEmptyString) {
    server_ = new ::std::string;
  }
  return server_;
}
inline ::std::string* ServerRegisterS2S::release_server() {
  clear_has_server();
  if (server_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_;
    server_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerRegisterS2S::set_allocated_server(::std::string* server) {
  if (server_ != &::google::protobuf::internal::kEmptyString) {
    delete server_;
  }
  if (server) {
    set_has_server();
    server_ = server;
  } else {
    clear_has_server();
    server_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 2;
inline bool ServerRegisterS2S::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerRegisterS2S::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerRegisterS2S::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerRegisterS2S::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 ServerRegisterS2S::port() const {
  return port_;
}
inline void ServerRegisterS2S::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// optional int32 online = 3;
inline bool ServerRegisterS2S::has_online() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerRegisterS2S::set_has_online() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerRegisterS2S::clear_has_online() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerRegisterS2S::clear_online() {
  online_ = 0;
  clear_has_online();
}
inline ::google::protobuf::int32 ServerRegisterS2S::online() const {
  return online_;
}
inline void ServerRegisterS2S::set_online(::google::protobuf::int32 value) {
  set_has_online();
  online_ = value;
}

// optional string address = 4;
inline bool ServerRegisterS2S::has_address() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerRegisterS2S::set_has_address() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerRegisterS2S::clear_has_address() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerRegisterS2S::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& ServerRegisterS2S::address() const {
  return *address_;
}
inline void ServerRegisterS2S::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void ServerRegisterS2S::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void ServerRegisterS2S::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerRegisterS2S::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* ServerRegisterS2S::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerRegisterS2S::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string timeZone = 5;
inline bool ServerRegisterS2S::has_timezone() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerRegisterS2S::set_has_timezone() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerRegisterS2S::clear_has_timezone() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerRegisterS2S::clear_timezone() {
  if (timezone_ != &::google::protobuf::internal::kEmptyString) {
    timezone_->clear();
  }
  clear_has_timezone();
}
inline const ::std::string& ServerRegisterS2S::timezone() const {
  return *timezone_;
}
inline void ServerRegisterS2S::set_timezone(const ::std::string& value) {
  set_has_timezone();
  if (timezone_ == &::google::protobuf::internal::kEmptyString) {
    timezone_ = new ::std::string;
  }
  timezone_->assign(value);
}
inline void ServerRegisterS2S::set_timezone(const char* value) {
  set_has_timezone();
  if (timezone_ == &::google::protobuf::internal::kEmptyString) {
    timezone_ = new ::std::string;
  }
  timezone_->assign(value);
}
inline void ServerRegisterS2S::set_timezone(const char* value, size_t size) {
  set_has_timezone();
  if (timezone_ == &::google::protobuf::internal::kEmptyString) {
    timezone_ = new ::std::string;
  }
  timezone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerRegisterS2S::mutable_timezone() {
  set_has_timezone();
  if (timezone_ == &::google::protobuf::internal::kEmptyString) {
    timezone_ = new ::std::string;
  }
  return timezone_;
}
inline ::std::string* ServerRegisterS2S::release_timezone() {
  clear_has_timezone();
  if (timezone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timezone_;
    timezone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerRegisterS2S::set_allocated_timezone(::std::string* timezone) {
  if (timezone_ != &::google::protobuf::internal::kEmptyString) {
    delete timezone_;
  }
  if (timezone) {
    set_has_timezone();
    timezone_ = timezone;
  } else {
    clear_has_timezone();
    timezone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 time = 6;
inline bool ServerRegisterS2S::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServerRegisterS2S::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServerRegisterS2S::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServerRegisterS2S::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 ServerRegisterS2S::time() const {
  return time_;
}
inline void ServerRegisterS2S::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// optional .Pro.ServerRegisterS2S.ServerType type = 7;
inline bool ServerRegisterS2S::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServerRegisterS2S::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServerRegisterS2S::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServerRegisterS2S::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Pro::ServerRegisterS2S_ServerType ServerRegisterS2S::type() const {
  return static_cast< ::Pro::ServerRegisterS2S_ServerType >(type_);
}
inline void ServerRegisterS2S::set_type(::Pro::ServerRegisterS2S_ServerType value) {
  assert(::Pro::ServerRegisterS2S_ServerType_IsValid(value));
  set_has_type();
  type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pro

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Pro::ServerRegisterS2S_ServerType>() {
  return ::Pro::ServerRegisterS2S_ServerType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ServerRegisterS2S_2eproto__INCLUDED

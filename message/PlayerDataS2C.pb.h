// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerDataS2C.proto

#ifndef PROTOBUF_PlayerDataS2C_2eproto__INCLUDED
#define PROTOBUF_PlayerDataS2C_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Pro {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PlayerDataS2C_2eproto();
void protobuf_AssignDesc_PlayerDataS2C_2eproto();
void protobuf_ShutdownFile_PlayerDataS2C_2eproto();

class AccountData;
class PlayerBase;
class Item;
class PlayerItems;
class Quest;
class PlayerQuest;
class PlayerDaily;
class ShopCell;
class Store;
class StoreRecord;
class StoreRecord_Record;
class PlayerStore;
class PlayerData;
class PlayerSync;
class PlayerSync_ItemSyncData;
class PlayerSync_ItemSyncData_ItemSync;
class PlayerSync_QuestSyncData;
class PlayerSync_QuestSyncData_QuestSync;
class PlayerSync_DailySyncData;
class PlayerSync_StoreSyncData;
class PlayerSync_StoreSyncData_StoreRecordSync;

enum Store_StoreType {
  Store_StoreType_Type_Normal = 1
};
bool Store_StoreType_IsValid(int value);
const Store_StoreType Store_StoreType_StoreType_MIN = Store_StoreType_Type_Normal;
const Store_StoreType Store_StoreType_StoreType_MAX = Store_StoreType_Type_Normal;
const int Store_StoreType_StoreType_ARRAYSIZE = Store_StoreType_StoreType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Store_StoreType_descriptor();
inline const ::std::string& Store_StoreType_Name(Store_StoreType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Store_StoreType_descriptor(), value);
}
inline bool Store_StoreType_Parse(
    const ::std::string& name, Store_StoreType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Store_StoreType>(
    Store_StoreType_descriptor(), name, value);
}
enum PlayerSync_Action {
  PlayerSync_Action__ADD_ = 1,
  PlayerSync_Action__UPDATE_ = 2,
  PlayerSync_Action__REMOVE_ = 3
};
bool PlayerSync_Action_IsValid(int value);
const PlayerSync_Action PlayerSync_Action_Action_MIN = PlayerSync_Action__ADD_;
const PlayerSync_Action PlayerSync_Action_Action_MAX = PlayerSync_Action__REMOVE_;
const int PlayerSync_Action_Action_ARRAYSIZE = PlayerSync_Action_Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerSync_Action_descriptor();
inline const ::std::string& PlayerSync_Action_Name(PlayerSync_Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerSync_Action_descriptor(), value);
}
inline bool PlayerSync_Action_Parse(
    const ::std::string& name, PlayerSync_Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerSync_Action>(
    PlayerSync_Action_descriptor(), name, value);
}
// ===================================================================

class AccountData : public ::google::protobuf::Message {
 public:
  AccountData();
  virtual ~AccountData();

  AccountData(const AccountData& from);

  inline AccountData& operator=(const AccountData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountData& default_instance();

  void Swap(AccountData* other);

  // implements Message ----------------------------------------------

  AccountData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountData& from);
  void MergeFrom(const AccountData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::uint32 pid() const;
  inline void set_pid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional string channel = 4;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 4;
  inline const ::std::string& channel() const;
  inline void set_channel(const ::std::string& value);
  inline void set_channel(const char* value);
  inline void set_channel(const char* value, size_t size);
  inline ::std::string* mutable_channel();
  inline ::std::string* release_channel();
  inline void set_allocated_channel(::std::string* channel);

  // optional string downChannel = 5;
  inline bool has_downchannel() const;
  inline void clear_downchannel();
  static const int kDownChannelFieldNumber = 5;
  inline const ::std::string& downchannel() const;
  inline void set_downchannel(const ::std::string& value);
  inline void set_downchannel(const char* value);
  inline void set_downchannel(const char* value, size_t size);
  inline ::std::string* mutable_downchannel();
  inline ::std::string* release_downchannel();
  inline void set_allocated_downchannel(::std::string* downchannel);

  // optional string nickName = 6;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 6;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional uint32 totalLogin = 7;
  inline bool has_totallogin() const;
  inline void clear_totallogin();
  static const int kTotalLoginFieldNumber = 7;
  inline ::google::protobuf::uint32 totallogin() const;
  inline void set_totallogin(::google::protobuf::uint32 value);

  // optional uint32 createTime = 8;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 createtime() const;
  inline void set_createtime(::google::protobuf::uint32 value);

  // optional string cell = 9;
  inline bool has_cell() const;
  inline void clear_cell();
  static const int kCellFieldNumber = 9;
  inline const ::std::string& cell() const;
  inline void set_cell(const ::std::string& value);
  inline void set_cell(const char* value);
  inline void set_cell(const char* value, size_t size);
  inline ::std::string* mutable_cell();
  inline ::std::string* release_cell();
  inline void set_allocated_cell(::std::string* cell);

  // @@protoc_insertion_point(class_scope:Pro.AccountData)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_downchannel();
  inline void clear_has_downchannel();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_totallogin();
  inline void clear_has_totallogin();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_cell();
  inline void clear_has_cell();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* password_;
  ::std::string* channel_;
  ::google::protobuf::uint32 pid_;
  ::google::protobuf::uint32 totallogin_;
  ::std::string* downchannel_;
  ::std::string* nickname_;
  ::std::string* cell_;
  ::google::protobuf::uint32 createtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerDataS2C_2eproto();
  friend void protobuf_AssignDesc_PlayerDataS2C_2eproto();
  friend void protobuf_ShutdownFile_PlayerDataS2C_2eproto();

  void InitAsDefaultInstance();
  static AccountData* default_instance_;
};
// -------------------------------------------------------------------

class PlayerBase : public ::google::protobuf::Message {
 public:
  PlayerBase();
  virtual ~PlayerBase();

  PlayerBase(const PlayerBase& from);

  inline PlayerBase& operator=(const PlayerBase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerBase& default_instance();

  void Swap(PlayerBase* other);

  // implements Message ----------------------------------------------

  PlayerBase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerBase& from);
  void MergeFrom(const PlayerBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 coin = 2;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 2;
  inline ::google::protobuf::uint32 coin() const;
  inline void set_coin(::google::protobuf::uint32 value);

  // optional uint32 money = 3;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 3;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);

  // optional uint32 freeMoney = 4;
  inline bool has_freemoney() const;
  inline void clear_freemoney();
  static const int kFreeMoneyFieldNumber = 4;
  inline ::google::protobuf::uint32 freemoney() const;
  inline void set_freemoney(::google::protobuf::uint32 value);

  // optional uint32 power = 5;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 5;
  inline ::google::protobuf::uint32 power() const;
  inline void set_power(::google::protobuf::uint32 value);

  // optional uint32 token = 6;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 6;
  inline ::google::protobuf::uint32 token() const;
  inline void set_token(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pro.PlayerBase)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_freemoney();
  inline void clear_has_freemoney();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 coin_;
  ::google::protobuf::uint32 money_;
  ::google::protobuf::uint32 freemoney_;
  ::google::protobuf::uint32 power_;
  ::google::protobuf::uint32 token_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerDataS2C_2eproto();
  friend void protobuf_AssignDesc_PlayerDataS2C_2eproto();
  friend void protobuf_ShutdownFile_PlayerDataS2C_2eproto();

  void InitAsDefaultInstance();
  static PlayerBase* default_instance_;
};
// -------------------------------------------------------------------

class Item : public ::google::protobuf::Message {
 public:
  Item();
  virtual ~Item();

  Item(const Item& from);

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Item& default_instance();

  void Swap(Item* other);

  // implements Message ----------------------------------------------

  Item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Item& from);
  void MergeFrom(const Item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 config = 2;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 2;
  inline ::google::protobuf::uint32 config() const;
  inline void set_config(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pro.Item)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_config();
  inline void clear_has_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 config_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerDataS2C_2eproto();
  friend void protobuf_AssignDesc_PlayerDataS2C_2eproto();
  friend void protobuf_ShutdownFile_PlayerDataS2C_2eproto();

  void InitAsDefaultInstance();
  static Item* default_instance_;
};
// -------------------------------------------------------------------

class PlayerItems : public ::google::protobuf::Message {
 public:
  PlayerItems();
  virtual ~PlayerItems();

  PlayerItems(const PlayerItems& from);

  inline PlayerItems& operator=(const PlayerItems& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerItems& default_instance();

  void Swap(PlayerItems* other);

  // implements Message ----------------------------------------------

  PlayerItems* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerItems& from);
  void MergeFrom(const PlayerItems& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pro.Item items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::Pro::Item& items(int index) const;
  inline ::Pro::Item* mutable_items(int index);
  inline ::Pro::Item* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Pro::Item >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Pro::Item >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Pro.PlayerItems)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Pro::Item > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerDataS2C_2eproto();
  friend void protobuf_AssignDesc_PlayerDataS2C_2eproto();
  friend void protobuf_ShutdownFile_PlayerDataS2C_2eproto();

  void InitAsDefaultInstance();
  static PlayerItems* default_instance_;
};
// -------------------------------------------------------------------

class Quest : public ::google::protobuf::Message {
 public:
  Quest();
  virtual ~Quest();

  Quest(const Quest& from);

  inline Quest& operator=(const Quest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Quest& default_instance();

  void Swap(Quest* other);

  // implements Message ----------------------------------------------

  Quest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Quest& from);
  void MergeFrom(const Quest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 config = 1;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 1;
  inline ::google::protobuf::uint32 config() const;
  inline void set_config(::google::protobuf::uint32 value);

  // optional uint32 progress = 2;
  inline bool has_progress() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 2;
  inline ::google::protobuf::uint32 progress() const;
  inline void set_progress(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pro.Quest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_config();
  inline void clear_has_config();
  inline void set_has_progress();
  inline void clear_has_progress();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 config_;
  ::google::protobuf::uint32 progress_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerDataS2C_2eproto();
  friend void protobuf_AssignDesc_PlayerDataS2C_2eproto();
  friend void protobuf_ShutdownFile_PlayerDataS2C_2eproto();

  void InitAsDefaultInstance();
  static Quest* default_instance_;
};
// -------------------------------------------------------------------

class PlayerQuest : public ::google::protobuf::Message {
 public:
  PlayerQuest();
  virtual ~PlayerQuest();

  PlayerQuest(const PlayerQuest& from);

  inline PlayerQuest& operator=(const PlayerQuest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerQuest& default_instance();

  void Swap(PlayerQuest* other);

  // implements Message ----------------------------------------------

  PlayerQuest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerQuest& from);
  void MergeFrom(const PlayerQuest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pro.Quest quests = 1;
  inline int quests_size() const;
  inline void clear_quests();
  static const int kQuestsFieldNumber = 1;
  inline const ::Pro::Quest& quests(int index) const;
  inline ::Pro::Quest* mutable_quests(int index);
  inline ::Pro::Quest* add_quests();
  inline const ::google::protobuf::RepeatedPtrField< ::Pro::Quest >&
      quests() const;
  inline ::google::protobuf::RepeatedPtrField< ::Pro::Quest >*
      mutable_quests();

  // repeated uint32 doneQuests = 2;
  inline int donequests_size() const;
  inline void clear_donequests();
  static const int kDoneQuestsFieldNumber = 2;
  inline ::google::protobuf::uint32 donequests(int index) const;
  inline void set_donequests(int index, ::google::protobuf::uint32 value);
  inline void add_donequests(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      donequests() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_donequests();

  // repeated .Pro.Quest achievement = 3;
  inline int achievement_size() const;
  inline void clear_achievement();
  static const int kAchievementFieldNumber = 3;
  inline const ::Pro::Quest& achievement(int index) const;
  inline ::Pro::Quest* mutable_achievement(int index);
  inline ::Pro::Quest* add_achievement();
  inline const ::google::protobuf::RepeatedPtrField< ::Pro::Quest >&
      achievement() const;
  inline ::google::protobuf::RepeatedPtrField< ::Pro::Quest >*
      mutable_achievement();

  // repeated uint32 doneAchievement = 4;
  inline int doneachievement_size() const;
  inline void clear_doneachievement();
  static const int kDoneAchievementFieldNumber = 4;
  inline ::google::protobuf::uint32 doneachievement(int index) const;
  inline void set_doneachievement(int index, ::google::protobuf::uint32 value);
  inline void add_doneachievement(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      doneachievement() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_doneachievement();

  // @@protoc_insertion_point(class_scope:Pro.PlayerQuest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Pro::Quest > quests_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > donequests_;
  ::google::protobuf::RepeatedPtrField< ::Pro::Quest > achievement_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > doneachievement_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerDataS2C_2eproto();
  friend void protobuf_AssignDesc_PlayerDataS2C_2eproto();
  friend void protobuf_ShutdownFile_PlayerDataS2C_2eproto();

  void InitAsDefaultInstance();
  static PlayerQuest* default_instance_;
};
// -------------------------------------------------------------------

class PlayerDaily : public ::google::protobuf::Message {
 public:
  PlayerDaily();
  virtual ~PlayerDaily();

  PlayerDaily(const PlayerDaily& from);

  inline PlayerDaily& operator=(const PlayerDaily& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerDaily& default_instance();

  void Swap(PlayerDaily* other);

  // implements Message ----------------------------------------------

  PlayerDaily* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerDaily& from);
  void MergeFrom(const PlayerDaily& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Pro.PlayerDaily)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_PlayerDataS2C_2eproto();
  friend void protobuf_AssignDesc_PlayerDataS2C_2eproto();
  friend void protobuf_ShutdownFile_PlayerDataS2C_2eproto();

  void InitAsDefaultInstance();
  static PlayerDaily* default_instance_;
};
// -------------------------------------------------------------------

class ShopCell : public ::google::protobuf::Message {
 public:
  ShopCell();
  virtual ~ShopCell();

  ShopCell(const ShopCell& from);

  inline ShopCell& operator=(const ShopCell& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShopCell& default_instance();

  void Swap(ShopCell* other);

  // implements Message ----------------------------------------------

  ShopCell* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShopCell& from);
  void MergeFrom(const ShopCell& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 config = 2;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 2;
  inline ::google::protobuf::uint32 config() const;
  inline void set_config(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pro.ShopCell)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_config();
  inline void clear_has_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 config_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerDataS2C_2eproto();
  friend void protobuf_AssignDesc_PlayerDataS2C_2eproto();
  friend void protobuf_ShutdownFile_PlayerDataS2C_2eproto();

  void InitAsDefaultInstance();
  static ShopCell* default_instance_;
};
// -------------------------------------------------------------------

class Store : public ::google::protobuf::Message {
 public:
  Store();
  virtual ~Store();

  Store(const Store& from);

  inline Store& operator=(const Store& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Store& default_instance();

  void Swap(Store* other);

  // implements Message ----------------------------------------------

  Store* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Store& from);
  void MergeFrom(const Store& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Store_StoreType StoreType;
  static const StoreType Type_Normal = Store_StoreType_Type_Normal;
  static inline bool StoreType_IsValid(int value) {
    return Store_StoreType_IsValid(value);
  }
  static const StoreType StoreType_MIN =
    Store_StoreType_StoreType_MIN;
  static const StoreType StoreType_MAX =
    Store_StoreType_StoreType_MAX;
  static const int StoreType_ARRAYSIZE =
    Store_StoreType_StoreType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  StoreType_descriptor() {
    return Store_StoreType_descriptor();
  }
  static inline const ::std::string& StoreType_Name(StoreType value) {
    return Store_StoreType_Name(value);
  }
  static inline bool StoreType_Parse(const ::std::string& name,
      StoreType* value) {
    return Store_StoreType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Pro.ShopCell cells = 1;
  inline int cells_size() const;
  inline void clear_cells();
  static const int kCellsFieldNumber = 1;
  inline const ::Pro::ShopCell& cells(int index) const;
  inline ::Pro::ShopCell* mutable_cells(int index);
  inline ::Pro::ShopCell* add_cells();
  inline const ::google::protobuf::RepeatedPtrField< ::Pro::ShopCell >&
      cells() const;
  inline ::google::protobuf::RepeatedPtrField< ::Pro::ShopCell >*
      mutable_cells();

  // optional .Pro.Store.StoreType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::Pro::Store_StoreType type() const;
  inline void set_type(::Pro::Store_StoreType value);

  // optional uint32 nextRefreshTime = 3;
  inline bool has_nextrefreshtime() const;
  inline void clear_nextrefreshtime();
  static const int kNextRefreshTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 nextrefreshtime() const;
  inline void set_nextrefreshtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pro.Store)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_nextrefreshtime();
  inline void clear_has_nextrefreshtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Pro::ShopCell > cells_;
  int type_;
  ::google::protobuf::uint32 nextrefreshtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerDataS2C_2eproto();
  friend void protobuf_AssignDesc_PlayerDataS2C_2eproto();
  friend void protobuf_ShutdownFile_PlayerDataS2C_2eproto();

  void InitAsDefaultInstance();
  static Store* default_instance_;
};
// -------------------------------------------------------------------

class StoreRecord_Record : public ::google::protobuf::Message {
 public:
  StoreRecord_Record();
  virtual ~StoreRecord_Record();

  StoreRecord_Record(const StoreRecord_Record& from);

  inline StoreRecord_Record& operator=(const StoreRecord_Record& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreRecord_Record& default_instance();

  void Swap(StoreRecord_Record* other);

  // implements Message ----------------------------------------------

  StoreRecord_Record* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreRecord_Record& from);
  void MergeFrom(const StoreRecord_Record& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional uint32 last_time = 3;
  inline bool has_last_time() const;
  inline void clear_last_time();
  static const int kLastTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 last_time() const;
  inline void set_last_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pro.StoreRecord.Record)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_last_time();
  inline void clear_has_last_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 last_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerDataS2C_2eproto();
  friend void protobuf_AssignDesc_PlayerDataS2C_2eproto();
  friend void protobuf_ShutdownFile_PlayerDataS2C_2eproto();

  void InitAsDefaultInstance();
  static StoreRecord_Record* default_instance_;
};
// -------------------------------------------------------------------

class StoreRecord : public ::google::protobuf::Message {
 public:
  StoreRecord();
  virtual ~StoreRecord();

  StoreRecord(const StoreRecord& from);

  inline StoreRecord& operator=(const StoreRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreRecord& default_instance();

  void Swap(StoreRecord* other);

  // implements Message ----------------------------------------------

  StoreRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreRecord& from);
  void MergeFrom(const StoreRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef StoreRecord_Record Record;

  // accessors -------------------------------------------------------

  // optional .Pro.Store.StoreType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Pro::Store_StoreType type() const;
  inline void set_type(::Pro::Store_StoreType value);

  // repeated .Pro.StoreRecord.Record record = 2;
  inline int record_size() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 2;
  inline const ::Pro::StoreRecord_Record& record(int index) const;
  inline ::Pro::StoreRecord_Record* mutable_record(int index);
  inline ::Pro::StoreRecord_Record* add_record();
  inline const ::google::protobuf::RepeatedPtrField< ::Pro::StoreRecord_Record >&
      record() const;
  inline ::google::protobuf::RepeatedPtrField< ::Pro::StoreRecord_Record >*
      mutable_record();

  // @@protoc_insertion_point(class_scope:Pro.StoreRecord)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Pro::StoreRecord_Record > record_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerDataS2C_2eproto();
  friend void protobuf_AssignDesc_PlayerDataS2C_2eproto();
  friend void protobuf_ShutdownFile_PlayerDataS2C_2eproto();

  void InitAsDefaultInstance();
  static StoreRecord* default_instance_;
};
// -------------------------------------------------------------------

class PlayerStore : public ::google::protobuf::Message {
 public:
  PlayerStore();
  virtual ~PlayerStore();

  PlayerStore(const PlayerStore& from);

  inline PlayerStore& operator=(const PlayerStore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerStore& default_instance();

  void Swap(PlayerStore* other);

  // implements Message ----------------------------------------------

  PlayerStore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerStore& from);
  void MergeFrom(const PlayerStore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pro.Store store = 1;
  inline int store_size() const;
  inline void clear_store();
  static const int kStoreFieldNumber = 1;
  inline const ::Pro::Store& store(int index) const;
  inline ::Pro::Store* mutable_store(int index);
  inline ::Pro::Store* add_store();
  inline const ::google::protobuf::RepeatedPtrField< ::Pro::Store >&
      store() const;
  inline ::google::protobuf::RepeatedPtrField< ::Pro::Store >*
      mutable_store();

  // repeated .Pro.StoreRecord record = 2;
  inline int record_size() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 2;
  inline const ::Pro::StoreRecord& record(int index) const;
  inline ::Pro::StoreRecord* mutable_record(int index);
  inline ::Pro::StoreRecord* add_record();
  inline const ::google::protobuf::RepeatedPtrField< ::Pro::StoreRecord >&
      record() const;
  inline ::google::protobuf::RepeatedPtrField< ::Pro::StoreRecord >*
      mutable_record();

  // @@protoc_insertion_point(class_scope:Pro.PlayerStore)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Pro::Store > store_;
  ::google::protobuf::RepeatedPtrField< ::Pro::StoreRecord > record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerDataS2C_2eproto();
  friend void protobuf_AssignDesc_PlayerDataS2C_2eproto();
  friend void protobuf_ShutdownFile_PlayerDataS2C_2eproto();

  void InitAsDefaultInstance();
  static PlayerStore* default_instance_;
};
// -------------------------------------------------------------------

class PlayerData : public ::google::protobuf::Message {
 public:
  PlayerData();
  virtual ~PlayerData();

  PlayerData(const PlayerData& from);

  inline PlayerData& operator=(const PlayerData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerData& default_instance();

  void Swap(PlayerData* other);

  // implements Message ----------------------------------------------

  PlayerData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerData& from);
  void MergeFrom(const PlayerData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .Pro.PlayerBase base = 2;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 2;
  inline const ::Pro::PlayerBase& base() const;
  inline ::Pro::PlayerBase* mutable_base();
  inline ::Pro::PlayerBase* release_base();
  inline void set_allocated_base(::Pro::PlayerBase* base);

  // optional .Pro.PlayerItems items = 3;
  inline bool has_items() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::Pro::PlayerItems& items() const;
  inline ::Pro::PlayerItems* mutable_items();
  inline ::Pro::PlayerItems* release_items();
  inline void set_allocated_items(::Pro::PlayerItems* items);

  // optional .Pro.PlayerQuest quest = 4;
  inline bool has_quest() const;
  inline void clear_quest();
  static const int kQuestFieldNumber = 4;
  inline const ::Pro::PlayerQuest& quest() const;
  inline ::Pro::PlayerQuest* mutable_quest();
  inline ::Pro::PlayerQuest* release_quest();
  inline void set_allocated_quest(::Pro::PlayerQuest* quest);

  // optional .Pro.PlayerDaily daily = 5;
  inline bool has_daily() const;
  inline void clear_daily();
  static const int kDailyFieldNumber = 5;
  inline const ::Pro::PlayerDaily& daily() const;
  inline ::Pro::PlayerDaily* mutable_daily();
  inline ::Pro::PlayerDaily* release_daily();
  inline void set_allocated_daily(::Pro::PlayerDaily* daily);

  // optional .Pro.PlayerStore store = 6;
  inline bool has_store() const;
  inline void clear_store();
  static const int kStoreFieldNumber = 6;
  inline const ::Pro::PlayerStore& store() const;
  inline ::Pro::PlayerStore* mutable_store();
  inline ::Pro::PlayerStore* release_store();
  inline void set_allocated_store(::Pro::PlayerStore* store);

  // @@protoc_insertion_point(class_scope:Pro.PlayerData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_items();
  inline void clear_has_items();
  inline void set_has_quest();
  inline void clear_has_quest();
  inline void set_has_daily();
  inline void clear_has_daily();
  inline void set_has_store();
  inline void clear_has_store();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Pro::PlayerBase* base_;
  ::Pro::PlayerItems* items_;
  ::Pro::PlayerQuest* quest_;
  ::Pro::PlayerDaily* daily_;
  ::Pro::PlayerStore* store_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerDataS2C_2eproto();
  friend void protobuf_AssignDesc_PlayerDataS2C_2eproto();
  friend void protobuf_ShutdownFile_PlayerDataS2C_2eproto();

  void InitAsDefaultInstance();
  static PlayerData* default_instance_;
};
// -------------------------------------------------------------------

class PlayerSync_ItemSyncData_ItemSync : public ::google::protobuf::Message {
 public:
  PlayerSync_ItemSyncData_ItemSync();
  virtual ~PlayerSync_ItemSyncData_ItemSync();

  PlayerSync_ItemSyncData_ItemSync(const PlayerSync_ItemSyncData_ItemSync& from);

  inline PlayerSync_ItemSyncData_ItemSync& operator=(const PlayerSync_ItemSyncData_ItemSync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerSync_ItemSyncData_ItemSync& default_instance();

  void Swap(PlayerSync_ItemSyncData_ItemSync* other);

  // implements Message ----------------------------------------------

  PlayerSync_ItemSyncData_ItemSync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerSync_ItemSyncData_ItemSync& from);
  void MergeFrom(const PlayerSync_ItemSyncData_ItemSync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Pro.Item item = 1;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline const ::Pro::Item& item() const;
  inline ::Pro::Item* mutable_item();
  inline ::Pro::Item* release_item();
  inline void set_allocated_item(::Pro::Item* item);

  // optional .Pro.PlayerSync.Action action = 2;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 2;
  inline ::Pro::PlayerSync_Action action() const;
  inline void set_action(::Pro::PlayerSync_Action value);

  // @@protoc_insertion_point(class_scope:Pro.PlayerSync.ItemSyncData.ItemSync)
 private:
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_action();
  inline void clear_has_action();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Pro::Item* item_;
  int action_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerDataS2C_2eproto();
  friend void protobuf_AssignDesc_PlayerDataS2C_2eproto();
  friend void protobuf_ShutdownFile_PlayerDataS2C_2eproto();

  void InitAsDefaultInstance();
  static PlayerSync_ItemSyncData_ItemSync* default_instance_;
};
// -------------------------------------------------------------------

class PlayerSync_ItemSyncData : public ::google::protobuf::Message {
 public:
  PlayerSync_ItemSyncData();
  virtual ~PlayerSync_ItemSyncData();

  PlayerSync_ItemSyncData(const PlayerSync_ItemSyncData& from);

  inline PlayerSync_ItemSyncData& operator=(const PlayerSync_ItemSyncData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerSync_ItemSyncData& default_instance();

  void Swap(PlayerSync_ItemSyncData* other);

  // implements Message ----------------------------------------------

  PlayerSync_ItemSyncData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerSync_ItemSyncData& from);
  void MergeFrom(const PlayerSync_ItemSyncData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PlayerSync_ItemSyncData_ItemSync ItemSync;

  // accessors -------------------------------------------------------

  // repeated .Pro.PlayerSync.ItemSyncData data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Pro::PlayerSync_ItemSyncData& data(int index) const;
  inline ::Pro::PlayerSync_ItemSyncData* mutable_data(int index);
  inline ::Pro::PlayerSync_ItemSyncData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Pro::PlayerSync_ItemSyncData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Pro::PlayerSync_ItemSyncData >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:Pro.PlayerSync.ItemSyncData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Pro::PlayerSync_ItemSyncData > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerDataS2C_2eproto();
  friend void protobuf_AssignDesc_PlayerDataS2C_2eproto();
  friend void protobuf_ShutdownFile_PlayerDataS2C_2eproto();

  void InitAsDefaultInstance();
  static PlayerSync_ItemSyncData* default_instance_;
};
// -------------------------------------------------------------------

class PlayerSync_QuestSyncData_QuestSync : public ::google::protobuf::Message {
 public:
  PlayerSync_QuestSyncData_QuestSync();
  virtual ~PlayerSync_QuestSyncData_QuestSync();

  PlayerSync_QuestSyncData_QuestSync(const PlayerSync_QuestSyncData_QuestSync& from);

  inline PlayerSync_QuestSyncData_QuestSync& operator=(const PlayerSync_QuestSyncData_QuestSync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerSync_QuestSyncData_QuestSync& default_instance();

  void Swap(PlayerSync_QuestSyncData_QuestSync* other);

  // implements Message ----------------------------------------------

  PlayerSync_QuestSyncData_QuestSync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerSync_QuestSyncData_QuestSync& from);
  void MergeFrom(const PlayerSync_QuestSyncData_QuestSync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Quest = 1;
  inline bool has_quest() const;
  inline void clear_quest();
  static const int kQuestFieldNumber = 1;
  inline ::google::protobuf::uint32 quest() const;
  inline void set_quest(::google::protobuf::uint32 value);

  // optional .Pro.PlayerSync.Action action = 2;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 2;
  inline ::Pro::PlayerSync_Action action() const;
  inline void set_action(::Pro::PlayerSync_Action value);

  // @@protoc_insertion_point(class_scope:Pro.PlayerSync.QuestSyncData.QuestSync)
 private:
  inline void set_has_quest();
  inline void clear_has_quest();
  inline void set_has_action();
  inline void clear_has_action();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 quest_;
  int action_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerDataS2C_2eproto();
  friend void protobuf_AssignDesc_PlayerDataS2C_2eproto();
  friend void protobuf_ShutdownFile_PlayerDataS2C_2eproto();

  void InitAsDefaultInstance();
  static PlayerSync_QuestSyncData_QuestSync* default_instance_;
};
// -------------------------------------------------------------------

class PlayerSync_QuestSyncData : public ::google::protobuf::Message {
 public:
  PlayerSync_QuestSyncData();
  virtual ~PlayerSync_QuestSyncData();

  PlayerSync_QuestSyncData(const PlayerSync_QuestSyncData& from);

  inline PlayerSync_QuestSyncData& operator=(const PlayerSync_QuestSyncData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerSync_QuestSyncData& default_instance();

  void Swap(PlayerSync_QuestSyncData* other);

  // implements Message ----------------------------------------------

  PlayerSync_QuestSyncData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerSync_QuestSyncData& from);
  void MergeFrom(const PlayerSync_QuestSyncData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PlayerSync_QuestSyncData_QuestSync QuestSync;

  // accessors -------------------------------------------------------

  // repeated .Pro.PlayerSync.QuestSyncData.QuestSync data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Pro::PlayerSync_QuestSyncData_QuestSync& data(int index) const;
  inline ::Pro::PlayerSync_QuestSyncData_QuestSync* mutable_data(int index);
  inline ::Pro::PlayerSync_QuestSyncData_QuestSync* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Pro::PlayerSync_QuestSyncData_QuestSync >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Pro::PlayerSync_QuestSyncData_QuestSync >*
      mutable_data();

  // repeated uint32 done = 2;
  inline int done_size() const;
  inline void clear_done();
  static const int kDoneFieldNumber = 2;
  inline ::google::protobuf::uint32 done(int index) const;
  inline void set_done(int index, ::google::protobuf::uint32 value);
  inline void add_done(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      done() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_done();

  // repeated .Pro.PlayerSync.QuestSyncData.QuestSync achievement = 3;
  inline int achievement_size() const;
  inline void clear_achievement();
  static const int kAchievementFieldNumber = 3;
  inline const ::Pro::PlayerSync_QuestSyncData_QuestSync& achievement(int index) const;
  inline ::Pro::PlayerSync_QuestSyncData_QuestSync* mutable_achievement(int index);
  inline ::Pro::PlayerSync_QuestSyncData_QuestSync* add_achievement();
  inline const ::google::protobuf::RepeatedPtrField< ::Pro::PlayerSync_QuestSyncData_QuestSync >&
      achievement() const;
  inline ::google::protobuf::RepeatedPtrField< ::Pro::PlayerSync_QuestSyncData_QuestSync >*
      mutable_achievement();

  // repeated uint32 doneAchievement = 4;
  inline int doneachievement_size() const;
  inline void clear_doneachievement();
  static const int kDoneAchievementFieldNumber = 4;
  inline ::google::protobuf::uint32 doneachievement(int index) const;
  inline void set_doneachievement(int index, ::google::protobuf::uint32 value);
  inline void add_doneachievement(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      doneachievement() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_doneachievement();

  // @@protoc_insertion_point(class_scope:Pro.PlayerSync.QuestSyncData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Pro::PlayerSync_QuestSyncData_QuestSync > data_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > done_;
  ::google::protobuf::RepeatedPtrField< ::Pro::PlayerSync_QuestSyncData_QuestSync > achievement_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > doneachievement_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerDataS2C_2eproto();
  friend void protobuf_AssignDesc_PlayerDataS2C_2eproto();
  friend void protobuf_ShutdownFile_PlayerDataS2C_2eproto();

  void InitAsDefaultInstance();
  static PlayerSync_QuestSyncData* default_instance_;
};
// -------------------------------------------------------------------

class PlayerSync_DailySyncData : public ::google::protobuf::Message {
 public:
  PlayerSync_DailySyncData();
  virtual ~PlayerSync_DailySyncData();

  PlayerSync_DailySyncData(const PlayerSync_DailySyncData& from);

  inline PlayerSync_DailySyncData& operator=(const PlayerSync_DailySyncData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerSync_DailySyncData& default_instance();

  void Swap(PlayerSync_DailySyncData* other);

  // implements Message ----------------------------------------------

  PlayerSync_DailySyncData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerSync_DailySyncData& from);
  void MergeFrom(const PlayerSync_DailySyncData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool bSync = 1;
  inline bool has_bsync() const;
  inline void clear_bsync();
  static const int kBSyncFieldNumber = 1;
  inline bool bsync() const;
  inline void set_bsync(bool value);

  // optional .Pro.PlayerDaily data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::Pro::PlayerDaily& data() const;
  inline ::Pro::PlayerDaily* mutable_data();
  inline ::Pro::PlayerDaily* release_data();
  inline void set_allocated_data(::Pro::PlayerDaily* data);

  // @@protoc_insertion_point(class_scope:Pro.PlayerSync.DailySyncData)
 private:
  inline void set_has_bsync();
  inline void clear_has_bsync();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Pro::PlayerDaily* data_;
  bool bsync_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerDataS2C_2eproto();
  friend void protobuf_AssignDesc_PlayerDataS2C_2eproto();
  friend void protobuf_ShutdownFile_PlayerDataS2C_2eproto();

  void InitAsDefaultInstance();
  static PlayerSync_DailySyncData* default_instance_;
};
// -------------------------------------------------------------------

class PlayerSync_StoreSyncData_StoreRecordSync : public ::google::protobuf::Message {
 public:
  PlayerSync_StoreSyncData_StoreRecordSync();
  virtual ~PlayerSync_StoreSyncData_StoreRecordSync();

  PlayerSync_StoreSyncData_StoreRecordSync(const PlayerSync_StoreSyncData_StoreRecordSync& from);

  inline PlayerSync_StoreSyncData_StoreRecordSync& operator=(const PlayerSync_StoreSyncData_StoreRecordSync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerSync_StoreSyncData_StoreRecordSync& default_instance();

  void Swap(PlayerSync_StoreSyncData_StoreRecordSync* other);

  // implements Message ----------------------------------------------

  PlayerSync_StoreSyncData_StoreRecordSync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerSync_StoreSyncData_StoreRecordSync& from);
  void MergeFrom(const PlayerSync_StoreSyncData_StoreRecordSync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Pro.PlayerSync.Action action = 1;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 1;
  inline ::Pro::PlayerSync_Action action() const;
  inline void set_action(::Pro::PlayerSync_Action value);

  // repeated .Pro.StoreRecord.Record record = 2;
  inline int record_size() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 2;
  inline const ::Pro::StoreRecord_Record& record(int index) const;
  inline ::Pro::StoreRecord_Record* mutable_record(int index);
  inline ::Pro::StoreRecord_Record* add_record();
  inline const ::google::protobuf::RepeatedPtrField< ::Pro::StoreRecord_Record >&
      record() const;
  inline ::google::protobuf::RepeatedPtrField< ::Pro::StoreRecord_Record >*
      mutable_record();

  // optional .Pro.Store.StoreType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Pro::Store_StoreType type() const;
  inline void set_type(::Pro::Store_StoreType value);

  // @@protoc_insertion_point(class_scope:Pro.PlayerSync.StoreSyncData.StoreRecordSync)
 private:
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Pro::StoreRecord_Record > record_;
  int action_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerDataS2C_2eproto();
  friend void protobuf_AssignDesc_PlayerDataS2C_2eproto();
  friend void protobuf_ShutdownFile_PlayerDataS2C_2eproto();

  void InitAsDefaultInstance();
  static PlayerSync_StoreSyncData_StoreRecordSync* default_instance_;
};
// -------------------------------------------------------------------

class PlayerSync_StoreSyncData : public ::google::protobuf::Message {
 public:
  PlayerSync_StoreSyncData();
  virtual ~PlayerSync_StoreSyncData();

  PlayerSync_StoreSyncData(const PlayerSync_StoreSyncData& from);

  inline PlayerSync_StoreSyncData& operator=(const PlayerSync_StoreSyncData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerSync_StoreSyncData& default_instance();

  void Swap(PlayerSync_StoreSyncData* other);

  // implements Message ----------------------------------------------

  PlayerSync_StoreSyncData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerSync_StoreSyncData& from);
  void MergeFrom(const PlayerSync_StoreSyncData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PlayerSync_StoreSyncData_StoreRecordSync StoreRecordSync;

  // accessors -------------------------------------------------------

  // repeated .Pro.PlayerSync.StoreSyncData.StoreRecordSync record = 1;
  inline int record_size() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 1;
  inline const ::Pro::PlayerSync_StoreSyncData_StoreRecordSync& record(int index) const;
  inline ::Pro::PlayerSync_StoreSyncData_StoreRecordSync* mutable_record(int index);
  inline ::Pro::PlayerSync_StoreSyncData_StoreRecordSync* add_record();
  inline const ::google::protobuf::RepeatedPtrField< ::Pro::PlayerSync_StoreSyncData_StoreRecordSync >&
      record() const;
  inline ::google::protobuf::RepeatedPtrField< ::Pro::PlayerSync_StoreSyncData_StoreRecordSync >*
      mutable_record();

  // repeated .Pro.Store store = 2;
  inline int store_size() const;
  inline void clear_store();
  static const int kStoreFieldNumber = 2;
  inline const ::Pro::Store& store(int index) const;
  inline ::Pro::Store* mutable_store(int index);
  inline ::Pro::Store* add_store();
  inline const ::google::protobuf::RepeatedPtrField< ::Pro::Store >&
      store() const;
  inline ::google::protobuf::RepeatedPtrField< ::Pro::Store >*
      mutable_store();

  // @@protoc_insertion_point(class_scope:Pro.PlayerSync.StoreSyncData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Pro::PlayerSync_StoreSyncData_StoreRecordSync > record_;
  ::google::protobuf::RepeatedPtrField< ::Pro::Store > store_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerDataS2C_2eproto();
  friend void protobuf_AssignDesc_PlayerDataS2C_2eproto();
  friend void protobuf_ShutdownFile_PlayerDataS2C_2eproto();

  void InitAsDefaultInstance();
  static PlayerSync_StoreSyncData* default_instance_;
};
// -------------------------------------------------------------------

class PlayerSync : public ::google::protobuf::Message {
 public:
  PlayerSync();
  virtual ~PlayerSync();

  PlayerSync(const PlayerSync& from);

  inline PlayerSync& operator=(const PlayerSync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerSync& default_instance();

  void Swap(PlayerSync* other);

  // implements Message ----------------------------------------------

  PlayerSync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerSync& from);
  void MergeFrom(const PlayerSync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PlayerSync_ItemSyncData ItemSyncData;
  typedef PlayerSync_QuestSyncData QuestSyncData;
  typedef PlayerSync_DailySyncData DailySyncData;
  typedef PlayerSync_StoreSyncData StoreSyncData;

  typedef PlayerSync_Action Action;
  static const Action _ADD_ = PlayerSync_Action__ADD_;
  static const Action _UPDATE_ = PlayerSync_Action__UPDATE_;
  static const Action _REMOVE_ = PlayerSync_Action__REMOVE_;
  static inline bool Action_IsValid(int value) {
    return PlayerSync_Action_IsValid(value);
  }
  static const Action Action_MIN =
    PlayerSync_Action_Action_MIN;
  static const Action Action_MAX =
    PlayerSync_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    PlayerSync_Action_Action_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Action_descriptor() {
    return PlayerSync_Action_descriptor();
  }
  static inline const ::std::string& Action_Name(Action value) {
    return PlayerSync_Action_Name(value);
  }
  static inline bool Action_Parse(const ::std::string& name,
      Action* value) {
    return PlayerSync_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Pro.PlayerBase base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::Pro::PlayerBase& base() const;
  inline ::Pro::PlayerBase* mutable_base();
  inline ::Pro::PlayerBase* release_base();
  inline void set_allocated_base(::Pro::PlayerBase* base);

  // optional .Pro.PlayerSync.ItemSyncData item = 2;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 2;
  inline const ::Pro::PlayerSync_ItemSyncData& item() const;
  inline ::Pro::PlayerSync_ItemSyncData* mutable_item();
  inline ::Pro::PlayerSync_ItemSyncData* release_item();
  inline void set_allocated_item(::Pro::PlayerSync_ItemSyncData* item);

  // optional .Pro.PlayerSync.QuestSyncData quest = 3;
  inline bool has_quest() const;
  inline void clear_quest();
  static const int kQuestFieldNumber = 3;
  inline const ::Pro::PlayerSync_QuestSyncData& quest() const;
  inline ::Pro::PlayerSync_QuestSyncData* mutable_quest();
  inline ::Pro::PlayerSync_QuestSyncData* release_quest();
  inline void set_allocated_quest(::Pro::PlayerSync_QuestSyncData* quest);

  // optional .Pro.PlayerSync.DailySyncData daily = 4;
  inline bool has_daily() const;
  inline void clear_daily();
  static const int kDailyFieldNumber = 4;
  inline const ::Pro::PlayerSync_DailySyncData& daily() const;
  inline ::Pro::PlayerSync_DailySyncData* mutable_daily();
  inline ::Pro::PlayerSync_DailySyncData* release_daily();
  inline void set_allocated_daily(::Pro::PlayerSync_DailySyncData* daily);

  // optional .Pro.PlayerSync.StoreSyncData store = 5;
  inline bool has_store() const;
  inline void clear_store();
  static const int kStoreFieldNumber = 5;
  inline const ::Pro::PlayerSync_StoreSyncData& store() const;
  inline ::Pro::PlayerSync_StoreSyncData* mutable_store();
  inline ::Pro::PlayerSync_StoreSyncData* release_store();
  inline void set_allocated_store(::Pro::PlayerSync_StoreSyncData* store);

  // @@protoc_insertion_point(class_scope:Pro.PlayerSync)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_quest();
  inline void clear_has_quest();
  inline void set_has_daily();
  inline void clear_has_daily();
  inline void set_has_store();
  inline void clear_has_store();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Pro::PlayerBase* base_;
  ::Pro::PlayerSync_ItemSyncData* item_;
  ::Pro::PlayerSync_QuestSyncData* quest_;
  ::Pro::PlayerSync_DailySyncData* daily_;
  ::Pro::PlayerSync_StoreSyncData* store_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerDataS2C_2eproto();
  friend void protobuf_AssignDesc_PlayerDataS2C_2eproto();
  friend void protobuf_ShutdownFile_PlayerDataS2C_2eproto();

  void InitAsDefaultInstance();
  static PlayerSync* default_instance_;
};
// ===================================================================


// ===================================================================

// AccountData

// optional uint32 pid = 1;
inline bool AccountData::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountData::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountData::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountData::clear_pid() {
  pid_ = 0u;
  clear_has_pid();
}
inline ::google::protobuf::uint32 AccountData::pid() const {
  return pid_;
}
inline void AccountData::set_pid(::google::protobuf::uint32 value) {
  set_has_pid();
  pid_ = value;
}

// optional string name = 2;
inline bool AccountData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& AccountData::name() const {
  return *name_;
}
inline void AccountData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AccountData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AccountData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* AccountData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string password = 3;
inline bool AccountData::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountData::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountData::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountData::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& AccountData::password() const {
  return *password_;
}
inline void AccountData::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void AccountData::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void AccountData::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountData::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* AccountData::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountData::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string channel = 4;
inline bool AccountData::has_channel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AccountData::set_has_channel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AccountData::clear_has_channel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AccountData::clear_channel() {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    channel_->clear();
  }
  clear_has_channel();
}
inline const ::std::string& AccountData::channel() const {
  return *channel_;
}
inline void AccountData::set_channel(const ::std::string& value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void AccountData::set_channel(const char* value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void AccountData::set_channel(const char* value, size_t size) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountData::mutable_channel() {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  return channel_;
}
inline ::std::string* AccountData::release_channel() {
  clear_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_;
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountData::set_allocated_channel(::std::string* channel) {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (channel) {
    set_has_channel();
    channel_ = channel;
  } else {
    clear_has_channel();
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string downChannel = 5;
inline bool AccountData::has_downchannel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AccountData::set_has_downchannel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AccountData::clear_has_downchannel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AccountData::clear_downchannel() {
  if (downchannel_ != &::google::protobuf::internal::kEmptyString) {
    downchannel_->clear();
  }
  clear_has_downchannel();
}
inline const ::std::string& AccountData::downchannel() const {
  return *downchannel_;
}
inline void AccountData::set_downchannel(const ::std::string& value) {
  set_has_downchannel();
  if (downchannel_ == &::google::protobuf::internal::kEmptyString) {
    downchannel_ = new ::std::string;
  }
  downchannel_->assign(value);
}
inline void AccountData::set_downchannel(const char* value) {
  set_has_downchannel();
  if (downchannel_ == &::google::protobuf::internal::kEmptyString) {
    downchannel_ = new ::std::string;
  }
  downchannel_->assign(value);
}
inline void AccountData::set_downchannel(const char* value, size_t size) {
  set_has_downchannel();
  if (downchannel_ == &::google::protobuf::internal::kEmptyString) {
    downchannel_ = new ::std::string;
  }
  downchannel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountData::mutable_downchannel() {
  set_has_downchannel();
  if (downchannel_ == &::google::protobuf::internal::kEmptyString) {
    downchannel_ = new ::std::string;
  }
  return downchannel_;
}
inline ::std::string* AccountData::release_downchannel() {
  clear_has_downchannel();
  if (downchannel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = downchannel_;
    downchannel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountData::set_allocated_downchannel(::std::string* downchannel) {
  if (downchannel_ != &::google::protobuf::internal::kEmptyString) {
    delete downchannel_;
  }
  if (downchannel) {
    set_has_downchannel();
    downchannel_ = downchannel;
  } else {
    clear_has_downchannel();
    downchannel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string nickName = 6;
inline bool AccountData::has_nickname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AccountData::set_has_nickname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AccountData::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AccountData::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& AccountData::nickname() const {
  return *nickname_;
}
inline void AccountData::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void AccountData::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void AccountData::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountData::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* AccountData::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountData::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 totalLogin = 7;
inline bool AccountData::has_totallogin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AccountData::set_has_totallogin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AccountData::clear_has_totallogin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AccountData::clear_totallogin() {
  totallogin_ = 0u;
  clear_has_totallogin();
}
inline ::google::protobuf::uint32 AccountData::totallogin() const {
  return totallogin_;
}
inline void AccountData::set_totallogin(::google::protobuf::uint32 value) {
  set_has_totallogin();
  totallogin_ = value;
}

// optional uint32 createTime = 8;
inline bool AccountData::has_createtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AccountData::set_has_createtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AccountData::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AccountData::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
inline ::google::protobuf::uint32 AccountData::createtime() const {
  return createtime_;
}
inline void AccountData::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
}

// optional string cell = 9;
inline bool AccountData::has_cell() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AccountData::set_has_cell() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AccountData::clear_has_cell() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AccountData::clear_cell() {
  if (cell_ != &::google::protobuf::internal::kEmptyString) {
    cell_->clear();
  }
  clear_has_cell();
}
inline const ::std::string& AccountData::cell() const {
  return *cell_;
}
inline void AccountData::set_cell(const ::std::string& value) {
  set_has_cell();
  if (cell_ == &::google::protobuf::internal::kEmptyString) {
    cell_ = new ::std::string;
  }
  cell_->assign(value);
}
inline void AccountData::set_cell(const char* value) {
  set_has_cell();
  if (cell_ == &::google::protobuf::internal::kEmptyString) {
    cell_ = new ::std::string;
  }
  cell_->assign(value);
}
inline void AccountData::set_cell(const char* value, size_t size) {
  set_has_cell();
  if (cell_ == &::google::protobuf::internal::kEmptyString) {
    cell_ = new ::std::string;
  }
  cell_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountData::mutable_cell() {
  set_has_cell();
  if (cell_ == &::google::protobuf::internal::kEmptyString) {
    cell_ = new ::std::string;
  }
  return cell_;
}
inline ::std::string* AccountData::release_cell() {
  clear_has_cell();
  if (cell_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cell_;
    cell_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountData::set_allocated_cell(::std::string* cell) {
  if (cell_ != &::google::protobuf::internal::kEmptyString) {
    delete cell_;
  }
  if (cell) {
    set_has_cell();
    cell_ = cell;
  } else {
    clear_has_cell();
    cell_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PlayerBase

// optional uint32 level = 1;
inline bool PlayerBase::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerBase::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerBase::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerBase::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 PlayerBase::level() const {
  return level_;
}
inline void PlayerBase::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 coin = 2;
inline bool PlayerBase::has_coin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerBase::set_has_coin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerBase::clear_has_coin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerBase::clear_coin() {
  coin_ = 0u;
  clear_has_coin();
}
inline ::google::protobuf::uint32 PlayerBase::coin() const {
  return coin_;
}
inline void PlayerBase::set_coin(::google::protobuf::uint32 value) {
  set_has_coin();
  coin_ = value;
}

// optional uint32 money = 3;
inline bool PlayerBase::has_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerBase::set_has_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerBase::clear_has_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerBase::clear_money() {
  money_ = 0u;
  clear_has_money();
}
inline ::google::protobuf::uint32 PlayerBase::money() const {
  return money_;
}
inline void PlayerBase::set_money(::google::protobuf::uint32 value) {
  set_has_money();
  money_ = value;
}

// optional uint32 freeMoney = 4;
inline bool PlayerBase::has_freemoney() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerBase::set_has_freemoney() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerBase::clear_has_freemoney() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerBase::clear_freemoney() {
  freemoney_ = 0u;
  clear_has_freemoney();
}
inline ::google::protobuf::uint32 PlayerBase::freemoney() const {
  return freemoney_;
}
inline void PlayerBase::set_freemoney(::google::protobuf::uint32 value) {
  set_has_freemoney();
  freemoney_ = value;
}

// optional uint32 power = 5;
inline bool PlayerBase::has_power() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerBase::set_has_power() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerBase::clear_has_power() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerBase::clear_power() {
  power_ = 0u;
  clear_has_power();
}
inline ::google::protobuf::uint32 PlayerBase::power() const {
  return power_;
}
inline void PlayerBase::set_power(::google::protobuf::uint32 value) {
  set_has_power();
  power_ = value;
}

// optional uint32 token = 6;
inline bool PlayerBase::has_token() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerBase::set_has_token() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerBase::clear_has_token() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerBase::clear_token() {
  token_ = 0u;
  clear_has_token();
}
inline ::google::protobuf::uint32 PlayerBase::token() const {
  return token_;
}
inline void PlayerBase::set_token(::google::protobuf::uint32 value) {
  set_has_token();
  token_ = value;
}

// -------------------------------------------------------------------

// Item

// optional uint32 id = 1;
inline bool Item::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Item::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Item::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Item::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Item::id() const {
  return id_;
}
inline void Item::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 config = 2;
inline bool Item::has_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Item::set_has_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Item::clear_has_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Item::clear_config() {
  config_ = 0u;
  clear_has_config();
}
inline ::google::protobuf::uint32 Item::config() const {
  return config_;
}
inline void Item::set_config(::google::protobuf::uint32 value) {
  set_has_config();
  config_ = value;
}

// -------------------------------------------------------------------

// PlayerItems

// repeated .Pro.Item items = 1;
inline int PlayerItems::items_size() const {
  return items_.size();
}
inline void PlayerItems::clear_items() {
  items_.Clear();
}
inline const ::Pro::Item& PlayerItems::items(int index) const {
  return items_.Get(index);
}
inline ::Pro::Item* PlayerItems::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::Pro::Item* PlayerItems::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pro::Item >&
PlayerItems::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Pro::Item >*
PlayerItems::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// Quest

// optional uint32 id = 3;
inline bool Quest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Quest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Quest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Quest::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Quest::id() const {
  return id_;
}
inline void Quest::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 config = 1;
inline bool Quest::has_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Quest::set_has_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Quest::clear_has_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Quest::clear_config() {
  config_ = 0u;
  clear_has_config();
}
inline ::google::protobuf::uint32 Quest::config() const {
  return config_;
}
inline void Quest::set_config(::google::protobuf::uint32 value) {
  set_has_config();
  config_ = value;
}

// optional uint32 progress = 2;
inline bool Quest::has_progress() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Quest::set_has_progress() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Quest::clear_has_progress() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Quest::clear_progress() {
  progress_ = 0u;
  clear_has_progress();
}
inline ::google::protobuf::uint32 Quest::progress() const {
  return progress_;
}
inline void Quest::set_progress(::google::protobuf::uint32 value) {
  set_has_progress();
  progress_ = value;
}

// -------------------------------------------------------------------

// PlayerQuest

// repeated .Pro.Quest quests = 1;
inline int PlayerQuest::quests_size() const {
  return quests_.size();
}
inline void PlayerQuest::clear_quests() {
  quests_.Clear();
}
inline const ::Pro::Quest& PlayerQuest::quests(int index) const {
  return quests_.Get(index);
}
inline ::Pro::Quest* PlayerQuest::mutable_quests(int index) {
  return quests_.Mutable(index);
}
inline ::Pro::Quest* PlayerQuest::add_quests() {
  return quests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pro::Quest >&
PlayerQuest::quests() const {
  return quests_;
}
inline ::google::protobuf::RepeatedPtrField< ::Pro::Quest >*
PlayerQuest::mutable_quests() {
  return &quests_;
}

// repeated uint32 doneQuests = 2;
inline int PlayerQuest::donequests_size() const {
  return donequests_.size();
}
inline void PlayerQuest::clear_donequests() {
  donequests_.Clear();
}
inline ::google::protobuf::uint32 PlayerQuest::donequests(int index) const {
  return donequests_.Get(index);
}
inline void PlayerQuest::set_donequests(int index, ::google::protobuf::uint32 value) {
  donequests_.Set(index, value);
}
inline void PlayerQuest::add_donequests(::google::protobuf::uint32 value) {
  donequests_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PlayerQuest::donequests() const {
  return donequests_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PlayerQuest::mutable_donequests() {
  return &donequests_;
}

// repeated .Pro.Quest achievement = 3;
inline int PlayerQuest::achievement_size() const {
  return achievement_.size();
}
inline void PlayerQuest::clear_achievement() {
  achievement_.Clear();
}
inline const ::Pro::Quest& PlayerQuest::achievement(int index) const {
  return achievement_.Get(index);
}
inline ::Pro::Quest* PlayerQuest::mutable_achievement(int index) {
  return achievement_.Mutable(index);
}
inline ::Pro::Quest* PlayerQuest::add_achievement() {
  return achievement_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pro::Quest >&
PlayerQuest::achievement() const {
  return achievement_;
}
inline ::google::protobuf::RepeatedPtrField< ::Pro::Quest >*
PlayerQuest::mutable_achievement() {
  return &achievement_;
}

// repeated uint32 doneAchievement = 4;
inline int PlayerQuest::doneachievement_size() const {
  return doneachievement_.size();
}
inline void PlayerQuest::clear_doneachievement() {
  doneachievement_.Clear();
}
inline ::google::protobuf::uint32 PlayerQuest::doneachievement(int index) const {
  return doneachievement_.Get(index);
}
inline void PlayerQuest::set_doneachievement(int index, ::google::protobuf::uint32 value) {
  doneachievement_.Set(index, value);
}
inline void PlayerQuest::add_doneachievement(::google::protobuf::uint32 value) {
  doneachievement_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PlayerQuest::doneachievement() const {
  return doneachievement_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PlayerQuest::mutable_doneachievement() {
  return &doneachievement_;
}

// -------------------------------------------------------------------

// PlayerDaily

// -------------------------------------------------------------------

// ShopCell

// optional uint32 id = 1;
inline bool ShopCell::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShopCell::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShopCell::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShopCell::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ShopCell::id() const {
  return id_;
}
inline void ShopCell::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 config = 2;
inline bool ShopCell::has_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShopCell::set_has_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShopCell::clear_has_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShopCell::clear_config() {
  config_ = 0u;
  clear_has_config();
}
inline ::google::protobuf::uint32 ShopCell::config() const {
  return config_;
}
inline void ShopCell::set_config(::google::protobuf::uint32 value) {
  set_has_config();
  config_ = value;
}

// -------------------------------------------------------------------

// Store

// repeated .Pro.ShopCell cells = 1;
inline int Store::cells_size() const {
  return cells_.size();
}
inline void Store::clear_cells() {
  cells_.Clear();
}
inline const ::Pro::ShopCell& Store::cells(int index) const {
  return cells_.Get(index);
}
inline ::Pro::ShopCell* Store::mutable_cells(int index) {
  return cells_.Mutable(index);
}
inline ::Pro::ShopCell* Store::add_cells() {
  return cells_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pro::ShopCell >&
Store::cells() const {
  return cells_;
}
inline ::google::protobuf::RepeatedPtrField< ::Pro::ShopCell >*
Store::mutable_cells() {
  return &cells_;
}

// optional .Pro.Store.StoreType type = 2;
inline bool Store::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Store::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Store::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Store::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Pro::Store_StoreType Store::type() const {
  return static_cast< ::Pro::Store_StoreType >(type_);
}
inline void Store::set_type(::Pro::Store_StoreType value) {
  assert(::Pro::Store_StoreType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 nextRefreshTime = 3;
inline bool Store::has_nextrefreshtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Store::set_has_nextrefreshtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Store::clear_has_nextrefreshtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Store::clear_nextrefreshtime() {
  nextrefreshtime_ = 0u;
  clear_has_nextrefreshtime();
}
inline ::google::protobuf::uint32 Store::nextrefreshtime() const {
  return nextrefreshtime_;
}
inline void Store::set_nextrefreshtime(::google::protobuf::uint32 value) {
  set_has_nextrefreshtime();
  nextrefreshtime_ = value;
}

// -------------------------------------------------------------------

// StoreRecord_Record

// optional uint32 id = 1;
inline bool StoreRecord_Record::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreRecord_Record::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreRecord_Record::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreRecord_Record::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 StoreRecord_Record::id() const {
  return id_;
}
inline void StoreRecord_Record::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 count = 2;
inline bool StoreRecord_Record::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoreRecord_Record::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoreRecord_Record::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoreRecord_Record::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 StoreRecord_Record::count() const {
  return count_;
}
inline void StoreRecord_Record::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// optional uint32 last_time = 3;
inline bool StoreRecord_Record::has_last_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StoreRecord_Record::set_has_last_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StoreRecord_Record::clear_has_last_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StoreRecord_Record::clear_last_time() {
  last_time_ = 0u;
  clear_has_last_time();
}
inline ::google::protobuf::uint32 StoreRecord_Record::last_time() const {
  return last_time_;
}
inline void StoreRecord_Record::set_last_time(::google::protobuf::uint32 value) {
  set_has_last_time();
  last_time_ = value;
}

// -------------------------------------------------------------------

// StoreRecord

// optional .Pro.Store.StoreType type = 1;
inline bool StoreRecord::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreRecord::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreRecord::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreRecord::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Pro::Store_StoreType StoreRecord::type() const {
  return static_cast< ::Pro::Store_StoreType >(type_);
}
inline void StoreRecord::set_type(::Pro::Store_StoreType value) {
  assert(::Pro::Store_StoreType_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .Pro.StoreRecord.Record record = 2;
inline int StoreRecord::record_size() const {
  return record_.size();
}
inline void StoreRecord::clear_record() {
  record_.Clear();
}
inline const ::Pro::StoreRecord_Record& StoreRecord::record(int index) const {
  return record_.Get(index);
}
inline ::Pro::StoreRecord_Record* StoreRecord::mutable_record(int index) {
  return record_.Mutable(index);
}
inline ::Pro::StoreRecord_Record* StoreRecord::add_record() {
  return record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pro::StoreRecord_Record >&
StoreRecord::record() const {
  return record_;
}
inline ::google::protobuf::RepeatedPtrField< ::Pro::StoreRecord_Record >*
StoreRecord::mutable_record() {
  return &record_;
}

// -------------------------------------------------------------------

// PlayerStore

// repeated .Pro.Store store = 1;
inline int PlayerStore::store_size() const {
  return store_.size();
}
inline void PlayerStore::clear_store() {
  store_.Clear();
}
inline const ::Pro::Store& PlayerStore::store(int index) const {
  return store_.Get(index);
}
inline ::Pro::Store* PlayerStore::mutable_store(int index) {
  return store_.Mutable(index);
}
inline ::Pro::Store* PlayerStore::add_store() {
  return store_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pro::Store >&
PlayerStore::store() const {
  return store_;
}
inline ::google::protobuf::RepeatedPtrField< ::Pro::Store >*
PlayerStore::mutable_store() {
  return &store_;
}

// repeated .Pro.StoreRecord record = 2;
inline int PlayerStore::record_size() const {
  return record_.size();
}
inline void PlayerStore::clear_record() {
  record_.Clear();
}
inline const ::Pro::StoreRecord& PlayerStore::record(int index) const {
  return record_.Get(index);
}
inline ::Pro::StoreRecord* PlayerStore::mutable_record(int index) {
  return record_.Mutable(index);
}
inline ::Pro::StoreRecord* PlayerStore::add_record() {
  return record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pro::StoreRecord >&
PlayerStore::record() const {
  return record_;
}
inline ::google::protobuf::RepeatedPtrField< ::Pro::StoreRecord >*
PlayerStore::mutable_record() {
  return &record_;
}

// -------------------------------------------------------------------

// PlayerData

// optional uint32 id = 1;
inline bool PlayerData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 PlayerData::id() const {
  return id_;
}
inline void PlayerData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional .Pro.PlayerBase base = 2;
inline bool PlayerData::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerData::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerData::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerData::clear_base() {
  if (base_ != NULL) base_->::Pro::PlayerBase::Clear();
  clear_has_base();
}
inline const ::Pro::PlayerBase& PlayerData::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::Pro::PlayerBase* PlayerData::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::Pro::PlayerBase;
  return base_;
}
inline ::Pro::PlayerBase* PlayerData::release_base() {
  clear_has_base();
  ::Pro::PlayerBase* temp = base_;
  base_ = NULL;
  return temp;
}
inline void PlayerData::set_allocated_base(::Pro::PlayerBase* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
}

// optional .Pro.PlayerItems items = 3;
inline bool PlayerData::has_items() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerData::set_has_items() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerData::clear_has_items() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerData::clear_items() {
  if (items_ != NULL) items_->::Pro::PlayerItems::Clear();
  clear_has_items();
}
inline const ::Pro::PlayerItems& PlayerData::items() const {
  return items_ != NULL ? *items_ : *default_instance_->items_;
}
inline ::Pro::PlayerItems* PlayerData::mutable_items() {
  set_has_items();
  if (items_ == NULL) items_ = new ::Pro::PlayerItems;
  return items_;
}
inline ::Pro::PlayerItems* PlayerData::release_items() {
  clear_has_items();
  ::Pro::PlayerItems* temp = items_;
  items_ = NULL;
  return temp;
}
inline void PlayerData::set_allocated_items(::Pro::PlayerItems* items) {
  delete items_;
  items_ = items;
  if (items) {
    set_has_items();
  } else {
    clear_has_items();
  }
}

// optional .Pro.PlayerQuest quest = 4;
inline bool PlayerData::has_quest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerData::set_has_quest() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerData::clear_has_quest() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerData::clear_quest() {
  if (quest_ != NULL) quest_->::Pro::PlayerQuest::Clear();
  clear_has_quest();
}
inline const ::Pro::PlayerQuest& PlayerData::quest() const {
  return quest_ != NULL ? *quest_ : *default_instance_->quest_;
}
inline ::Pro::PlayerQuest* PlayerData::mutable_quest() {
  set_has_quest();
  if (quest_ == NULL) quest_ = new ::Pro::PlayerQuest;
  return quest_;
}
inline ::Pro::PlayerQuest* PlayerData::release_quest() {
  clear_has_quest();
  ::Pro::PlayerQuest* temp = quest_;
  quest_ = NULL;
  return temp;
}
inline void PlayerData::set_allocated_quest(::Pro::PlayerQuest* quest) {
  delete quest_;
  quest_ = quest;
  if (quest) {
    set_has_quest();
  } else {
    clear_has_quest();
  }
}

// optional .Pro.PlayerDaily daily = 5;
inline bool PlayerData::has_daily() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerData::set_has_daily() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerData::clear_has_daily() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerData::clear_daily() {
  if (daily_ != NULL) daily_->::Pro::PlayerDaily::Clear();
  clear_has_daily();
}
inline const ::Pro::PlayerDaily& PlayerData::daily() const {
  return daily_ != NULL ? *daily_ : *default_instance_->daily_;
}
inline ::Pro::PlayerDaily* PlayerData::mutable_daily() {
  set_has_daily();
  if (daily_ == NULL) daily_ = new ::Pro::PlayerDaily;
  return daily_;
}
inline ::Pro::PlayerDaily* PlayerData::release_daily() {
  clear_has_daily();
  ::Pro::PlayerDaily* temp = daily_;
  daily_ = NULL;
  return temp;
}
inline void PlayerData::set_allocated_daily(::Pro::PlayerDaily* daily) {
  delete daily_;
  daily_ = daily;
  if (daily) {
    set_has_daily();
  } else {
    clear_has_daily();
  }
}

// optional .Pro.PlayerStore store = 6;
inline bool PlayerData::has_store() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerData::set_has_store() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerData::clear_has_store() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerData::clear_store() {
  if (store_ != NULL) store_->::Pro::PlayerStore::Clear();
  clear_has_store();
}
inline const ::Pro::PlayerStore& PlayerData::store() const {
  return store_ != NULL ? *store_ : *default_instance_->store_;
}
inline ::Pro::PlayerStore* PlayerData::mutable_store() {
  set_has_store();
  if (store_ == NULL) store_ = new ::Pro::PlayerStore;
  return store_;
}
inline ::Pro::PlayerStore* PlayerData::release_store() {
  clear_has_store();
  ::Pro::PlayerStore* temp = store_;
  store_ = NULL;
  return temp;
}
inline void PlayerData::set_allocated_store(::Pro::PlayerStore* store) {
  delete store_;
  store_ = store;
  if (store) {
    set_has_store();
  } else {
    clear_has_store();
  }
}

// -------------------------------------------------------------------

// PlayerSync_ItemSyncData_ItemSync

// optional .Pro.Item item = 1;
inline bool PlayerSync_ItemSyncData_ItemSync::has_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerSync_ItemSyncData_ItemSync::set_has_item() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerSync_ItemSyncData_ItemSync::clear_has_item() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerSync_ItemSyncData_ItemSync::clear_item() {
  if (item_ != NULL) item_->::Pro::Item::Clear();
  clear_has_item();
}
inline const ::Pro::Item& PlayerSync_ItemSyncData_ItemSync::item() const {
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::Pro::Item* PlayerSync_ItemSyncData_ItemSync::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::Pro::Item;
  return item_;
}
inline ::Pro::Item* PlayerSync_ItemSyncData_ItemSync::release_item() {
  clear_has_item();
  ::Pro::Item* temp = item_;
  item_ = NULL;
  return temp;
}
inline void PlayerSync_ItemSyncData_ItemSync::set_allocated_item(::Pro::Item* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
}

// optional .Pro.PlayerSync.Action action = 2;
inline bool PlayerSync_ItemSyncData_ItemSync::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerSync_ItemSyncData_ItemSync::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerSync_ItemSyncData_ItemSync::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerSync_ItemSyncData_ItemSync::clear_action() {
  action_ = 1;
  clear_has_action();
}
inline ::Pro::PlayerSync_Action PlayerSync_ItemSyncData_ItemSync::action() const {
  return static_cast< ::Pro::PlayerSync_Action >(action_);
}
inline void PlayerSync_ItemSyncData_ItemSync::set_action(::Pro::PlayerSync_Action value) {
  assert(::Pro::PlayerSync_Action_IsValid(value));
  set_has_action();
  action_ = value;
}

// -------------------------------------------------------------------

// PlayerSync_ItemSyncData

// repeated .Pro.PlayerSync.ItemSyncData data = 1;
inline int PlayerSync_ItemSyncData::data_size() const {
  return data_.size();
}
inline void PlayerSync_ItemSyncData::clear_data() {
  data_.Clear();
}
inline const ::Pro::PlayerSync_ItemSyncData& PlayerSync_ItemSyncData::data(int index) const {
  return data_.Get(index);
}
inline ::Pro::PlayerSync_ItemSyncData* PlayerSync_ItemSyncData::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::Pro::PlayerSync_ItemSyncData* PlayerSync_ItemSyncData::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pro::PlayerSync_ItemSyncData >&
PlayerSync_ItemSyncData::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Pro::PlayerSync_ItemSyncData >*
PlayerSync_ItemSyncData::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// PlayerSync_QuestSyncData_QuestSync

// optional uint32 Quest = 1;
inline bool PlayerSync_QuestSyncData_QuestSync::has_quest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerSync_QuestSyncData_QuestSync::set_has_quest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerSync_QuestSyncData_QuestSync::clear_has_quest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerSync_QuestSyncData_QuestSync::clear_quest() {
  quest_ = 0u;
  clear_has_quest();
}
inline ::google::protobuf::uint32 PlayerSync_QuestSyncData_QuestSync::quest() const {
  return quest_;
}
inline void PlayerSync_QuestSyncData_QuestSync::set_quest(::google::protobuf::uint32 value) {
  set_has_quest();
  quest_ = value;
}

// optional .Pro.PlayerSync.Action action = 2;
inline bool PlayerSync_QuestSyncData_QuestSync::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerSync_QuestSyncData_QuestSync::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerSync_QuestSyncData_QuestSync::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerSync_QuestSyncData_QuestSync::clear_action() {
  action_ = 1;
  clear_has_action();
}
inline ::Pro::PlayerSync_Action PlayerSync_QuestSyncData_QuestSync::action() const {
  return static_cast< ::Pro::PlayerSync_Action >(action_);
}
inline void PlayerSync_QuestSyncData_QuestSync::set_action(::Pro::PlayerSync_Action value) {
  assert(::Pro::PlayerSync_Action_IsValid(value));
  set_has_action();
  action_ = value;
}

// -------------------------------------------------------------------

// PlayerSync_QuestSyncData

// repeated .Pro.PlayerSync.QuestSyncData.QuestSync data = 1;
inline int PlayerSync_QuestSyncData::data_size() const {
  return data_.size();
}
inline void PlayerSync_QuestSyncData::clear_data() {
  data_.Clear();
}
inline const ::Pro::PlayerSync_QuestSyncData_QuestSync& PlayerSync_QuestSyncData::data(int index) const {
  return data_.Get(index);
}
inline ::Pro::PlayerSync_QuestSyncData_QuestSync* PlayerSync_QuestSyncData::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::Pro::PlayerSync_QuestSyncData_QuestSync* PlayerSync_QuestSyncData::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pro::PlayerSync_QuestSyncData_QuestSync >&
PlayerSync_QuestSyncData::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Pro::PlayerSync_QuestSyncData_QuestSync >*
PlayerSync_QuestSyncData::mutable_data() {
  return &data_;
}

// repeated uint32 done = 2;
inline int PlayerSync_QuestSyncData::done_size() const {
  return done_.size();
}
inline void PlayerSync_QuestSyncData::clear_done() {
  done_.Clear();
}
inline ::google::protobuf::uint32 PlayerSync_QuestSyncData::done(int index) const {
  return done_.Get(index);
}
inline void PlayerSync_QuestSyncData::set_done(int index, ::google::protobuf::uint32 value) {
  done_.Set(index, value);
}
inline void PlayerSync_QuestSyncData::add_done(::google::protobuf::uint32 value) {
  done_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PlayerSync_QuestSyncData::done() const {
  return done_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PlayerSync_QuestSyncData::mutable_done() {
  return &done_;
}

// repeated .Pro.PlayerSync.QuestSyncData.QuestSync achievement = 3;
inline int PlayerSync_QuestSyncData::achievement_size() const {
  return achievement_.size();
}
inline void PlayerSync_QuestSyncData::clear_achievement() {
  achievement_.Clear();
}
inline const ::Pro::PlayerSync_QuestSyncData_QuestSync& PlayerSync_QuestSyncData::achievement(int index) const {
  return achievement_.Get(index);
}
inline ::Pro::PlayerSync_QuestSyncData_QuestSync* PlayerSync_QuestSyncData::mutable_achievement(int index) {
  return achievement_.Mutable(index);
}
inline ::Pro::PlayerSync_QuestSyncData_QuestSync* PlayerSync_QuestSyncData::add_achievement() {
  return achievement_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pro::PlayerSync_QuestSyncData_QuestSync >&
PlayerSync_QuestSyncData::achievement() const {
  return achievement_;
}
inline ::google::protobuf::RepeatedPtrField< ::Pro::PlayerSync_QuestSyncData_QuestSync >*
PlayerSync_QuestSyncData::mutable_achievement() {
  return &achievement_;
}

// repeated uint32 doneAchievement = 4;
inline int PlayerSync_QuestSyncData::doneachievement_size() const {
  return doneachievement_.size();
}
inline void PlayerSync_QuestSyncData::clear_doneachievement() {
  doneachievement_.Clear();
}
inline ::google::protobuf::uint32 PlayerSync_QuestSyncData::doneachievement(int index) const {
  return doneachievement_.Get(index);
}
inline void PlayerSync_QuestSyncData::set_doneachievement(int index, ::google::protobuf::uint32 value) {
  doneachievement_.Set(index, value);
}
inline void PlayerSync_QuestSyncData::add_doneachievement(::google::protobuf::uint32 value) {
  doneachievement_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PlayerSync_QuestSyncData::doneachievement() const {
  return doneachievement_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PlayerSync_QuestSyncData::mutable_doneachievement() {
  return &doneachievement_;
}

// -------------------------------------------------------------------

// PlayerSync_DailySyncData

// optional bool bSync = 1;
inline bool PlayerSync_DailySyncData::has_bsync() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerSync_DailySyncData::set_has_bsync() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerSync_DailySyncData::clear_has_bsync() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerSync_DailySyncData::clear_bsync() {
  bsync_ = false;
  clear_has_bsync();
}
inline bool PlayerSync_DailySyncData::bsync() const {
  return bsync_;
}
inline void PlayerSync_DailySyncData::set_bsync(bool value) {
  set_has_bsync();
  bsync_ = value;
}

// optional .Pro.PlayerDaily data = 2;
inline bool PlayerSync_DailySyncData::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerSync_DailySyncData::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerSync_DailySyncData::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerSync_DailySyncData::clear_data() {
  if (data_ != NULL) data_->::Pro::PlayerDaily::Clear();
  clear_has_data();
}
inline const ::Pro::PlayerDaily& PlayerSync_DailySyncData::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Pro::PlayerDaily* PlayerSync_DailySyncData::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Pro::PlayerDaily;
  return data_;
}
inline ::Pro::PlayerDaily* PlayerSync_DailySyncData::release_data() {
  clear_has_data();
  ::Pro::PlayerDaily* temp = data_;
  data_ = NULL;
  return temp;
}
inline void PlayerSync_DailySyncData::set_allocated_data(::Pro::PlayerDaily* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// PlayerSync_StoreSyncData_StoreRecordSync

// optional .Pro.PlayerSync.Action action = 1;
inline bool PlayerSync_StoreSyncData_StoreRecordSync::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerSync_StoreSyncData_StoreRecordSync::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerSync_StoreSyncData_StoreRecordSync::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerSync_StoreSyncData_StoreRecordSync::clear_action() {
  action_ = 1;
  clear_has_action();
}
inline ::Pro::PlayerSync_Action PlayerSync_StoreSyncData_StoreRecordSync::action() const {
  return static_cast< ::Pro::PlayerSync_Action >(action_);
}
inline void PlayerSync_StoreSyncData_StoreRecordSync::set_action(::Pro::PlayerSync_Action value) {
  assert(::Pro::PlayerSync_Action_IsValid(value));
  set_has_action();
  action_ = value;
}

// repeated .Pro.StoreRecord.Record record = 2;
inline int PlayerSync_StoreSyncData_StoreRecordSync::record_size() const {
  return record_.size();
}
inline void PlayerSync_StoreSyncData_StoreRecordSync::clear_record() {
  record_.Clear();
}
inline const ::Pro::StoreRecord_Record& PlayerSync_StoreSyncData_StoreRecordSync::record(int index) const {
  return record_.Get(index);
}
inline ::Pro::StoreRecord_Record* PlayerSync_StoreSyncData_StoreRecordSync::mutable_record(int index) {
  return record_.Mutable(index);
}
inline ::Pro::StoreRecord_Record* PlayerSync_StoreSyncData_StoreRecordSync::add_record() {
  return record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pro::StoreRecord_Record >&
PlayerSync_StoreSyncData_StoreRecordSync::record() const {
  return record_;
}
inline ::google::protobuf::RepeatedPtrField< ::Pro::StoreRecord_Record >*
PlayerSync_StoreSyncData_StoreRecordSync::mutable_record() {
  return &record_;
}

// optional .Pro.Store.StoreType type = 3;
inline bool PlayerSync_StoreSyncData_StoreRecordSync::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerSync_StoreSyncData_StoreRecordSync::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerSync_StoreSyncData_StoreRecordSync::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerSync_StoreSyncData_StoreRecordSync::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Pro::Store_StoreType PlayerSync_StoreSyncData_StoreRecordSync::type() const {
  return static_cast< ::Pro::Store_StoreType >(type_);
}
inline void PlayerSync_StoreSyncData_StoreRecordSync::set_type(::Pro::Store_StoreType value) {
  assert(::Pro::Store_StoreType_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// PlayerSync_StoreSyncData

// repeated .Pro.PlayerSync.StoreSyncData.StoreRecordSync record = 1;
inline int PlayerSync_StoreSyncData::record_size() const {
  return record_.size();
}
inline void PlayerSync_StoreSyncData::clear_record() {
  record_.Clear();
}
inline const ::Pro::PlayerSync_StoreSyncData_StoreRecordSync& PlayerSync_StoreSyncData::record(int index) const {
  return record_.Get(index);
}
inline ::Pro::PlayerSync_StoreSyncData_StoreRecordSync* PlayerSync_StoreSyncData::mutable_record(int index) {
  return record_.Mutable(index);
}
inline ::Pro::PlayerSync_StoreSyncData_StoreRecordSync* PlayerSync_StoreSyncData::add_record() {
  return record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pro::PlayerSync_StoreSyncData_StoreRecordSync >&
PlayerSync_StoreSyncData::record() const {
  return record_;
}
inline ::google::protobuf::RepeatedPtrField< ::Pro::PlayerSync_StoreSyncData_StoreRecordSync >*
PlayerSync_StoreSyncData::mutable_record() {
  return &record_;
}

// repeated .Pro.Store store = 2;
inline int PlayerSync_StoreSyncData::store_size() const {
  return store_.size();
}
inline void PlayerSync_StoreSyncData::clear_store() {
  store_.Clear();
}
inline const ::Pro::Store& PlayerSync_StoreSyncData::store(int index) const {
  return store_.Get(index);
}
inline ::Pro::Store* PlayerSync_StoreSyncData::mutable_store(int index) {
  return store_.Mutable(index);
}
inline ::Pro::Store* PlayerSync_StoreSyncData::add_store() {
  return store_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pro::Store >&
PlayerSync_StoreSyncData::store() const {
  return store_;
}
inline ::google::protobuf::RepeatedPtrField< ::Pro::Store >*
PlayerSync_StoreSyncData::mutable_store() {
  return &store_;
}

// -------------------------------------------------------------------

// PlayerSync

// optional .Pro.PlayerBase base = 1;
inline bool PlayerSync::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerSync::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerSync::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerSync::clear_base() {
  if (base_ != NULL) base_->::Pro::PlayerBase::Clear();
  clear_has_base();
}
inline const ::Pro::PlayerBase& PlayerSync::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::Pro::PlayerBase* PlayerSync::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::Pro::PlayerBase;
  return base_;
}
inline ::Pro::PlayerBase* PlayerSync::release_base() {
  clear_has_base();
  ::Pro::PlayerBase* temp = base_;
  base_ = NULL;
  return temp;
}
inline void PlayerSync::set_allocated_base(::Pro::PlayerBase* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
}

// optional .Pro.PlayerSync.ItemSyncData item = 2;
inline bool PlayerSync::has_item() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerSync::set_has_item() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerSync::clear_has_item() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerSync::clear_item() {
  if (item_ != NULL) item_->::Pro::PlayerSync_ItemSyncData::Clear();
  clear_has_item();
}
inline const ::Pro::PlayerSync_ItemSyncData& PlayerSync::item() const {
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::Pro::PlayerSync_ItemSyncData* PlayerSync::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::Pro::PlayerSync_ItemSyncData;
  return item_;
}
inline ::Pro::PlayerSync_ItemSyncData* PlayerSync::release_item() {
  clear_has_item();
  ::Pro::PlayerSync_ItemSyncData* temp = item_;
  item_ = NULL;
  return temp;
}
inline void PlayerSync::set_allocated_item(::Pro::PlayerSync_ItemSyncData* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
}

// optional .Pro.PlayerSync.QuestSyncData quest = 3;
inline bool PlayerSync::has_quest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerSync::set_has_quest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerSync::clear_has_quest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerSync::clear_quest() {
  if (quest_ != NULL) quest_->::Pro::PlayerSync_QuestSyncData::Clear();
  clear_has_quest();
}
inline const ::Pro::PlayerSync_QuestSyncData& PlayerSync::quest() const {
  return quest_ != NULL ? *quest_ : *default_instance_->quest_;
}
inline ::Pro::PlayerSync_QuestSyncData* PlayerSync::mutable_quest() {
  set_has_quest();
  if (quest_ == NULL) quest_ = new ::Pro::PlayerSync_QuestSyncData;
  return quest_;
}
inline ::Pro::PlayerSync_QuestSyncData* PlayerSync::release_quest() {
  clear_has_quest();
  ::Pro::PlayerSync_QuestSyncData* temp = quest_;
  quest_ = NULL;
  return temp;
}
inline void PlayerSync::set_allocated_quest(::Pro::PlayerSync_QuestSyncData* quest) {
  delete quest_;
  quest_ = quest;
  if (quest) {
    set_has_quest();
  } else {
    clear_has_quest();
  }
}

// optional .Pro.PlayerSync.DailySyncData daily = 4;
inline bool PlayerSync::has_daily() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerSync::set_has_daily() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerSync::clear_has_daily() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerSync::clear_daily() {
  if (daily_ != NULL) daily_->::Pro::PlayerSync_DailySyncData::Clear();
  clear_has_daily();
}
inline const ::Pro::PlayerSync_DailySyncData& PlayerSync::daily() const {
  return daily_ != NULL ? *daily_ : *default_instance_->daily_;
}
inline ::Pro::PlayerSync_DailySyncData* PlayerSync::mutable_daily() {
  set_has_daily();
  if (daily_ == NULL) daily_ = new ::Pro::PlayerSync_DailySyncData;
  return daily_;
}
inline ::Pro::PlayerSync_DailySyncData* PlayerSync::release_daily() {
  clear_has_daily();
  ::Pro::PlayerSync_DailySyncData* temp = daily_;
  daily_ = NULL;
  return temp;
}
inline void PlayerSync::set_allocated_daily(::Pro::PlayerSync_DailySyncData* daily) {
  delete daily_;
  daily_ = daily;
  if (daily) {
    set_has_daily();
  } else {
    clear_has_daily();
  }
}

// optional .Pro.PlayerSync.StoreSyncData store = 5;
inline bool PlayerSync::has_store() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerSync::set_has_store() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerSync::clear_has_store() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerSync::clear_store() {
  if (store_ != NULL) store_->::Pro::PlayerSync_StoreSyncData::Clear();
  clear_has_store();
}
inline const ::Pro::PlayerSync_StoreSyncData& PlayerSync::store() const {
  return store_ != NULL ? *store_ : *default_instance_->store_;
}
inline ::Pro::PlayerSync_StoreSyncData* PlayerSync::mutable_store() {
  set_has_store();
  if (store_ == NULL) store_ = new ::Pro::PlayerSync_StoreSyncData;
  return store_;
}
inline ::Pro::PlayerSync_StoreSyncData* PlayerSync::release_store() {
  clear_has_store();
  ::Pro::PlayerSync_StoreSyncData* temp = store_;
  store_ = NULL;
  return temp;
}
inline void PlayerSync::set_allocated_store(::Pro::PlayerSync_StoreSyncData* store) {
  delete store_;
  store_ = store;
  if (store) {
    set_has_store();
  } else {
    clear_has_store();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pro

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Pro::Store_StoreType>() {
  return ::Pro::Store_StoreType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Pro::PlayerSync_Action>() {
  return ::Pro::PlayerSync_Action_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PlayerDataS2C_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerRegisterS2S.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ServerRegisterS2S.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Pro {

namespace {

const ::google::protobuf::Descriptor* ServerRegisterS2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerRegisterS2S_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerRegisterS2S_ServerType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ServerRegisterS2S_2eproto() {
  protobuf_AddDesc_ServerRegisterS2S_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ServerRegisterS2S.proto");
  GOOGLE_CHECK(file != NULL);
  ServerRegisterS2S_descriptor_ = file->message_type(0);
  static const int ServerRegisterS2S_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerRegisterS2S, server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerRegisterS2S, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerRegisterS2S, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerRegisterS2S, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerRegisterS2S, timezone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerRegisterS2S, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerRegisterS2S, type_),
  };
  ServerRegisterS2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerRegisterS2S_descriptor_,
      ServerRegisterS2S::default_instance_,
      ServerRegisterS2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerRegisterS2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerRegisterS2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerRegisterS2S));
  ServerRegisterS2S_ServerType_descriptor_ = ServerRegisterS2S_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ServerRegisterS2S_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerRegisterS2S_descriptor_, &ServerRegisterS2S::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ServerRegisterS2S_2eproto() {
  delete ServerRegisterS2S::default_instance_;
  delete ServerRegisterS2S_reflection_;
}

void protobuf_AddDesc_ServerRegisterS2S_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027ServerRegisterS2S.proto\022\003Pro\"\317\001\n\021Serve"
    "rRegisterS2S\022\016\n\006server\030\001 \001(\t\022\014\n\004port\030\002 \001"
    "(\005\022\016\n\006online\030\003 \001(\005\022\017\n\007address\030\004 \001(\t\022\020\n\010t"
    "imeZone\030\005 \001(\t\022\014\n\004time\030\006 \001(\r\022/\n\004type\030\007 \001("
    "\0162!.Pro.ServerRegisterS2S.ServerType\"*\n\n"
    "ServerType\022\010\n\004GATE\020\001\022\010\n\004GAME\020\002\022\010\n\004CELL\020\003", 240);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ServerRegisterS2S.proto", &protobuf_RegisterTypes);
  ServerRegisterS2S::default_instance_ = new ServerRegisterS2S();
  ServerRegisterS2S::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ServerRegisterS2S_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ServerRegisterS2S_2eproto {
  StaticDescriptorInitializer_ServerRegisterS2S_2eproto() {
    protobuf_AddDesc_ServerRegisterS2S_2eproto();
  }
} static_descriptor_initializer_ServerRegisterS2S_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ServerRegisterS2S_ServerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerRegisterS2S_ServerType_descriptor_;
}
bool ServerRegisterS2S_ServerType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ServerRegisterS2S_ServerType ServerRegisterS2S::GATE;
const ServerRegisterS2S_ServerType ServerRegisterS2S::GAME;
const ServerRegisterS2S_ServerType ServerRegisterS2S::CELL;
const ServerRegisterS2S_ServerType ServerRegisterS2S::ServerType_MIN;
const ServerRegisterS2S_ServerType ServerRegisterS2S::ServerType_MAX;
const int ServerRegisterS2S::ServerType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ServerRegisterS2S::kServerFieldNumber;
const int ServerRegisterS2S::kPortFieldNumber;
const int ServerRegisterS2S::kOnlineFieldNumber;
const int ServerRegisterS2S::kAddressFieldNumber;
const int ServerRegisterS2S::kTimeZoneFieldNumber;
const int ServerRegisterS2S::kTimeFieldNumber;
const int ServerRegisterS2S::kTypeFieldNumber;
#endif  // !_MSC_VER

ServerRegisterS2S::ServerRegisterS2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerRegisterS2S::InitAsDefaultInstance() {
}

ServerRegisterS2S::ServerRegisterS2S(const ServerRegisterS2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerRegisterS2S::SharedCtor() {
  _cached_size_ = 0;
  server_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  online_ = 0;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timezone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0u;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerRegisterS2S::~ServerRegisterS2S() {
  SharedDtor();
}

void ServerRegisterS2S::SharedDtor() {
  if (server_ != &::google::protobuf::internal::kEmptyString) {
    delete server_;
  }
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (timezone_ != &::google::protobuf::internal::kEmptyString) {
    delete timezone_;
  }
  if (this != default_instance_) {
  }
}

void ServerRegisterS2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerRegisterS2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerRegisterS2S_descriptor_;
}

const ServerRegisterS2S& ServerRegisterS2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerRegisterS2S_2eproto();
  return *default_instance_;
}

ServerRegisterS2S* ServerRegisterS2S::default_instance_ = NULL;

ServerRegisterS2S* ServerRegisterS2S::New() const {
  return new ServerRegisterS2S;
}

void ServerRegisterS2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server()) {
      if (server_ != &::google::protobuf::internal::kEmptyString) {
        server_->clear();
      }
    }
    port_ = 0;
    online_ = 0;
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    if (has_timezone()) {
      if (timezone_ != &::google::protobuf::internal::kEmptyString) {
        timezone_->clear();
      }
    }
    time_ = 0u;
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerRegisterS2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string server = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server().data(), this->server().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_online;
        break;
      }

      // optional int32 online = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_address;
        break;
      }

      // optional string address = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_timeZone;
        break;
      }

      // optional string timeZone = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timeZone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timezone().data(), this->timezone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint32 time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // optional .Pro.ServerRegisterS2S.ServerType type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Pro::ServerRegisterS2S_ServerType_IsValid(value)) {
            set_type(static_cast< ::Pro::ServerRegisterS2S_ServerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerRegisterS2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string server = 1;
  if (has_server()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server().data(), this->server().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->server(), output);
  }

  // optional int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // optional int32 online = 3;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->online(), output);
  }

  // optional string address = 4;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->address(), output);
  }

  // optional string timeZone = 5;
  if (has_timezone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->timezone(), output);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  // optional .Pro.ServerRegisterS2S.ServerType type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerRegisterS2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string server = 1;
  if (has_server()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server().data(), this->server().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server(), target);
  }

  // optional int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // optional int32 online = 3;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->online(), target);
  }

  // optional string address = 4;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->address(), target);
  }

  // optional string timeZone = 5;
  if (has_timezone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->timezone(), target);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  // optional .Pro.ServerRegisterS2S.ServerType type = 7;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerRegisterS2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server());
    }

    // optional int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional int32 online = 3;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online());
    }

    // optional string address = 4;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional string timeZone = 5;
    if (has_timezone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timezone());
    }

    // optional uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional .Pro.ServerRegisterS2S.ServerType type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerRegisterS2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerRegisterS2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerRegisterS2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerRegisterS2S::MergeFrom(const ServerRegisterS2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server()) {
      set_server(from.server());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_timezone()) {
      set_timezone(from.timezone());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerRegisterS2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerRegisterS2S::CopyFrom(const ServerRegisterS2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerRegisterS2S::IsInitialized() const {

  return true;
}

void ServerRegisterS2S::Swap(ServerRegisterS2S* other) {
  if (other != this) {
    std::swap(server_, other->server_);
    std::swap(port_, other->port_);
    std::swap(online_, other->online_);
    std::swap(address_, other->address_);
    std::swap(timezone_, other->timezone_);
    std::swap(time_, other->time_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerRegisterS2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerRegisterS2S_descriptor_;
  metadata.reflection = ServerRegisterS2S_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pro

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GateS2C.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GateS2C.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Pro {

namespace {

const ::google::protobuf::Descriptor* GateS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateS2C_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GateS2C_GateState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GateS2C_2eproto() {
  protobuf_AddDesc_GateS2C_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GateS2C.proto");
  GOOGLE_CHECK(file != NULL);
  GateS2C_descriptor_ = file->message_type(0);
  static const int GateS2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateS2C, gate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateS2C, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateS2C, state_),
  };
  GateS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GateS2C_descriptor_,
      GateS2C::default_instance_,
      GateS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GateS2C));
  GateS2C_GateState_descriptor_ = GateS2C_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GateS2C_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GateS2C_descriptor_, &GateS2C::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GateS2C_2eproto() {
  delete GateS2C::default_instance_;
  delete GateS2C_reflection_;
}

void protobuf_AddDesc_GateS2C_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rGateS2C.proto\022\003Pro\"s\n\007GateS2C\022\014\n\004gate\030"
    "\001 \001(\t\022\014\n\004port\030\002 \001(\r\022%\n\005state\030\003 \001(\0162\026.Pro"
    ".GateS2C.GateState\"%\n\tGateState\022\006\n\002OK\020\001\022"
    "\020\n\014SERVER_CLOSE\020\002", 137);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GateS2C.proto", &protobuf_RegisterTypes);
  GateS2C::default_instance_ = new GateS2C();
  GateS2C::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GateS2C_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GateS2C_2eproto {
  StaticDescriptorInitializer_GateS2C_2eproto() {
    protobuf_AddDesc_GateS2C_2eproto();
  }
} static_descriptor_initializer_GateS2C_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* GateS2C_GateState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateS2C_GateState_descriptor_;
}
bool GateS2C_GateState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GateS2C_GateState GateS2C::OK;
const GateS2C_GateState GateS2C::SERVER_CLOSE;
const GateS2C_GateState GateS2C::GateState_MIN;
const GateS2C_GateState GateS2C::GateState_MAX;
const int GateS2C::GateState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GateS2C::kGateFieldNumber;
const int GateS2C::kPortFieldNumber;
const int GateS2C::kStateFieldNumber;
#endif  // !_MSC_VER

GateS2C::GateS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GateS2C::InitAsDefaultInstance() {
}

GateS2C::GateS2C(const GateS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GateS2C::SharedCtor() {
  _cached_size_ = 0;
  gate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  state_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GateS2C::~GateS2C() {
  SharedDtor();
}

void GateS2C::SharedDtor() {
  if (gate_ != &::google::protobuf::internal::kEmptyString) {
    delete gate_;
  }
  if (this != default_instance_) {
  }
}

void GateS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateS2C_descriptor_;
}

const GateS2C& GateS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GateS2C_2eproto();
  return *default_instance_;
}

GateS2C* GateS2C::default_instance_ = NULL;

GateS2C* GateS2C::New() const {
  return new GateS2C;
}

void GateS2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gate()) {
      if (gate_ != &::google::protobuf::internal::kEmptyString) {
        gate_->clear();
      }
    }
    port_ = 0u;
    state_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GateS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gate().data(), this->gate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional uint32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional .Pro.GateS2C.GateState state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Pro::GateS2C_GateState_IsValid(value)) {
            set_state(static_cast< ::Pro::GateS2C_GateState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GateS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string gate = 1;
  if (has_gate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gate().data(), this->gate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gate(), output);
  }

  // optional uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // optional .Pro.GateS2C.GateState state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GateS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string gate = 1;
  if (has_gate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gate().data(), this->gate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gate(), target);
  }

  // optional uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // optional .Pro.GateS2C.GateState state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GateS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gate = 1;
    if (has_gate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gate());
    }

    // optional uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional .Pro.GateS2C.GateState state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GateS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GateS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateS2C::MergeFrom(const GateS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gate()) {
      set_gate(from.gate());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GateS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateS2C::CopyFrom(const GateS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateS2C::IsInitialized() const {

  return true;
}

void GateS2C::Swap(GateS2C* other) {
  if (other != this) {
    std::swap(gate_, other->gate_);
    std::swap(port_, other->port_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GateS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateS2C_descriptor_;
  metadata.reflection = GateS2C_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pro

// @@protoc_insertion_point(global_scope)

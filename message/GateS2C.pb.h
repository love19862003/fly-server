// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GateS2C.proto

#ifndef PROTOBUF_GateS2C_2eproto__INCLUDED
#define PROTOBUF_GateS2C_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Pro {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GateS2C_2eproto();
void protobuf_AssignDesc_GateS2C_2eproto();
void protobuf_ShutdownFile_GateS2C_2eproto();

class GateS2C;

enum GateS2C_GateState {
  GateS2C_GateState_OK = 1,
  GateS2C_GateState_SERVER_CLOSE = 2
};
bool GateS2C_GateState_IsValid(int value);
const GateS2C_GateState GateS2C_GateState_GateState_MIN = GateS2C_GateState_OK;
const GateS2C_GateState GateS2C_GateState_GateState_MAX = GateS2C_GateState_SERVER_CLOSE;
const int GateS2C_GateState_GateState_ARRAYSIZE = GateS2C_GateState_GateState_MAX + 1;

const ::google::protobuf::EnumDescriptor* GateS2C_GateState_descriptor();
inline const ::std::string& GateS2C_GateState_Name(GateS2C_GateState value) {
  return ::google::protobuf::internal::NameOfEnum(
    GateS2C_GateState_descriptor(), value);
}
inline bool GateS2C_GateState_Parse(
    const ::std::string& name, GateS2C_GateState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GateS2C_GateState>(
    GateS2C_GateState_descriptor(), name, value);
}
// ===================================================================

class GateS2C : public ::google::protobuf::Message {
 public:
  GateS2C();
  virtual ~GateS2C();

  GateS2C(const GateS2C& from);

  inline GateS2C& operator=(const GateS2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateS2C& default_instance();

  void Swap(GateS2C* other);

  // implements Message ----------------------------------------------

  GateS2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateS2C& from);
  void MergeFrom(const GateS2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GateS2C_GateState GateState;
  static const GateState OK = GateS2C_GateState_OK;
  static const GateState SERVER_CLOSE = GateS2C_GateState_SERVER_CLOSE;
  static inline bool GateState_IsValid(int value) {
    return GateS2C_GateState_IsValid(value);
  }
  static const GateState GateState_MIN =
    GateS2C_GateState_GateState_MIN;
  static const GateState GateState_MAX =
    GateS2C_GateState_GateState_MAX;
  static const int GateState_ARRAYSIZE =
    GateS2C_GateState_GateState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GateState_descriptor() {
    return GateS2C_GateState_descriptor();
  }
  static inline const ::std::string& GateState_Name(GateState value) {
    return GateS2C_GateState_Name(value);
  }
  static inline bool GateState_Parse(const ::std::string& name,
      GateState* value) {
    return GateS2C_GateState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string gate = 1;
  inline bool has_gate() const;
  inline void clear_gate();
  static const int kGateFieldNumber = 1;
  inline const ::std::string& gate() const;
  inline void set_gate(const ::std::string& value);
  inline void set_gate(const char* value);
  inline void set_gate(const char* value, size_t size);
  inline ::std::string* mutable_gate();
  inline ::std::string* release_gate();
  inline void set_allocated_gate(::std::string* gate);

  // optional uint32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // optional .Pro.GateS2C.GateState state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::Pro::GateS2C_GateState state() const;
  inline void set_state(::Pro::GateS2C_GateState value);

  // @@protoc_insertion_point(class_scope:Pro.GateS2C)
 private:
  inline void set_has_gate();
  inline void clear_has_gate();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* gate_;
  ::google::protobuf::uint32 port_;
  int state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GateS2C_2eproto();
  friend void protobuf_AssignDesc_GateS2C_2eproto();
  friend void protobuf_ShutdownFile_GateS2C_2eproto();

  void InitAsDefaultInstance();
  static GateS2C* default_instance_;
};
// ===================================================================


// ===================================================================

// GateS2C

// optional string gate = 1;
inline bool GateS2C::has_gate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GateS2C::set_has_gate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GateS2C::clear_has_gate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GateS2C::clear_gate() {
  if (gate_ != &::google::protobuf::internal::kEmptyString) {
    gate_->clear();
  }
  clear_has_gate();
}
inline const ::std::string& GateS2C::gate() const {
  return *gate_;
}
inline void GateS2C::set_gate(const ::std::string& value) {
  set_has_gate();
  if (gate_ == &::google::protobuf::internal::kEmptyString) {
    gate_ = new ::std::string;
  }
  gate_->assign(value);
}
inline void GateS2C::set_gate(const char* value) {
  set_has_gate();
  if (gate_ == &::google::protobuf::internal::kEmptyString) {
    gate_ = new ::std::string;
  }
  gate_->assign(value);
}
inline void GateS2C::set_gate(const char* value, size_t size) {
  set_has_gate();
  if (gate_ == &::google::protobuf::internal::kEmptyString) {
    gate_ = new ::std::string;
  }
  gate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GateS2C::mutable_gate() {
  set_has_gate();
  if (gate_ == &::google::protobuf::internal::kEmptyString) {
    gate_ = new ::std::string;
  }
  return gate_;
}
inline ::std::string* GateS2C::release_gate() {
  clear_has_gate();
  if (gate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gate_;
    gate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GateS2C::set_allocated_gate(::std::string* gate) {
  if (gate_ != &::google::protobuf::internal::kEmptyString) {
    delete gate_;
  }
  if (gate) {
    set_has_gate();
    gate_ = gate;
  } else {
    clear_has_gate();
    gate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 port = 2;
inline bool GateS2C::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GateS2C::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GateS2C::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GateS2C::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 GateS2C::port() const {
  return port_;
}
inline void GateS2C::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// optional .Pro.GateS2C.GateState state = 3;
inline bool GateS2C::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GateS2C::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GateS2C::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GateS2C::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ::Pro::GateS2C_GateState GateS2C::state() const {
  return static_cast< ::Pro::GateS2C_GateState >(state_);
}
inline void GateS2C::set_state(::Pro::GateS2C_GateState value) {
  assert(::Pro::GateS2C_GateState_IsValid(value));
  set_has_state();
  state_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pro

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Pro::GateS2C_GateState>() {
  return ::Pro::GateS2C_GateState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GateS2C_2eproto__INCLUDED

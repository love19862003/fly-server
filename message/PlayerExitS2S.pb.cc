// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerExitS2S.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PlayerExitS2S.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Pro {

namespace {

const ::google::protobuf::Descriptor* PlayerExitS2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerExitS2S_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerExitS2S_Reason_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_PlayerExitS2S_2eproto() {
  protobuf_AddDesc_PlayerExitS2S_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PlayerExitS2S.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerExitS2S_descriptor_ = file->message_type(0);
  static const int PlayerExitS2S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerExitS2S, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerExitS2S, server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerExitS2S, session_),
  };
  PlayerExitS2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerExitS2S_descriptor_,
      PlayerExitS2S::default_instance_,
      PlayerExitS2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerExitS2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerExitS2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerExitS2S));
  PlayerExitS2S_Reason_descriptor_ = PlayerExitS2S_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PlayerExitS2S_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerExitS2S_descriptor_, &PlayerExitS2S::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PlayerExitS2S_2eproto() {
  delete PlayerExitS2S::default_instance_;
  delete PlayerExitS2S_reflection_;
}

void protobuf_AddDesc_PlayerExitS2S_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023PlayerExitS2S.proto\022\003Pro\"y\n\rPlayerExit"
    "S2S\022)\n\006reason\030\001 \001(\0162\031.Pro.PlayerExitS2S."
    "Reason\022\016\n\006server\030\003 \001(\t\022\017\n\007session\030\002 \001(\r\""
    "\034\n\006Reason\022\022\n\016Net_DISCONNECT\020\001", 149);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PlayerExitS2S.proto", &protobuf_RegisterTypes);
  PlayerExitS2S::default_instance_ = new PlayerExitS2S();
  PlayerExitS2S::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PlayerExitS2S_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PlayerExitS2S_2eproto {
  StaticDescriptorInitializer_PlayerExitS2S_2eproto() {
    protobuf_AddDesc_PlayerExitS2S_2eproto();
  }
} static_descriptor_initializer_PlayerExitS2S_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* PlayerExitS2S_Reason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerExitS2S_Reason_descriptor_;
}
bool PlayerExitS2S_Reason_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PlayerExitS2S_Reason PlayerExitS2S::Net_DISCONNECT;
const PlayerExitS2S_Reason PlayerExitS2S::Reason_MIN;
const PlayerExitS2S_Reason PlayerExitS2S::Reason_MAX;
const int PlayerExitS2S::Reason_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PlayerExitS2S::kReasonFieldNumber;
const int PlayerExitS2S::kServerFieldNumber;
const int PlayerExitS2S::kSessionFieldNumber;
#endif  // !_MSC_VER

PlayerExitS2S::PlayerExitS2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerExitS2S::InitAsDefaultInstance() {
}

PlayerExitS2S::PlayerExitS2S(const PlayerExitS2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerExitS2S::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 1;
  server_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerExitS2S::~PlayerExitS2S() {
  SharedDtor();
}

void PlayerExitS2S::SharedDtor() {
  if (server_ != &::google::protobuf::internal::kEmptyString) {
    delete server_;
  }
  if (this != default_instance_) {
  }
}

void PlayerExitS2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerExitS2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerExitS2S_descriptor_;
}

const PlayerExitS2S& PlayerExitS2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerExitS2S_2eproto();
  return *default_instance_;
}

PlayerExitS2S* PlayerExitS2S::default_instance_ = NULL;

PlayerExitS2S* PlayerExitS2S::New() const {
  return new PlayerExitS2S;
}

void PlayerExitS2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = 1;
    if (has_server()) {
      if (server_ != &::google::protobuf::internal::kEmptyString) {
        server_->clear();
      }
    }
    session_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerExitS2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Pro.PlayerExitS2S.Reason reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Pro::PlayerExitS2S_Reason_IsValid(value)) {
            set_reason(static_cast< ::Pro::PlayerExitS2S_Reason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_session;
        break;
      }

      // optional uint32 session = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server;
        break;
      }

      // optional string server = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server().data(), this->server().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerExitS2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Pro.PlayerExitS2S.Reason reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reason(), output);
  }

  // optional uint32 session = 2;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->session(), output);
  }

  // optional string server = 3;
  if (has_server()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server().data(), this->server().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->server(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerExitS2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Pro.PlayerExitS2S.Reason reason = 1;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reason(), target);
  }

  // optional uint32 session = 2;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->session(), target);
  }

  // optional string server = 3;
  if (has_server()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server().data(), this->server().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerExitS2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Pro.PlayerExitS2S.Reason reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

    // optional string server = 3;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server());
    }

    // optional uint32 session = 2;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerExitS2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerExitS2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerExitS2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerExitS2S::MergeFrom(const PlayerExitS2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_server()) {
      set_server(from.server());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerExitS2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerExitS2S::CopyFrom(const PlayerExitS2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerExitS2S::IsInitialized() const {

  return true;
}

void PlayerExitS2S::Swap(PlayerExitS2S* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(server_, other->server_);
    std::swap(session_, other->session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerExitS2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerExitS2S_descriptor_;
  metadata.reflection = PlayerExitS2S_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pro

// @@protoc_insertion_point(global_scope)

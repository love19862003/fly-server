// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerExitS2S.proto

#ifndef PROTOBUF_PlayerExitS2S_2eproto__INCLUDED
#define PROTOBUF_PlayerExitS2S_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Pro {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PlayerExitS2S_2eproto();
void protobuf_AssignDesc_PlayerExitS2S_2eproto();
void protobuf_ShutdownFile_PlayerExitS2S_2eproto();

class PlayerExitS2S;

enum PlayerExitS2S_Reason {
  PlayerExitS2S_Reason_Net_DISCONNECT = 1
};
bool PlayerExitS2S_Reason_IsValid(int value);
const PlayerExitS2S_Reason PlayerExitS2S_Reason_Reason_MIN = PlayerExitS2S_Reason_Net_DISCONNECT;
const PlayerExitS2S_Reason PlayerExitS2S_Reason_Reason_MAX = PlayerExitS2S_Reason_Net_DISCONNECT;
const int PlayerExitS2S_Reason_Reason_ARRAYSIZE = PlayerExitS2S_Reason_Reason_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerExitS2S_Reason_descriptor();
inline const ::std::string& PlayerExitS2S_Reason_Name(PlayerExitS2S_Reason value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerExitS2S_Reason_descriptor(), value);
}
inline bool PlayerExitS2S_Reason_Parse(
    const ::std::string& name, PlayerExitS2S_Reason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerExitS2S_Reason>(
    PlayerExitS2S_Reason_descriptor(), name, value);
}
// ===================================================================

class PlayerExitS2S : public ::google::protobuf::Message {
 public:
  PlayerExitS2S();
  virtual ~PlayerExitS2S();

  PlayerExitS2S(const PlayerExitS2S& from);

  inline PlayerExitS2S& operator=(const PlayerExitS2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerExitS2S& default_instance();

  void Swap(PlayerExitS2S* other);

  // implements Message ----------------------------------------------

  PlayerExitS2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerExitS2S& from);
  void MergeFrom(const PlayerExitS2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PlayerExitS2S_Reason Reason;
  static const Reason Net_DISCONNECT = PlayerExitS2S_Reason_Net_DISCONNECT;
  static inline bool Reason_IsValid(int value) {
    return PlayerExitS2S_Reason_IsValid(value);
  }
  static const Reason Reason_MIN =
    PlayerExitS2S_Reason_Reason_MIN;
  static const Reason Reason_MAX =
    PlayerExitS2S_Reason_Reason_MAX;
  static const int Reason_ARRAYSIZE =
    PlayerExitS2S_Reason_Reason_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Reason_descriptor() {
    return PlayerExitS2S_Reason_descriptor();
  }
  static inline const ::std::string& Reason_Name(Reason value) {
    return PlayerExitS2S_Reason_Name(value);
  }
  static inline bool Reason_Parse(const ::std::string& name,
      Reason* value) {
    return PlayerExitS2S_Reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Pro.PlayerExitS2S.Reason reason = 1;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 1;
  inline ::Pro::PlayerExitS2S_Reason reason() const;
  inline void set_reason(::Pro::PlayerExitS2S_Reason value);

  // optional string server = 3;
  inline bool has_server() const;
  inline void clear_server();
  static const int kServerFieldNumber = 3;
  inline const ::std::string& server() const;
  inline void set_server(const ::std::string& value);
  inline void set_server(const char* value);
  inline void set_server(const char* value, size_t size);
  inline ::std::string* mutable_server();
  inline ::std::string* release_server();
  inline void set_allocated_server(::std::string* server);

  // optional uint32 session = 2;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 2;
  inline ::google::protobuf::uint32 session() const;
  inline void set_session(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pro.PlayerExitS2S)
 private:
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_server();
  inline void clear_has_server();
  inline void set_has_session();
  inline void clear_has_session();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* server_;
  int reason_;
  ::google::protobuf::uint32 session_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerExitS2S_2eproto();
  friend void protobuf_AssignDesc_PlayerExitS2S_2eproto();
  friend void protobuf_ShutdownFile_PlayerExitS2S_2eproto();

  void InitAsDefaultInstance();
  static PlayerExitS2S* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerExitS2S

// optional .Pro.PlayerExitS2S.Reason reason = 1;
inline bool PlayerExitS2S::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerExitS2S::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerExitS2S::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerExitS2S::clear_reason() {
  reason_ = 1;
  clear_has_reason();
}
inline ::Pro::PlayerExitS2S_Reason PlayerExitS2S::reason() const {
  return static_cast< ::Pro::PlayerExitS2S_Reason >(reason_);
}
inline void PlayerExitS2S::set_reason(::Pro::PlayerExitS2S_Reason value) {
  assert(::Pro::PlayerExitS2S_Reason_IsValid(value));
  set_has_reason();
  reason_ = value;
}

// optional string server = 3;
inline bool PlayerExitS2S::has_server() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerExitS2S::set_has_server() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerExitS2S::clear_has_server() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerExitS2S::clear_server() {
  if (server_ != &::google::protobuf::internal::kEmptyString) {
    server_->clear();
  }
  clear_has_server();
}
inline const ::std::string& PlayerExitS2S::server() const {
  return *server_;
}
inline void PlayerExitS2S::set_server(const ::std::string& value) {
  set_has_server();
  if (server_ == &::google::protobuf::internal::kEmptyString) {
    server_ = new ::std::string;
  }
  server_->assign(value);
}
inline void PlayerExitS2S::set_server(const char* value) {
  set_has_server();
  if (server_ == &::google::protobuf::internal::kEmptyString) {
    server_ = new ::std::string;
  }
  server_->assign(value);
}
inline void PlayerExitS2S::set_server(const char* value, size_t size) {
  set_has_server();
  if (server_ == &::google::protobuf::internal::kEmptyString) {
    server_ = new ::std::string;
  }
  server_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerExitS2S::mutable_server() {
  set_has_server();
  if (server_ == &::google::protobuf::internal::kEmptyString) {
    server_ = new ::std::string;
  }
  return server_;
}
inline ::std::string* PlayerExitS2S::release_server() {
  clear_has_server();
  if (server_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_;
    server_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerExitS2S::set_allocated_server(::std::string* server) {
  if (server_ != &::google::protobuf::internal::kEmptyString) {
    delete server_;
  }
  if (server) {
    set_has_server();
    server_ = server;
  } else {
    clear_has_server();
    server_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 session = 2;
inline bool PlayerExitS2S::has_session() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerExitS2S::set_has_session() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerExitS2S::clear_has_session() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerExitS2S::clear_session() {
  session_ = 0u;
  clear_has_session();
}
inline ::google::protobuf::uint32 PlayerExitS2S::session() const {
  return session_;
}
inline void PlayerExitS2S::set_session(::google::protobuf::uint32 value) {
  set_has_session();
  session_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pro

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Pro::PlayerExitS2S_Reason>() {
  return ::Pro::PlayerExitS2S_Reason_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PlayerExitS2S_2eproto__INCLUDED

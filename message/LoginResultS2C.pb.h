// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginResultS2C.proto

#ifndef PROTOBUF_LoginResultS2C_2eproto__INCLUDED
#define PROTOBUF_LoginResultS2C_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "PlayerDataS2C.pb.h"
// @@protoc_insertion_point(includes)

namespace Pro {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LoginResultS2C_2eproto();
void protobuf_AssignDesc_LoginResultS2C_2eproto();
void protobuf_ShutdownFile_LoginResultS2C_2eproto();

class LoginResultS2C;

enum LoginResultS2C_Error {
  LoginResultS2C_Error_NO_ERROR_CODE = 1,
  LoginResultS2C_Error_PASSWORD_ERROR = 2,
  LoginResultS2C_Error_LOCKED = 3
};
bool LoginResultS2C_Error_IsValid(int value);
const LoginResultS2C_Error LoginResultS2C_Error_Error_MIN = LoginResultS2C_Error_NO_ERROR_CODE;
const LoginResultS2C_Error LoginResultS2C_Error_Error_MAX = LoginResultS2C_Error_LOCKED;
const int LoginResultS2C_Error_Error_ARRAYSIZE = LoginResultS2C_Error_Error_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoginResultS2C_Error_descriptor();
inline const ::std::string& LoginResultS2C_Error_Name(LoginResultS2C_Error value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoginResultS2C_Error_descriptor(), value);
}
inline bool LoginResultS2C_Error_Parse(
    const ::std::string& name, LoginResultS2C_Error* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoginResultS2C_Error>(
    LoginResultS2C_Error_descriptor(), name, value);
}
// ===================================================================

class LoginResultS2C : public ::google::protobuf::Message {
 public:
  LoginResultS2C();
  virtual ~LoginResultS2C();

  LoginResultS2C(const LoginResultS2C& from);

  inline LoginResultS2C& operator=(const LoginResultS2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResultS2C& default_instance();

  void Swap(LoginResultS2C* other);

  // implements Message ----------------------------------------------

  LoginResultS2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginResultS2C& from);
  void MergeFrom(const LoginResultS2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LoginResultS2C_Error Error;
  static const Error NO_ERROR_CODE = LoginResultS2C_Error_NO_ERROR_CODE;
  static const Error PASSWORD_ERROR = LoginResultS2C_Error_PASSWORD_ERROR;
  static const Error LOCKED = LoginResultS2C_Error_LOCKED;
  static inline bool Error_IsValid(int value) {
    return LoginResultS2C_Error_IsValid(value);
  }
  static const Error Error_MIN =
    LoginResultS2C_Error_Error_MIN;
  static const Error Error_MAX =
    LoginResultS2C_Error_Error_MAX;
  static const int Error_ARRAYSIZE =
    LoginResultS2C_Error_Error_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Error_descriptor() {
    return LoginResultS2C_Error_descriptor();
  }
  static inline const ::std::string& Error_Name(Error value) {
    return LoginResultS2C_Error_Name(value);
  }
  static inline bool Error_Parse(const ::std::string& name,
      Error* value) {
    return LoginResultS2C_Error_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Pro.LoginResultS2C.Error error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline ::Pro::LoginResultS2C_Error error() const;
  inline void set_error(::Pro::LoginResultS2C_Error value);

  // optional string gate = 2;
  inline bool has_gate() const;
  inline void clear_gate();
  static const int kGateFieldNumber = 2;
  inline const ::std::string& gate() const;
  inline void set_gate(const ::std::string& value);
  inline void set_gate(const char* value);
  inline void set_gate(const char* value, size_t size);
  inline ::std::string* mutable_gate();
  inline ::std::string* release_gate();
  inline void set_allocated_gate(::std::string* gate);

  // optional uint32 session = 3;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 3;
  inline ::google::protobuf::uint32 session() const;
  inline void set_session(::google::protobuf::uint32 value);

  // optional .Pro.PlayerData data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::Pro::PlayerData& data() const;
  inline ::Pro::PlayerData* mutable_data();
  inline ::Pro::PlayerData* release_data();
  inline void set_allocated_data(::Pro::PlayerData* data);

  // @@protoc_insertion_point(class_scope:Pro.LoginResultS2C)
 private:
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_gate();
  inline void clear_has_gate();
  inline void set_has_session();
  inline void clear_has_session();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* gate_;
  int error_;
  ::google::protobuf::uint32 session_;
  ::Pro::PlayerData* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_LoginResultS2C_2eproto();
  friend void protobuf_AssignDesc_LoginResultS2C_2eproto();
  friend void protobuf_ShutdownFile_LoginResultS2C_2eproto();

  void InitAsDefaultInstance();
  static LoginResultS2C* default_instance_;
};
// ===================================================================


// ===================================================================

// LoginResultS2C

// optional .Pro.LoginResultS2C.Error error = 1;
inline bool LoginResultS2C::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResultS2C::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginResultS2C::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginResultS2C::clear_error() {
  error_ = 1;
  clear_has_error();
}
inline ::Pro::LoginResultS2C_Error LoginResultS2C::error() const {
  return static_cast< ::Pro::LoginResultS2C_Error >(error_);
}
inline void LoginResultS2C::set_error(::Pro::LoginResultS2C_Error value) {
  assert(::Pro::LoginResultS2C_Error_IsValid(value));
  set_has_error();
  error_ = value;
}

// optional string gate = 2;
inline bool LoginResultS2C::has_gate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginResultS2C::set_has_gate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginResultS2C::clear_has_gate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginResultS2C::clear_gate() {
  if (gate_ != &::google::protobuf::internal::kEmptyString) {
    gate_->clear();
  }
  clear_has_gate();
}
inline const ::std::string& LoginResultS2C::gate() const {
  return *gate_;
}
inline void LoginResultS2C::set_gate(const ::std::string& value) {
  set_has_gate();
  if (gate_ == &::google::protobuf::internal::kEmptyString) {
    gate_ = new ::std::string;
  }
  gate_->assign(value);
}
inline void LoginResultS2C::set_gate(const char* value) {
  set_has_gate();
  if (gate_ == &::google::protobuf::internal::kEmptyString) {
    gate_ = new ::std::string;
  }
  gate_->assign(value);
}
inline void LoginResultS2C::set_gate(const char* value, size_t size) {
  set_has_gate();
  if (gate_ == &::google::protobuf::internal::kEmptyString) {
    gate_ = new ::std::string;
  }
  gate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginResultS2C::mutable_gate() {
  set_has_gate();
  if (gate_ == &::google::protobuf::internal::kEmptyString) {
    gate_ = new ::std::string;
  }
  return gate_;
}
inline ::std::string* LoginResultS2C::release_gate() {
  clear_has_gate();
  if (gate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gate_;
    gate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginResultS2C::set_allocated_gate(::std::string* gate) {
  if (gate_ != &::google::protobuf::internal::kEmptyString) {
    delete gate_;
  }
  if (gate) {
    set_has_gate();
    gate_ = gate;
  } else {
    clear_has_gate();
    gate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 session = 3;
inline bool LoginResultS2C::has_session() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginResultS2C::set_has_session() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginResultS2C::clear_has_session() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginResultS2C::clear_session() {
  session_ = 0u;
  clear_has_session();
}
inline ::google::protobuf::uint32 LoginResultS2C::session() const {
  return session_;
}
inline void LoginResultS2C::set_session(::google::protobuf::uint32 value) {
  set_has_session();
  session_ = value;
}

// optional .Pro.PlayerData data = 4;
inline bool LoginResultS2C::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginResultS2C::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginResultS2C::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginResultS2C::clear_data() {
  if (data_ != NULL) data_->::Pro::PlayerData::Clear();
  clear_has_data();
}
inline const ::Pro::PlayerData& LoginResultS2C::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Pro::PlayerData* LoginResultS2C::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Pro::PlayerData;
  return data_;
}
inline ::Pro::PlayerData* LoginResultS2C::release_data() {
  clear_has_data();
  ::Pro::PlayerData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void LoginResultS2C::set_allocated_data(::Pro::PlayerData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pro

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Pro::LoginResultS2C_Error>() {
  return ::Pro::LoginResultS2C_Error_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LoginResultS2C_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerKickS2C.proto

#ifndef PROTOBUF_PlayerKickS2C_2eproto__INCLUDED
#define PROTOBUF_PlayerKickS2C_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Pro {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PlayerKickS2C_2eproto();
void protobuf_AssignDesc_PlayerKickS2C_2eproto();
void protobuf_ShutdownFile_PlayerKickS2C_2eproto();

class PlayerKickS2C;

enum PlayerKickS2C_Reason {
  PlayerKickS2C_Reason__KICK = 1
};
bool PlayerKickS2C_Reason_IsValid(int value);
const PlayerKickS2C_Reason PlayerKickS2C_Reason_Reason_MIN = PlayerKickS2C_Reason__KICK;
const PlayerKickS2C_Reason PlayerKickS2C_Reason_Reason_MAX = PlayerKickS2C_Reason__KICK;
const int PlayerKickS2C_Reason_Reason_ARRAYSIZE = PlayerKickS2C_Reason_Reason_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerKickS2C_Reason_descriptor();
inline const ::std::string& PlayerKickS2C_Reason_Name(PlayerKickS2C_Reason value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerKickS2C_Reason_descriptor(), value);
}
inline bool PlayerKickS2C_Reason_Parse(
    const ::std::string& name, PlayerKickS2C_Reason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerKickS2C_Reason>(
    PlayerKickS2C_Reason_descriptor(), name, value);
}
// ===================================================================

class PlayerKickS2C : public ::google::protobuf::Message {
 public:
  PlayerKickS2C();
  virtual ~PlayerKickS2C();

  PlayerKickS2C(const PlayerKickS2C& from);

  inline PlayerKickS2C& operator=(const PlayerKickS2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerKickS2C& default_instance();

  void Swap(PlayerKickS2C* other);

  // implements Message ----------------------------------------------

  PlayerKickS2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerKickS2C& from);
  void MergeFrom(const PlayerKickS2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PlayerKickS2C_Reason Reason;
  static const Reason _KICK = PlayerKickS2C_Reason__KICK;
  static inline bool Reason_IsValid(int value) {
    return PlayerKickS2C_Reason_IsValid(value);
  }
  static const Reason Reason_MIN =
    PlayerKickS2C_Reason_Reason_MIN;
  static const Reason Reason_MAX =
    PlayerKickS2C_Reason_Reason_MAX;
  static const int Reason_ARRAYSIZE =
    PlayerKickS2C_Reason_Reason_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Reason_descriptor() {
    return PlayerKickS2C_Reason_descriptor();
  }
  static inline const ::std::string& Reason_Name(Reason value) {
    return PlayerKickS2C_Reason_Name(value);
  }
  static inline bool Reason_Parse(const ::std::string& name,
      Reason* value) {
    return PlayerKickS2C_Reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Pro.PlayerKickS2C.Reason reason = 1;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 1;
  inline ::Pro::PlayerKickS2C_Reason reason() const;
  inline void set_reason(::Pro::PlayerKickS2C_Reason value);

  // @@protoc_insertion_point(class_scope:Pro.PlayerKickS2C)
 private:
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerKickS2C_2eproto();
  friend void protobuf_AssignDesc_PlayerKickS2C_2eproto();
  friend void protobuf_ShutdownFile_PlayerKickS2C_2eproto();

  void InitAsDefaultInstance();
  static PlayerKickS2C* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerKickS2C

// optional .Pro.PlayerKickS2C.Reason reason = 1;
inline bool PlayerKickS2C::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerKickS2C::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerKickS2C::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerKickS2C::clear_reason() {
  reason_ = 1;
  clear_has_reason();
}
inline ::Pro::PlayerKickS2C_Reason PlayerKickS2C::reason() const {
  return static_cast< ::Pro::PlayerKickS2C_Reason >(reason_);
}
inline void PlayerKickS2C::set_reason(::Pro::PlayerKickS2C_Reason value) {
  assert(::Pro::PlayerKickS2C_Reason_IsValid(value));
  set_has_reason();
  reason_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pro

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Pro::PlayerKickS2C_Reason>() {
  return ::Pro::PlayerKickS2C_Reason_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PlayerKickS2C_2eproto__INCLUDED
